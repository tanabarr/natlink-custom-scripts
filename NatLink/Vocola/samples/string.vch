###
### Standard simple functions for manipulating strings
###
###   Version 1.5
###
###   cf. http://en.wikipedia.org/wiki/String_functions_(programming)
### 

  #
  # Len: Returns the length of a string. An empty string returns a length of 0.
  #
Len(string)          := EvalTemplate('len(%s)', $string);


  #
  # Left(string,n): Returns the left n characters of a string. If n is
  # greater than the length of the string then the whole string is
  # returned.  Behavior for negative values of n is undefined.
  #
Left(string, count)  := EvalTemplate('%s[0:%i]', $string, $count);


  #
  # Right(string,n): Returns the right n characters of a string. If n is
  # greater than the length of the string then the whole string is
  # returned.  Behavior for negative values of n is undefined.
  #
Right(string, count)  := EvalTemplate('%s[-%i:]', $string, $count);


  #
  # Mid(string,start): Returns the substring of string starting at
  # start.  (0 is the position of the first character.)  Returns "" if
  # start equals or exceeds the length of string.  Behavior for
  # negative values of start is undefined.
  #
Mid(string, start)  := EvalTemplate('%s[%i:]', $string, $start);


  #
  # Mid3(string,start,n): Returns the substring of string starting at
  # start of length n.  (0 is the position of the first character.)
  # The resulting string is truncated if there are fewer than n
  # characters beyond the starting point.  Behavior for negative
  # values of start or count is undefined.
  #
Mid3(string, start, count)  := EvalTemplate('%s[%i:%i+%i]', $string, 
	     	                            $start, $start, $count);


  #
  # Replace(string,from,to): replaces instances of $from in $string with
  # $to from left to right with replacement text ineligible for further
  # replacement; returns the resulting string.
  #
  # If $string contains no overlapping instances of $from, then this is
  # equivalent to simultaneously replacing every occurrence of $from with $to.  
  #
  # Examples:
  #
  #    Replace(re**op*, *,  **) = re****op**
  #    Replace(o***p,   **, r*) = or**p
  #
Replace(string, from, to) := EvalTemplate('%s.replace(%s, %s)', 
                                          $string, $from, $to);


  # 
  # Split(string,separator,index): Splits $string by occurrences
  # of $separator (itself a string) into a list of substrings then
  # returns the $index-th(*) substring.
  #
  # Example splits: 
  #     "ab,cd,,ef"   by ","  yields "ab", "cd", "", "ef"
  #     "ab//cd/e//f" by "//" yields "ab", "cd/e", "f"
  #     ""            by ","  yields ""
  #
  # (*) -  0 denotes the first string, 1 denotes the second string, ...
  #       -1 denotes the last string, -2 denotes the second to last string, ...
  #
  # Behavior for index values that describe nonexistent strings is undefined.
  # 
Split(string, separator, index) :=
    EvalTemplate('%s.split(%s)[%i]', $string, $separator, $index);


  #
  # Lower(string): Returns the string in lower case.
  #
Lower(string)  := EvalTemplate('%s.lower()', $string);


  #
  # Upper(string): Returns the string in upper case.
  #
Upper(string)  := EvalTemplate('%s.upper()', $string);
