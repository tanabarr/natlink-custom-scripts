# NatLink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.5, Sat Feb 06 13:09:04 2016

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """
        <machine> = ('release five' | 'release six' | 'P.O. Box' | 'PA install' | 'build Debian' | 'build Debian one' | 'build Debian two' | 'build cent toss' | 'build wheezy' | 'metabox one' | 'lark' | 'Embarcadero' | 'remote foil' | 'local foil' ) ;
        <subcmds> = ('log' | 'fetch' | 'pull' | 'clone' | 'config' | 'help' | 'checkout' | 'checkout move' | 'checkout new' | 'branch' | 'branch remove' | 'branch show' | 'status' | 'status tract' | 'add' | 'add updated' | 'diff' | 'diff cashed' | 'rebase' | 'rebase continue' | 'checkout master' | 'checkout branch' | 'commit' | 'commit amend' | 'commit modified' | 'commit message' | 'ref log' | 'cherry' | 'hard reset' | 'reset head' | 'hard reset head' | 'stash' | 'stash list' | 'stash show' | 'stash pop' | 'submodule init' | 'submodule update' ) ;
        <1> = 'versioning' <subcmds> ;
        <subcmds_sysctl> = ('start' | 'stop' | 'enable' | 'disable' | 'help' | 'status' | 'dependencies' | 'units' ) ;
        <2> = 'system control' <subcmds_sysctl> ;
        <3> = ('arguments' | 'quit' | 'list source' | 'where' | 'next' | 'step' | 'return' | 'continue' | 'up stack' | 'until' | 'step over' | 'over' ) ;
        <4> = ('breakpoint' | 'clear' ) ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <108> = ('breakpoint' | 'clear' ) ;
        <5> = 'execute expression' ;
        <6> = 'import debug' ;
        <7> = 'print' ;
        <8> = ('locals' | 'globals' ) ;
        <9> = ('continue' | 'step out' | 'Step over' | 'step' | 'step into' ) ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20) 'times' ;
        <110> = ('continue' | 'step out' | 'Step over' | 'step' | 'step into' ) ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20) ;
        <109> = ('continue' | 'step out' | 'Step over' | 'step' | 'step into' ) 'times' ;
        <111> = ('continue' | 'step out' | 'Step over' | 'step' | 'step into' ) ;
        <pkg_mgmt_subcmds> = ('query' | 'query all' | 'query package requirements' | 'install' | 'erase' ) ;
        <10> = 'red package' ;
        <11> = 'red package' <pkg_mgmt_subcmds> ;
        <12> = 'pip' ('freeze' | 'completion' | 'install' | 'list' | 'help' ) ;
        <13> = 'pip option' ('bash' | 'upgrade' | 'outdated' | 'local' | 'no index' | 'find links' ) ;
        <14> = 'yum' ('provides' | 'install' | 'search' | 'update' | 'remove' | 'clean' | 'clean all' | 'local install' ) ;
        <15> = 'yum list' ('available' | 'installed' | 'extras' | 'updates' | 'obsoletes' | 'all' | 'recent' ) ;
        <16> = 'yum' ('enable' | 'disable' ) 'repo' ;
        <common_actions> = ('edit' | 'source' ) ;
        <17> = <common_actions> ('vim' | 'bash' ) 'config' ;
        <18> = 'history' ;
        <19> = 'search history' ;
        <20> = 'list history' ;
        <21> = 'break' ;
        <22> = 'break end of file' ;
        <23> = 'find process' ('number' | 'file' ) ;
        <112> = 'find process' ;
        <24> = 'find files' ;
        <25> = 'escape process' ;
        <26> = ('foreground' | 'background' ) 'process' ;
        <27> = 'double dash' ;
        <28> = 'Bash Tag File Update' ;
        <29> = 'make archive' ;
        <30> = 'extract archive' ;
        <31> = 'confirm force' ('close' | 'remove' ) ;
        <32> = 'back directory' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <33> = 'change ownership' ;
        <34> = 'change' ('permissions' | 'mode' ) ;
        <35> = 'home root' ;
        <36> = 'enter list' ;
        <37> = 'change absolute directory' ;
        <38> = 'present working directory' ;
        <39> = 'move files' ;
        <40> = 'search text' ;
        <41> = 'close shell' ;
        <42> = ('version' | 'short' | 'long' | 'help' | 'force' | 'continue' | 'yes' ) 'option' ;
        <43> = ('vim' | 'normal' | 'normal brief' ) 'diff' ;
        <44> = 'cygwin password' ;
        <45> = ('sub' | 'SVM' ) ('checkout' | 'diff' | 'commit' | 'update' | 'remove' | 'checkout bug' | 'log' | 'start bug' | 'status' ) ;
        <46> = 'start environment' ('one' | 'two' | 'three' | 'four' | 'five') ;
        <47> = 'stop environment' ;
        <48> = 'export' ('test' | 'development' ) 'settings' ;
        <49> = 'Django' ('shell' | 'database shell' | 'sink' | 'sink input' | 'run' | 'dump' ) ;
        <50> = 'network stats' ;
        <51> = 'network interfaces' ;
        <52> = 'make link' ;
        <53> = ('recursive' | 'file' ) 'copy' ;
        <54> = ('recursive' | 'normal' ) 'grep' ;
        <55> = ('read' | 'make' | 'track' ) 'archive' ;
        <56> = 'extract tar' ;
        <57> = 'read file' ;
        <58> = 'tail file' ;
        <59> = 'list command history' ;
        <60> = 'execute command' ;
        <61> = 'home root' ;
        <62> = 'edit' ;
        <63> = 'as root' ;
        <64> = 'switch to superuser' ;
        <113> = 'switch superuser' ;
        <65> = 'switch to user' ;
        <114> = 'switch user' ;
        <66> = 'echo command' ;
        <67> = 'keyac shell' ('superuser' ) ;
        <68> = 'fix enter key' ;
        <69> = 'initialisation scripts' ;
        <70> = 'et cetera' ;
        <71> = 'system config' ;
        <72> = 'my home' ('one' | 'two' ) ;
        <115> = 'my home' ;
        <73> = 'log root' ;
        <74> = 'use a lip' ('pie' ) ;
        <116> = 'use a lip' ;
        <75> = 'repeat command' ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <76> = 'repeat command' ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <77> = 'repeat command' ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <78> = 'Journal control' ;
        <79> = 'firewall command' ;
        <80> = 'service control' ;
        <81> = 'service control new' ;
        <82> = 'list' ;
        <83> = 'list directory' ;
        <84> = 'long list' ;
        <85> = 'long list directory' ;
        <86> = 'go to' ;
        <87> = 'switch directory' ;
        <88> = 'back directory' ;
        <89> = ('shell' | 'go' ) 'back directory' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <117> = ('shell' | 'go' ) 'back directory' ;
        <90> = 'make directory' ;
        <91> = 'show disk space' ;
        <usage> = ('usage' | 'usage kilobytes' | 'usage megabytes' ) ;
        <92> = 'show disk' <usage> ;
        <93> = 'W get' ;
        <94> = 'cool' ;
        <95> = 'said shell' ;
        <96> = 'postgres sequel' ;
        <97> = 'engine X' ;
        <98> = 'packet to dump' ;
        <118> = 'packet dump' ;
        <99> = 'secure login to' <machine> ;
        <119> = 'secure login' <machine> ;
        <100> = 'remote login' ;
        <101> = 'S F T P' <machine> ;
        <102> = 'multiple get' ;
        <103> = 'local change directory' ;
        <104> = 'local working directory' ;
        <scp> = ('secure copy' | 'secure recursive copy' | 'recursive secure copy' | 'secure clone' ) ;
        <105> = (('secure copy' | 'secure recursive copy' | 'recursive secure copy' | 'secure clone' ) ) ;
        <106> = 'public key' ('15' | '11' | '12' ) ('init' | 'tool' ) ;
        <120> = 'public key' ('15' | '11' | '12' ) ;
        <107> = 'skip on' ;
        <any> = <1>|<2>|<3>|<4>|<108>|<5>|<6>|<7>|<8>|<9>|<110>|<109>|<111>|<10>|<11>|<12>|<13>|<14>|<15>|<16>|<17>|<18>|<19>|<20>|<21>|<22>|<23>|<112>|<24>|<25>|<26>|<27>|<28>|<29>|<30>|<31>|<32>|<33>|<34>|<35>|<36>|<37>|<38>|<39>|<40>|<41>|<42>|<43>|<44>|<45>|<46>|<47>|<48>|<49>|<50>|<51>|<52>|<53>|<54>|<55>|<56>|<57>|<58>|<59>|<60>|<61>|<62>|<63>|<64>|<113>|<65>|<114>|<66>|<67>|<68>|<69>|<70>|<71>|<72>|<115>|<73>|<74>|<116>|<75>|<76>|<77>|<78>|<79>|<80>|<81>|<82>|<83>|<84>|<85>|<86>|<87>|<88>|<89>|<117>|<90>|<91>|<92>|<93>|<94>|<95>|<96>|<97>|<98>|<118>|<99>|<119>|<100>|<101>|<102>|<103>|<104>|<105>|<106>|<120>|<107>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.ruleSet1 = ['sequence']

    def gotBegin(self,moduleInfo):
        # Return if wrong application
        window = matchWindow(moduleInfo,'powershell','')
        if not window: return None
        self.firstWord = 0
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        self.deactivateAll()
        title = string.lower(moduleInfo[1])
        if string.find(title,'') >= 0:
            for rule in self.ruleSet1:
                try:
                    self.activate(rule,window)
                except natlink.BadWindow:
                    pass

    def convert_number_word(self, word):
        if   word == 'zero':
            return '0'
        elif word == 'one':
            return '1'
        elif word == 'two':
            return '2'
        elif word == 'three':
            return '3'
        elif word == 'four':
            return '4'
        elif word == 'five':
            return '5'
        elif word == 'six':
            return '6'
        elif word == 'seven':
            return '7'
        elif word == 'eight':
            return '8'
        elif word == 'nine':
            return '9'
        else:
            return word

    def get_machine(self, list_buffer, functional, word):
        if word == 'release five':
            list_buffer += 'mdl@...'
        elif word == 'release six':
            list_buffer += 'mdl@...'
        elif word == 'P.O. Box':
            list_buffer += 'mdl@...'
        elif word == 'PA install':
            list_buffer += 'lillibridgem@...'
        elif word == 'build Debian':
            list_buffer += 'lillibridgem@...'
        elif word == 'build Debian one':
            list_buffer += 'lillibridgem@...'
        elif word == 'build Debian two':
            list_buffer += 'lillibridgem@...'
        elif word == 'build cent toss':
            list_buffer += 'lillibridgem@...'
        elif word == 'build wheezy':
            list_buffer += 'lillibridgem@...'
        elif word == 'metabox one':
            list_buffer += 'lillibridgem@...'
        elif word == 'lark':
            list_buffer += 'mdl@...'
        elif word == 'Embarcadero':
            list_buffer += 'mdl@...'
        elif word == 'remote foil':
            list_buffer += 'mdl@<censored>'
        elif word == 'local foil':
            list_buffer += 'mdl@...'
        return list_buffer

    def get_subcmds(self, list_buffer, functional, word):
        if word == 'log':
            list_buffer += 'log'
        elif word == 'fetch':
            list_buffer += 'fetch'
        elif word == 'pull':
            list_buffer += 'pull'
        elif word == 'clone':
            list_buffer += 'clone'
        elif word == 'config':
            list_buffer += 'config'
        elif word == 'help':
            list_buffer += 'help'
        elif word == 'checkout':
            list_buffer += 'checkout '
        elif word == 'checkout move':
            list_buffer += 'checkout -B '
        elif word == 'checkout new':
            list_buffer += 'checkout -b '
        elif word == 'branch':
            list_buffer += 'branch '
        elif word == 'branch remove':
            list_buffer += 'branch -D '
        elif word == 'branch show':
            list_buffer += 'branch{enter}'
        elif word == 'status':
            list_buffer += 'status'
        elif word == 'status tract':
            list_buffer += 'status -uno'
        elif word == 'add':
            list_buffer += 'add'
        elif word == 'add updated':
            list_buffer += 'add -u '
        elif word == 'diff':
            list_buffer += 'diff'
        elif word == 'diff cashed':
            list_buffer += 'diff --cached '
        elif word == 'rebase':
            list_buffer += 'rebase -i master'
        elif word == 'rebase continue':
            list_buffer += 'rebase --continue'
        elif word == 'checkout master':
            list_buffer += 'checkout master'
        elif word == 'checkout branch':
            list_buffer += 'checkout -b '
        elif word == 'commit':
            list_buffer += 'commit -s'
        elif word == 'commit amend':
            list_buffer += 'commit --amend -s'
        elif word == 'commit modified':
            list_buffer += 'commit -a '
        elif word == 'commit message':
            list_buffer += 'commit -m '
        elif word == 'ref log':
            list_buffer += 'reflog'
        elif word == 'cherry':
            list_buffer += 'cherry-pick '
        elif word == 'hard reset':
            list_buffer += 'reset --hard '
        elif word == 'reset head':
            list_buffer += 'reset HEAD'
        elif word == 'hard reset head':
            list_buffer += 'reset --hard HEAD'
        elif word == 'stash':
            list_buffer += 'stash'
        elif word == 'stash list':
            list_buffer += 'stash list'
        elif word == 'stash show':
            list_buffer += 'stash show'
        elif word == 'stash pop':
            list_buffer += 'stash pop'
        elif word == 'submodule init':
            list_buffer += 'submodule init'
        elif word == 'submodule update':
            list_buffer += 'submodule update'
        return list_buffer

    # 'versioning' <subcmds>
    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'git '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_subcmds(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('git.vch', 20, '\'versioning\' <subcmds>', e)
            self.firstWord = -1

    def get_subcmds_sysctl(self, list_buffer, functional, word):
        if word == 'start':
            list_buffer += 'start'
        elif word == 'stop':
            list_buffer += 'stop'
        elif word == 'enable':
            list_buffer += 'enable'
        elif word == 'disable':
            list_buffer += 'disable'
        elif word == 'help':
            list_buffer += 'help'
        elif word == 'status':
            list_buffer += 'status'
        elif word == 'dependencies':
            list_buffer += 'list-dependencies'
        elif word == 'units':
            list_buffer += 'list-unit-files'
        return list_buffer

    # 'system control' <subcmds_sysctl>
    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'systemctl '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_subcmds_sysctl(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('systemctl.vch', 7, '\'system control\' <subcmds_sysctl>', e)
            self.firstWord = -1

    # ('arguments' | 'quit' | 'list source' | 'where' | 'next' | 'step' | 'return' | 'continue' | 'up stack' | 'until' | 'step over' | 'over')
    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'arguments':
                top_buffer += 'a'
            elif word == 'quit':
                top_buffer += 'quit'
            elif word == 'list source':
                top_buffer += 'list'
            elif word == 'where':
                top_buffer += 'where'
            elif word == 'next':
                top_buffer += 'next'
            elif word == 'step':
                top_buffer += 'step'
            elif word == 'return':
                top_buffer += 'return'
            elif word == 'continue':
                top_buffer += 'continue'
            elif word == 'up stack':
                top_buffer += 'up'
            elif word == 'until':
                top_buffer += 'until'
            elif word == 'step over':
                top_buffer += 'n'
            elif word == 'over':
                top_buffer += 'n'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_3(words[1:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 17, '(\'arguments\' | \'quit\' | \'list source\' | \'where\' | \'next\' | \'step\' | \'return\' | \'continue\' | \'up stack\' | \'until\' | \'step over\' | \'over\')', e)
            self.firstWord = -1

    # ('breakpoint' | 'clear') 1..9
    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'breakpoint':
                top_buffer += 'b'
            elif word == 'clear':
                top_buffer += 'clear'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                top_buffer += ' '
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_4(words[2:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 19, '(\'breakpoint\' | \'clear\') 1..9', e)
            self.firstWord = -1

    # ('breakpoint' | 'clear')
    def gotResults_108(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'breakpoint':
                top_buffer += 'b'
            elif word == 'clear':
                top_buffer += 'clear'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ' '
                top_buffer += ''
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_108(words[1:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 19, '(\'breakpoint\' | \'clear\')', e)
            self.firstWord = -1

    # 'execute expression'
    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '!'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_5(words[1:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 20, '\'execute expression\'', e)
            self.firstWord = -1

    # 'import debug'
    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'import ipdb;ipdb.set_trace()'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_6(words[1:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 21, '\'import debug\'', e)
            self.firstWord = -1

    # 'print'
    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'pp '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_7(words[1:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 22, '\'print\'', e)
            self.firstWord = -1

    # ('locals' | 'globals')
    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'pp '
            word = fullResults[0 + self.firstWord][0]
            top_buffer += word
            top_buffer += '()'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_8(words[1:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 23, '(\'locals\' | \'globals\')', e)
            self.firstWord = -1

    # ('continue' | 'step out' | 'Step over' | 'step' | 'step into') 1..20 'times'
    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                word = fullResults[1 + self.firstWord][0]
                limit2 += self.convert_number_word(word)
                for i in range(to_long(limit2)):
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
                    word = fullResults[0 + self.firstWord][0]
                    if word == 'continue':
                        top_buffer += 'continue'
                    elif word == 'step out':
                        top_buffer += 'return'
                    elif word == 'Step over':
                        top_buffer += 'next'
                    elif word == 'step':
                        top_buffer += 'step'
                    elif word == 'step into':
                        top_buffer += 'step'
                    top_buffer += '{enter}'
            else:
                word = fullResults[0 + self.firstWord][0]
                if word == 'continue':
                    top_buffer += 'continue'
                elif word == 'step out':
                    top_buffer += 'return'
                elif word == 'Step over':
                    top_buffer += 'next'
                elif word == 'step':
                    top_buffer += 'step'
                elif word == 'step into':
                    top_buffer += 'step'
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_9(words[3:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 26, '(\'continue\' | \'step out\' | \'Step over\' | \'step\' | \'step into\') 1..20 \'times\'', e)
            self.firstWord = -1

    # ('continue' | 'step out' | 'Step over' | 'step' | 'step into') 1..20
    def gotResults_110(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                word = fullResults[1 + self.firstWord][0]
                limit2 += self.convert_number_word(word)
                for i in range(to_long(limit2)):
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
                    word = fullResults[0 + self.firstWord][0]
                    if word == 'continue':
                        top_buffer += 'continue'
                    elif word == 'step out':
                        top_buffer += 'return'
                    elif word == 'Step over':
                        top_buffer += 'next'
                    elif word == 'step':
                        top_buffer += 'step'
                    elif word == 'step into':
                        top_buffer += 'step'
                    top_buffer += '{enter}'
            else:
                word = fullResults[0 + self.firstWord][0]
                if word == 'continue':
                    top_buffer += 'continue'
                elif word == 'step out':
                    top_buffer += 'return'
                elif word == 'Step over':
                    top_buffer += 'next'
                elif word == 'step':
                    top_buffer += 'step'
                elif word == 'step into':
                    top_buffer += 'step'
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_110(words[2:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 26, '(\'continue\' | \'step out\' | \'Step over\' | \'step\' | \'step into\') 1..20', e)
            self.firstWord = -1

    # ('continue' | 'step out' | 'Step over' | 'step' | 'step into') 'times'
    def gotResults_109(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
                    word = fullResults[0 + self.firstWord][0]
                    if word == 'continue':
                        top_buffer += 'continue'
                    elif word == 'step out':
                        top_buffer += 'return'
                    elif word == 'Step over':
                        top_buffer += 'next'
                    elif word == 'step':
                        top_buffer += 'step'
                    elif word == 'step into':
                        top_buffer += 'step'
                    top_buffer += '{enter}'
            else:
                word = fullResults[0 + self.firstWord][0]
                if word == 'continue':
                    top_buffer += 'continue'
                elif word == 'step out':
                    top_buffer += 'return'
                elif word == 'Step over':
                    top_buffer += 'next'
                elif word == 'step':
                    top_buffer += 'step'
                elif word == 'step into':
                    top_buffer += 'step'
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_109(words[2:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 26, '(\'continue\' | \'step out\' | \'Step over\' | \'step\' | \'step into\') \'times\'', e)
            self.firstWord = -1

    # ('continue' | 'step out' | 'Step over' | 'step' | 'step into')
    def gotResults_111(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
                    word = fullResults[0 + self.firstWord][0]
                    if word == 'continue':
                        top_buffer += 'continue'
                    elif word == 'step out':
                        top_buffer += 'return'
                    elif word == 'Step over':
                        top_buffer += 'next'
                    elif word == 'step':
                        top_buffer += 'step'
                    elif word == 'step into':
                        top_buffer += 'step'
                    top_buffer += '{enter}'
            else:
                word = fullResults[0 + self.firstWord][0]
                if word == 'continue':
                    top_buffer += 'continue'
                elif word == 'step out':
                    top_buffer += 'return'
                elif word == 'Step over':
                    top_buffer += 'next'
                elif word == 'step':
                    top_buffer += 'step'
                elif word == 'step into':
                    top_buffer += 'step'
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_111(words[1:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 26, '(\'continue\' | \'step out\' | \'Step over\' | \'step\' | \'step into\')', e)
            self.firstWord = -1

    def get_pkg_mgmt_subcmds(self, list_buffer, functional, word):
        if word == 'query':
            list_buffer += '-q'
        elif word == 'query all':
            list_buffer += '-qa'
        elif word == 'query package requirements':
            list_buffer += '-qpR'
        elif word == 'install':
            list_buffer += '-Uvh'
        elif word == 'erase':
            list_buffer += '-e'
        return list_buffer

    # 'red package'
    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'rpm '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_10(words[1:], fullResults)
        except Exception, e:
            handle_error('package_management.vch', 24, '\'red package\'', e)
            self.firstWord = -1

    # 'red package' <pkg_mgmt_subcmds>
    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'rpm '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_pkg_mgmt_subcmds(top_buffer, False, word)
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('package_management.vch', 25, '\'red package\' <pkg_mgmt_subcmds>', e)
            self.firstWord = -1

    # 'pip' ('freeze' | 'completion' | 'install' | 'list' | 'help')
    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'pip '
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_12(words[2:], fullResults)
        except Exception, e:
            handle_error('package_management.vch', 30, '\'pip\' (\'freeze\' | \'completion\' | \'install\' | \'list\' | \'help\')', e)
            self.firstWord = -1

    # 'pip option' ('bash' | 'upgrade' | 'outdated' | 'local' | 'no index' | 'find links')
    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' --'
            word = fullResults[1 + self.firstWord][0]
            if word == 'bash':
                top_buffer += 'bash'
            elif word == 'upgrade':
                top_buffer += 'upgrade'
            elif word == 'outdated':
                top_buffer += 'outdated'
            elif word == 'local':
                top_buffer += 'local'
            elif word == 'no index':
                top_buffer += 'no-index'
            elif word == 'find links':
                top_buffer += 'find-links'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_13(words[2:], fullResults)
        except Exception, e:
            handle_error('package_management.vch', 31, '\'pip option\' (\'bash\' | \'upgrade\' | \'outdated\' | \'local\' | \'no index\' | \'find links\')', e)
            self.firstWord = -1

    # 'yum' ('provides' | 'install' | 'search' | 'update' | 'remove' | 'clean' | 'clean all' | 'local install')
    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'yum '
            word = fullResults[1 + self.firstWord][0]
            if word == 'provides':
                top_buffer += 'provides'
            elif word == 'install':
                top_buffer += 'install'
            elif word == 'search':
                top_buffer += 'search'
            elif word == 'update':
                top_buffer += 'update'
            elif word == 'remove':
                top_buffer += 'remove'
            elif word == 'clean':
                top_buffer += 'clean'
            elif word == 'clean all':
                top_buffer += 'clean all'
            elif word == 'local install':
                top_buffer += 'localinstall'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_14(words[2:], fullResults)
        except Exception, e:
            handle_error('package_management.vch', 43, '\'yum\' (\'provides\' | \'install\' | \'search\' | \'update\' | \'remove\' | \'clean\' | \'clean all\' | \'local install\')', e)
            self.firstWord = -1

    # 'yum list' ('available' | 'installed' | 'extras' | 'updates' | 'obsoletes' | 'all' | 'recent')
    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'yum list '
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_15(words[2:], fullResults)
        except Exception, e:
            handle_error('package_management.vch', 44, '\'yum list\' (\'available\' | \'installed\' | \'extras\' | \'updates\' | \'obsoletes\' | \'all\' | \'recent\')', e)
            self.firstWord = -1

    # 'yum' ('enable' | 'disable') 'repo'
    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '--'
            word = fullResults[1 + self.firstWord][0]
            if word == 'enable':
                top_buffer += 'en'
            elif word == 'disable':
                top_buffer += 'dis'
            top_buffer += 'ablerepo=*'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_16(words[3:], fullResults)
        except Exception, e:
            handle_error('package_management.vch', 45, '\'yum\' (\'enable\' | \'disable\') \'repo\'', e)
            self.firstWord = -1

    def get_common_actions(self, list_buffer, functional, word):
        if word == 'edit':
            list_buffer += 'vim'
        elif word == 'source':
            list_buffer += 'source'
        return list_buffer

    # <common_actions> ('vim' | 'bash') 'config'
    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_common_actions(top_buffer, False, word)
            top_buffer += ' ~/.'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += 'rc'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('UNIX_shell.vch', 15, '<common_actions> (\'vim\' | \'bash\') \'config\'', e)
            self.firstWord = -1

    # 'history'
    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+r}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_18(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 16, '\'history\'', e)
            self.firstWord = -1

    # 'search history'
    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '!'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_19(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 17, '\'search history\'', e)
            self.firstWord = -1

    # 'list history'
    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'history{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_20(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 18, '\'list history\'', e)
            self.firstWord = -1

    # 'break'
    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_21(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 19, '\'break\'', e)
            self.firstWord = -1

    # 'break end of file'
    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+d}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_22(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 20, '\'break end of file\'', e)
            self.firstWord = -1

    # 'find process' ('number' | 'file')
    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ps -ax'
            word = fullResults[1 + self.firstWord][0]
            if word == 'number':
                pass  # no actions
            elif word == 'file':
                top_buffer += 'ef'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_23(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 21, '\'find process\' (\'number\' | \'file\')', e)
            self.firstWord = -1

    # 'find process'
    def gotResults_112(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ps -ax'
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_112(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 21, '\'find process\'', e)
            self.firstWord = -1

    # 'find files'
    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'find / -name \'\'{left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_24(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 22, '\'find files\'', e)
            self.firstWord = -1

    # 'escape process'
    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}{ctrl+z}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_25(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 23, '\'escape process\'', e)
            self.firstWord = -1

    # ('foreground' | 'background') 'process'
    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'foreground':
                top_buffer += 'fg'
            elif word == 'background':
                top_buffer += 'bg'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_26(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 25, '(\'foreground\' | \'background\') \'process\'', e)
            self.firstWord = -1

    # 'double dash'
    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '--'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_27(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 26, '\'double dash\'', e)
            self.firstWord = -1

    # 'Bash Tag File Update'
    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_28(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 28, '\'Bash Tag File Update\'', e)
            self.firstWord = -1

    # 'make archive'
    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'tar -cf '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_29(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 29, '\'make archive\'', e)
            self.firstWord = -1

    # 'extract archive'
    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'tar -xf '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_30(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 30, '\'extract archive\'', e)
            self.firstWord = -1

    # 'confirm force' ('close' | 'remove')
    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'close':
                top_buffer += '{esc}:q!'
            elif word == 'remove':
                top_buffer += 'rm -r'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_31(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 31, '\'confirm force\' (\'close\' | \'remove\')', e)
            self.firstWord = -1

    # 'back directory' 1..9
    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            limit = ''
            word = fullResults[1 + self.firstWord][0]
            limit += self.convert_number_word(word)
            for i in range(to_long(limit)):
                top_buffer += '../'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_32(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 32, '\'back directory\' 1..9', e)
            self.firstWord = -1

    # 'change ownership'
    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'chown -R tanabarr:tanabarr '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_33(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 33, '\'change ownership\'', e)
            self.firstWord = -1

    # 'change' ('permissions' | 'mode')
    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'chmod -R 755 '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_34(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 34, '\'change\' (\'permissions\' | \'mode\')', e)
            self.firstWord = -1

    # 'home root'
    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '~/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_35(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 35, '\'home root\'', e)
            self.firstWord = -1

    # 'enter list'
    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{enter}ls{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_36(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 36, '\'enter list\'', e)
            self.firstWord = -1

    # 'change absolute directory'
    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{shift}cd -P .{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_37(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 37, '\'change absolute directory\'', e)
            self.firstWord = -1

    # 'present working directory'
    def gotResults_38(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'pwd'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_38(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 38, '\'present working directory\'', e)
            self.firstWord = -1

    # 'move files'
    def gotResults_39(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'mv '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_39(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 39, '\'move files\'', e)
            self.firstWord = -1

    # 'search text'
    def gotResults_40(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '| grep '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_40(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 40, '\'search text\'', e)
            self.firstWord = -1

    # 'close shell'
    def gotResults_41(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'exit{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_41(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 41, '\'close shell\'', e)
            self.firstWord = -1

    # ('version' | 'short' | 'long' | 'help' | 'force' | 'continue' | 'yes') 'option'
    def gotResults_42(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' '
            word = fullResults[0 + self.firstWord][0]
            if word == 'version':
                top_buffer += '--version'
            elif word == 'short':
                top_buffer += '-'
            elif word == 'long':
                top_buffer += '--'
            elif word == 'help':
                top_buffer += '--help'
            elif word == 'force':
                top_buffer += '--force'
            elif word == 'continue':
                top_buffer += '--continue'
            elif word == 'yes':
                top_buffer += '-y'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_42(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 42, '(\'version\' | \'short\' | \'long\' | \'help\' | \'force\' | \'continue\' | \'yes\') \'option\'', e)
            self.firstWord = -1

    # ('vim' | 'normal' | 'normal brief') 'diff'
    def gotResults_43(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'vim':
                top_buffer += 'vimdiff'
            elif word == 'normal':
                top_buffer += 'diff'
            elif word == 'normal brief':
                top_buffer += 'diff -q'
            top_buffer += ' \\{,\\}{Left_2}{Del}{Left_3}{Del}{Right}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_43(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 44, '(\'vim\' | \'normal\' | \'normal brief\') \'diff\'', e)
            self.firstWord = -1

    # 'cygwin password'
    def gotResults_44(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '^5%'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_44(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 45, '\'cygwin password\'', e)
            self.firstWord = -1

    # ('sub' | 'SVM') ('checkout' | 'diff' | 'commit' | 'update' | 'remove' | 'checkout bug' | 'log' | 'start bug' | 'status')
    def gotResults_45(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'sub':
                top_buffer += 'sub'
            elif word == 'SVM':
                top_buffer += 'svn'
            top_buffer += ' '
            word = fullResults[1 + self.firstWord][0]
            if word == 'checkout':
                top_buffer += 'checkout'
            elif word == 'diff':
                top_buffer += 'diff'
            elif word == 'commit':
                top_buffer += 'commit'
            elif word == 'update':
                top_buffer += 'update'
            elif word == 'remove':
                top_buffer += 'remove'
            elif word == 'checkout bug':
                top_buffer += 'co'
                top_buffer += '-b'
            elif word == 'log':
                top_buffer += 'log_grep'
            elif word == 'start bug':
                top_buffer += 'start_bug'
            elif word == 'status':
                top_buffer += 'status'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_45(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 46, '(\'sub\' | \'SVM\') (\'checkout\' | \'diff\' | \'commit\' | \'update\' | \'remove\' | \'checkout bug\' | \'log\' | \'start bug\' | \'status\')', e)
            self.firstWord = -1

    # 'start environment' 1..5
    def gotResults_46(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'source $ENV'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '/bin/activate{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_46(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 47, '\'start environment\' 1..5', e)
            self.firstWord = -1

    # 'stop environment'
    def gotResults_47(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'deactivate{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_47(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 48, '\'stop environment\'', e)
            self.firstWord = -1

    # 'export' ('test' | 'development') 'settings'
    def gotResults_48(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'export DJANGO_SETTINGS_MODULE=settings'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_48(words[3:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 49, '\'export\' (\'test\' | \'development\') \'settings\'', e)
            self.firstWord = -1

    # 'Django' ('shell' | 'database shell' | 'sink' | 'sink input' | 'run' | 'dump')
    def gotResults_49(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'python mymanage.py '
            word = fullResults[1 + self.firstWord][0]
            if word == 'shell':
                top_buffer += 'shell'
            elif word == 'database shell':
                top_buffer += 'dbshell'
            elif word == 'sink':
                top_buffer += 'syncdb'
            elif word == 'sink input':
                top_buffer += 'syncdb < input'
            elif word == 'run':
                top_buffer += 'runserver 127.0.0.1:9090'
            elif word == 'dump':
                top_buffer += 'dumpdata'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_49(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 50, '\'Django\' (\'shell\' | \'database shell\' | \'sink\' | \'sink input\' | \'run\' | \'dump\')', e)
            self.firstWord = -1

    # 'network stats'
    def gotResults_50(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'netstat -tunlp{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_50(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 51, '\'network stats\'', e)
            self.firstWord = -1

    # 'network interfaces'
    def gotResults_51(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ip addr'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_51(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 52, '\'network interfaces\'', e)
            self.firstWord = -1

    # 'make link'
    def gotResults_52(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ln -sn '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_52(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 53, '\'make link\'', e)
            self.firstWord = -1

    # ('recursive' | 'file') 'copy'
    def gotResults_53(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'cp '
            word = fullResults[0 + self.firstWord][0]
            if word == 'recursive':
                top_buffer += '-r'
            elif word == 'file':
                top_buffer += ''
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_53(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 54, '(\'recursive\' | \'file\') \'copy\'', e)
            self.firstWord = -1

    # ('recursive' | 'normal') 'grep'
    def gotResults_54(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'grep '
            word = fullResults[0 + self.firstWord][0]
            if word == 'recursive':
                top_buffer += '-R'
            elif word == 'normal':
                top_buffer += ''
            top_buffer += ' \'\'{left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_54(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 55, '(\'recursive\' | \'normal\') \'grep\'', e)
            self.firstWord = -1

    # ('read' | 'make' | 'track') 'archive'
    def gotResults_55(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'tar '
            word = fullResults[0 + self.firstWord][0]
            if word == 'read':
                top_buffer += 'tf'
            elif word == 'make':
                top_buffer += 'cf'
            elif word == 'track':
                top_buffer += 'xf'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_55(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 56, '(\'read\' | \'make\' | \'track\') \'archive\'', e)
            self.firstWord = -1

    # 'extract tar'
    def gotResults_56(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'tar xf '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_56(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 57, '\'extract tar\'', e)
            self.firstWord = -1

    # 'read file'
    def gotResults_57(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'less '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_57(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 58, '\'read file\'', e)
            self.firstWord = -1

    # 'tail file'
    def gotResults_58(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'tail -f '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_58(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 59, '\'tail file\'', e)
            self.firstWord = -1

    # 'list command history'
    def gotResults_59(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'history{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_59(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 60, '\'list command history\'', e)
            self.firstWord = -1

    # 'execute command'
    def gotResults_60(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += './'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_60(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 61, '\'execute command\'', e)
            self.firstWord = -1

    # 'home root'
    def gotResults_61(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '~/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_61(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 62, '\'home root\'', e)
            self.firstWord = -1

    # 'edit'
    def gotResults_62(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'vim '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_62(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 63, '\'edit\'', e)
            self.firstWord = -1

    # 'as root'
    def gotResults_63(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sudo '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_63(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 64, '\'as root\'', e)
            self.firstWord = -1

    # 'switch to superuser'
    def gotResults_64(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sudo su{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_64(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 65, '\'switch to superuser\'', e)
            self.firstWord = -1

    # 'switch superuser'
    def gotResults_113(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sudo su{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_113(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 65, '\'switch superuser\'', e)
            self.firstWord = -1

    # 'switch to user'
    def gotResults_65(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sudo su - '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_65(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 66, '\'switch to user\'', e)
            self.firstWord = -1

    # 'switch user'
    def gotResults_114(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sudo su - '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_114(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 66, '\'switch user\'', e)
            self.firstWord = -1

    # 'echo command'
    def gotResults_66(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'echo '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_66(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 67, '\'echo command\'', e)
            self.firstWord = -1

    # 'keyac shell' ('superuser')
    def gotResults_67(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'superuser':
                top_buffer += 'su'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_67(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 68, '\'keyac shell\' (\'superuser\')', e)
            self.firstWord = -1

    # 'fix enter key'
    def gotResults_68(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'stty'
            top_buffer += ' '
            top_buffer += 'sane{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_68(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 69, '\'fix enter key\'', e)
            self.firstWord = -1

    # 'initialisation scripts'
    def gotResults_69(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '/etc/init.d/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_69(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 72, '\'initialisation scripts\'', e)
            self.firstWord = -1

    # 'et cetera'
    def gotResults_70(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '/etc/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_70(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 73, '\'et cetera\'', e)
            self.firstWord = -1

    # 'system config'
    def gotResults_71(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '/etc/sysconfig'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_71(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 74, '\'system config\'', e)
            self.firstWord = -1

    # 'my home' ('one' | 'two')
    def gotResults_72(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'one':
                when_value += 'tan'
            elif word == 'two':
                when_value += 'tom'
            if when_value != "":
                top_buffer += '~'
                word = fullResults[1 + self.firstWord][0]
                if word == 'one':
                    top_buffer += 'tan'
                elif word == 'two':
                    top_buffer += 'tom'
                top_buffer += '/'
            else:
                top_buffer += '~tan/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_72(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 75, '\'my home\' (\'one\' | \'two\')', e)
            self.firstWord = -1

    # 'my home'
    def gotResults_115(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '~'
                top_buffer += ''
                top_buffer += '/'
            else:
                top_buffer += '~tan/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_115(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 75, '\'my home\'', e)
            self.firstWord = -1

    # 'log root'
    def gotResults_73(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '/var/log/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_73(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 76, '\'log root\'', e)
            self.firstWord = -1

    # 'use a lip' ('pie')
    def gotResults_74(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '/usr/lib/'
            word = fullResults[1 + self.firstWord][0]
            if word == 'pie':
                top_buffer += 'python'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_74(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 77, '\'use a lip\' (\'pie\')', e)
            self.firstWord = -1

    # 'use a lip'
    def gotResults_116(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '/usr/lib/'
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_116(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 77, '\'use a lip\'', e)
            self.firstWord = -1

    # 'repeat command' 0..9 0..9
    def gotResults_75(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '!'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg4 += self.convert_number_word(word)
            eval_template_arg5 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg5 += self.convert_number_word(word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_75(words[3:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 84, '\'repeat command\' 0..9 0..9', e)
            self.firstWord = -1

    # 'repeat command' 0..9 0..9 0..9
    def gotResults_76(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '!'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg3 += self.convert_number_word(word)
            eval_template_arg4 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg4 += self.convert_number_word(word)
            eval_template_arg5 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg5 += self.convert_number_word(word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
            if len(words) > 4: self.gotResults_76(words[4:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 85, '\'repeat command\' 0..9 0..9 0..9', e)
            self.firstWord = -1

    # 'repeat command' 0..9 0..9 0..9 0..9
    def gotResults_77(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '!'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += self.convert_number_word(word)
            eval_template_arg3 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg3 += self.convert_number_word(word)
            eval_template_arg4 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg4 += self.convert_number_word(word)
            eval_template_arg5 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg5 += self.convert_number_word(word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
            if len(words) > 5: self.gotResults_77(words[5:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 86, '\'repeat command\' 0..9 0..9 0..9 0..9', e)
            self.firstWord = -1

    # 'Journal control'
    def gotResults_78(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'journalctl '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_78(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 92, '\'Journal control\'', e)
            self.firstWord = -1

    # 'firewall command'
    def gotResults_79(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'firewall-cmd '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_79(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 93, '\'firewall command\'', e)
            self.firstWord = -1

    # 'service control'
    def gotResults_80(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'chkconfig '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_80(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 94, '\'service control\'', e)
            self.firstWord = -1

    # 'service control new'
    def gotResults_81(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'systemctl '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_81(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 95, '\'service control new\'', e)
            self.firstWord = -1

    # 'list'
    def gotResults_82(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls -h{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_82(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 109, '\'list\'', e)
            self.firstWord = -1

    # 'list directory'
    def gotResults_83(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls -h '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_83(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 110, '\'list directory\'', e)
            self.firstWord = -1

    # 'long list'
    def gotResults_84(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls -lah '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_84(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 111, '\'long list\'', e)
            self.firstWord = -1

    # 'long list directory'
    def gotResults_85(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls -lah{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_85(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 112, '\'long list directory\'', e)
            self.firstWord = -1

    # 'go to'
    def gotResults_86(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'cd '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_86(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 118, '\'go to\'', e)
            self.firstWord = -1

    # 'switch directory'
    def gotResults_87(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{shift}cd -{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_87(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 119, '\'switch directory\'', e)
            self.firstWord = -1

    # 'back directory'
    def gotResults_88(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{shift}cd ..{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_88(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 120, '\'back directory\'', e)
            self.firstWord = -1

    # ('shell' | 'go') 'back directory' 1..9
    def gotResults_89(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'shell':
                when_value += ''
            elif word == 'go':
                when_value += '{enter}'
            if when_value != "":
                top_buffer += 'cd '
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                word = fullResults[2 + self.firstWord][0]
                limit2 += self.convert_number_word(word)
                for i in range(to_long(limit2)):
                    top_buffer += '../'
            else:
                top_buffer += '../'
            word = fullResults[0 + self.firstWord][0]
            if word == 'shell':
                top_buffer += ''
            elif word == 'go':
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_89(words[3:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 122, '(\'shell\' | \'go\') \'back directory\' 1..9', e)
            self.firstWord = -1

    # ('shell' | 'go') 'back directory'
    def gotResults_117(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'shell':
                when_value += ''
            elif word == 'go':
                when_value += '{enter}'
            if when_value != "":
                top_buffer += 'cd '
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    top_buffer += '../'
            else:
                top_buffer += '../'
            word = fullResults[0 + self.firstWord][0]
            if word == 'shell':
                top_buffer += ''
            elif word == 'go':
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_117(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 122, '(\'shell\' | \'go\') \'back directory\'', e)
            self.firstWord = -1

    # 'make directory'
    def gotResults_90(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'mkdir '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_90(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 123, '\'make directory\'', e)
            self.firstWord = -1

    # 'show disk space'
    def gotResults_91(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'df -h .{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_91(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 125, '\'show disk space\'', e)
            self.firstWord = -1

    def get_usage(self, list_buffer, functional, word):
        if word == 'usage':
            list_buffer += '-h'
        elif word == 'usage kilobytes':
            list_buffer += ''
        elif word == 'usage megabytes':
            list_buffer += '-m'
        return list_buffer

    # 'show disk' <usage>
    def gotResults_92(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'du '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_usage(top_buffer, False, word)
            top_buffer += ' -s -- .{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 129, '\'show disk\' <usage>', e)
            self.firstWord = -1

    # 'W get'
    def gotResults_93(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'wget'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_93(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 132, '\'W get\'', e)
            self.firstWord = -1

    # 'cool'
    def gotResults_94(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'curl'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_94(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 133, '\'cool\'', e)
            self.firstWord = -1

    # 'said shell'
    def gotResults_95(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'zsh'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_95(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 134, '\'said shell\'', e)
            self.firstWord = -1

    # 'postgres sequel'
    def gotResults_96(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'postgresql'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_96(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 135, '\'postgres sequel\'', e)
            self.firstWord = -1

    # 'engine X'
    def gotResults_97(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'nginx'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_97(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 136, '\'engine X\'', e)
            self.firstWord = -1

    # 'packet to dump'
    def gotResults_98(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'tcpdump '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_98(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 141, '\'packet to dump\'', e)
            self.firstWord = -1

    # 'packet dump'
    def gotResults_118(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'tcpdump '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_118(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 141, '\'packet dump\'', e)
            self.firstWord = -1

    # 'secure login to' <machine>
    def gotResults_99(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ssh -X '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_machine(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 148, '\'secure login to\' <machine>', e)
            self.firstWord = -1

    # 'secure login' <machine>
    def gotResults_119(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ssh -X '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_machine(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 148, '\'secure login\' <machine>', e)
            self.firstWord = -1

    # 'remote login'
    def gotResults_100(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ssh '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_100(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 149, '\'remote login\'', e)
            self.firstWord = -1

    # 'S F T P' <machine>
    def gotResults_101(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sftp '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_machine(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 152, '\'S F T P\' <machine>', e)
            self.firstWord = -1

    # 'multiple get'
    def gotResults_102(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'mget '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_102(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 156, '\'multiple get\'', e)
            self.firstWord = -1

    # 'local change directory'
    def gotResults_103(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'lcd '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_103(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 157, '\'local change directory\'', e)
            self.firstWord = -1

    # 'local working directory'
    def gotResults_104(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'lpwd{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_104(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 159, '\'local working directory\'', e)
            self.firstWord = -1

    def get_scp(self, list_buffer, functional, word):
        if word == 'secure copy':
            list_buffer += 'scp'
        elif word == 'secure recursive copy':
            list_buffer += 'scp -r'
        elif word == 'recursive secure copy':
            list_buffer += 'scp -r'
        elif word == 'secure clone':
            list_buffer += 'scp -p -r'
        return list_buffer

    # (('secure copy' | 'secure recursive copy' | 'recursive secure copy' | 'secure clone'))
    def gotResults_105(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'secure copy':
                top_buffer += 'scp'
            elif word == 'secure recursive copy':
                top_buffer += 'scp -r'
            elif word == 'recursive secure copy':
                top_buffer += 'scp -r'
            elif word == 'secure clone':
                top_buffer += 'scp -p -r'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_105(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 170, '((\'secure copy\' | \'secure recursive copy\' | \'recursive secure copy\' | \'secure clone\'))', e)
            self.firstWord = -1

    # 'public key' ('15' | '11' | '12') ('init' | 'tool')
    def gotResults_106(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'pkcs'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '-'
            word = fullResults[2 + self.firstWord][0]
            top_buffer += word
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_106(words[3:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 183, '\'public key\' (\'15\' | \'11\' | \'12\') (\'init\' | \'tool\')', e)
            self.firstWord = -1

    # 'public key' ('15' | '11' | '12')
    def gotResults_120(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'pkcs'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '-'
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_120(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 183, '\'public key\' (\'15\' | \'11\' | \'12\')', e)
            self.firstWord = -1

    # 'skip on'
    def gotResults_107(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+f}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_107(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 190, '\'skip on\'', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None
