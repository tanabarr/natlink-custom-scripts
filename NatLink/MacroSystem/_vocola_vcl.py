# NatLink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.5, Fri Nov 18 18:37:47 2016

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """
        <dgndictation> imported;
        <1> = 'Switch Window' ;
        <2> = 'Copy and Switch' ;
        <3> = 'Copy to' ('NatSpeak' | 'Emacs' | 'Composition' ) ;
        <4> = 'launch bar' ;
        <exe_apps> = ('crome' | 'outlook' | 'putty' | 'pad' | 'virtualbox' | 'video' | 'editor' | 'Spotify' | 'charm' | 'skype' | 'firefox' | 'explorer' ) ;
        <5> = 'go to' <exe_apps> ;
        <6> = 'spotify window' ('space' | 'skip' | 'volume up' | 'volume down' | 'mute sound' ) (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <144> = 'spotify window' ('space' | 'skip' | 'volume up' | 'volume down' | 'mute sound' ) ;
        <7> = 'spotify search' <dgndictation> ;
        <8> = 'chrome page' ('down' | 'up' ) ;
        <9> = 'page with Firefox' ;
        <10> = 'bash last command' ;
        <11> = 'Sonos volume' ('up' | 'down -' ) (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <145> = 'Sonos volume' ('up' | 'down -' ) ;
        <2to20> = (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20) ;
        <12> = 'Launch' <12b> ;
        <12b> = <2to20> ('from bottom' ) ;
        <146> = 'Launch' <2to20> ;
        <13> = 'Launch close' <13b> ;
        <13b> = <2to20> ('from bottom' ) (1 | 2 | 3 | 4 | 5 | 6) 'times' ;
        <148> = 'Launch close' <148b> ;
        <148b> = <2to20> ('from bottom' ) ;
        <147> = 'Launch close' <147b> ;
        <147b> = <2to20> (1 | 2 | 3 | 4 | 5 | 6) 'times' ;
        <149> = 'Launch close' <2to20> ;
        <14> = 'Launch' ('bottom' | 'top' ) ;
        <15> = 'Launch close' ('bottom' | 'top' ) ;
        <area> = ('blue' | 'black' | 'purple' | 'brown' | 'crimson' | 'West' | 'East' | 'North' | 'South' ) ;
        <16> = 'set' <16b> ;
        <16b> = <area> 'area' ;
        <17> = 'reset' <17b> ;
        <17b> = <area> 'area' ;
        <18> = <area> 'area' ;
        <19> = 'Mark list windows' <dgndictation> ;
        <20> = 'Close Prompt' ;
        <21> = 'Context Menu' ;
        <22> = ('Switch' | 'Next' ) 'View' ;
        <23> = ('Switch' | 'Next' ) 'View' <n> ;
        <24> = 'Previous View' ;
        <25> = 'Previous View' <n> ;
        <26> = 'Back Tab' ;
        <27> = 'Back Tab' <n> ;
        <28> = 'Page' ;
        <29> = 'Page' <n> ;
        <30> = 'okay alert' ;
        <31> = ('Expand' | 'Collapse' ) 'That' ;
        <32> = ('hold' | 'release' ) ('shift' | 'control' | 'tab' | 'alternate' ) 'button' ;
        <33> = 'type environment variable' ('home' | 'path' | 'unknown' ) ;
        <34> = 'Short date separator' ;
        <35> = 'show clipboard' ;
        <36> = 'set clipboard to' <dgndictation> ;
        <v> = ('first' | 'second' | 'third' | 'fourth' | 'fifth' ) ;
        <37> = 'clipboard save to' <37b> ;
        <37b> = <v> 'register' ;
        <150> = 'clipboard save' <150b> ;
        <150b> = <v> 'register' ;
        <38> = 'save clipboard to' <38b> ;
        <38b> = <v> 'register' ;
        <151> = 'save clipboard' <151b> ;
        <151b> = <v> 'register' ;
        <39> = 'set' <39b> ;
        <39b> = <v> 'register' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10) ;
        <40> = 'unset' <40b> ;
        <40b> = <v> 'register' ;
        <41> = 'type' <41b> ;
        <41b> = <v> 'register' ;
        <42> = ('Shift' | 'Control' | 'Alt' ) 'Click' ;
        <n> = ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) ;
        <43> = <n> <n> 'Go' ;
        <44> = <n> <n> 'Touch' ;
        <45> = <n> <n> 'Drag' ;
        <upDown> = ('Up' | 'Down' ) ;
        <leftRight> = ('Left' | 'Right' ) ;
        <46> = 'Drag' <n> <upDown> ;
        <47> = 'Drag' <n> <leftRight> ;
        <mouse_range_adjust> = ('20' | '30' | '40' | '50' | '60' | '70' | '80' | '90' ) ;
        <48> = 'Mouse' <upDown> <mouse_range_adjust> ;
        <49> = 'Mouse' <leftRight> <mouse_range_adjust> ;
        <ns> = ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10) ;
        <50> = 'Window move' <direction> ;
        <51> = 'Window move' <direction> <ns> ;
        <52> = 'Window maximise' ('swap' | 'left' | 'right' ) ;
        <direction> = 'Left' | 'Right' | 'Up' | 'Down' ;
        <left_right> = 'Left' | 'Right' ;
        <start_end> = ('Start' | 'End' ) ;
        <compass> = ('North' | 'South' | 'East' | 'West' ) ;
        <53> = 'Kill' ('Char' | '1' | 'One' ) ;
        <54> = 'Kill Back 1' ;
        <152> = 'Kill Back' ;
        <55> = 'Kill' <n> ;
        <56> = 'Kill Back' <n> ;
        <153> = 'Back' <n> ;
        <57> = 'One Word' <left_right> ;
        <154> = 'Word' <left_right> ;
        <58> = <n> 'Words' <left_right> ;
        <59> = 'Kill Word' ;
        <60> = 'Kill' <60b> ;
        <60b> = <n> 'Words' ;
        <61> = 'Kill Back Word' ;
        <62> = 'Kill Back' <62b> ;
        <62b> = <n> 'Words' ;
        <63> = 'Line' <start_end> ;
        <64> = 'Line Here' ;
        <65> = 'Copy Line' ;
        <66> = 'Kill Line' ;
        <67> = 'Kill Back Line' ;
        <68> = 'Kill' <68b> ;
        <68b> = <n> 'Lines' ;
        <69> = 'Kill Back' <69b> ;
        <69b> = <n> 'Lines' ;
        <70> = 'Kill Here' ;
        <71> = 'Kill Back Here' ;
        <72> = 'Duplicate Line' ;
        <73> = 'Graph Start' ;
        <74> = 'Graph End' ;
        <75> = ('Paragraph' | 'Graph' ) 'Here' ;
        <76> = 'Open' ('Graph' | 'Line' ) ;
        <77> = 'Copy Graph' ;
        <78> = 'Kill Graph' ;
        <79> = 'Duplicate Graph' ;
        <80> = 'Flow Start' ;
        <81> = 'Flow End' ;
        <82> = 'All' ;
        <83> = 'Copy All' ;
        <84> = ('Cut' | 'Kill' ) 'All' ;
        <85> = 'Kill Flow Here' ;
        <86> = 'Kill Back Flow Here' ;
        <87> = 'Replace All' ;
        <88> = 'Kill That' ;
        <89> = 'Yank That' ;
        <90> = 'Paste Here' ;
        <91> = 'Duplicate That' ;
        <92> = 'Keep That' ;
        <93> = 'Select' <compass> ;
        <94> = 'undo that' <n> ;
        <key> = ('alpha' | 'bravo' | 'charlie' | 'delta' | 'echo' | 'foxtrot' | 'golf' | 'hotel' | 'india' | 'juliett' | 'kilo' | 'lima' | 'mike' | 'november' | 'oscar' | 'papa' | 'quebec' | 'romeo' | 'sierra' | 'tango' | 'uniform' | 'victor' | 'whiskey' | 'xray' | 'yankee' | 'zulu' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '`' | '~' | '-' | '_' | '=' | '+' | '\\' | '|' | '[' | '{' | ']' | '}' | ';' | ':' | "'" | '"' | ',' | '<' | '.' | '>' | '/' | '?' | 'Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'Escape' | 'Home' | 'End' ) ;
        <95> = 'Press' <key> ;
        <96> = 'Space Bar' ;
        <97> = 'Tab Key' ;
        <special> = ('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ;
        <mod> = 'Shift' | 'control-key' | 'Alt' ;
        <nn> = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50) ;
        <98> = 'Press' <special> <nn> ;
        <155> = (('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ) <nn> ;
        <99> = 'Press' <mod> <key> <nn> ;
        <156> = ('Shift' | 'control-key' | 'Alt' ) <key> <nn> ;
        <100> = 'Press' <mod> <mod> <key> <nn> ;
        <157> = ('Shift' | 'control-key' | 'Alt' ) <mod> <key> <nn> ;
        <101> = 'Press' <mod> <mod> <mod> <key> <nn> ;
        <158> = ('Shift' | 'control-key' | 'Alt' ) <mod> <mod> <key> <nn> ;
        <102> = ('quick start bar' | 'notification tray' ) ;
        <lr> = ('left' | 'right' ) ;
        <103> = 'icon 1' (1 | 2 | 3 | 4) <lr> ;
        <104> = 'icon' (2 | 3 | 4 | 5 | 6) (1 | 2 | 3 | 4) <lr> ;
        <105> = 'open computer' ;
        <106> = 'search' ('programs' | 'files' | 'computer' ) ;
        <107> = 'open main menu' ;
        <108> = 'show all windows' ;
        <109> = 'network control' ;
        <110> = 'Volume control' ;
        <111> = 'volume' ('up' | 'down' ) ('10' | '20' | '30' | '40' | '50' ) ;
        <112> = 'brightness control' ;
        <113> = 'brightness' ('up' | 'down' ) ('10' | '20' | '30' | '40' | '50' ) ;
        <114> = 'Sound panel' ;
        <115> = 'display' ('settings' | 'panel' ) ;
        <116> = 'Network panel' ;
        <117> = 'hypertext' ;
        <118> = 'secure hypertext' ;
        <119> = ('bite code' | 'python' | 'Shell' | 'text' | 'tar' | 'jason' ) 'extension' ;
        <120> = 'Keyac' ('space' | 'backspace' | 'page up' | 'page down' | 'control' | 'alt' | 'shift' | 'del' | 'source' | 'escape' | 'pie' | 'red package' | 'config' ) ;
        <key_short> = ('pie' | 'upper pie' | 'Hydra' | 'Corrie' | 'chrome' ) ;
        <121> = 'keyboard' <key_short> ;
        <122> = ('vim' | 'bash' ) 'config' ;
        <123> = 'insert signature' ;
        <124> = 'double right arrow' ;
        <125> = 'triple quote' ;
        <126> = 'python interpreter' ;
        <127> = 'root user' ;
        <128> = 'default prefix' ;
        <129> = ('BEGIN' | 'END' ) 'separator' ;
        <130> = 'firefox advanced settings' ;
        <131> = 'Intel' ('proxy' | 'proxy Web port' | 'host' | 'manager' | 'proxy port' ) ;
        <132> = 'Intel pay portal ID' ;
        <133> = 'Jenkins address' ;
        <134> = 'get it address' ;
        <135> = 'jira address' ;
        <136> = ('import' | 'insert' ) 'Pie' ('develop' | 'debug' ) ;
        <137> = 'import debug' ;
        <138> = 'chrome password' ;
        <139> = 'cluster' ;
        <140> = 'cluster domain' ;
        <141> = 'windows mount command' ;
        <142> = ('upper' ) 'she said' ;
        <159> = 'she said' ;
        <143> = 'dongle number' ;
        <any> = <1>|<2>|<3>|<4>|<5>|<6>|<144>|<7>|<8>|<9>|<10>|<11>|<145>|<12>|<146>|<13>|<148>|<147>|<149>|<14>|<15>|<16>|<17>|<18>|<19>|<20>|<21>|<22>|<23>|<24>|<25>|<26>|<27>|<28>|<29>|<30>|<31>|<32>|<33>|<34>|<35>|<36>|<37>|<150>|<38>|<151>|<39>|<40>|<41>|<42>|<43>|<44>|<45>|<46>|<47>|<48>|<49>|<50>|<51>|<52>|<53>|<54>|<152>|<55>|<56>|<153>|<57>|<154>|<58>|<59>|<60>|<61>|<62>|<63>|<64>|<65>|<66>|<67>|<68>|<69>|<70>|<71>|<72>|<73>|<74>|<75>|<76>|<77>|<78>|<79>|<80>|<81>|<82>|<83>|<84>|<85>|<86>|<87>|<88>|<89>|<90>|<91>|<92>|<93>|<94>|<95>|<96>|<97>|<98>|<155>|<99>|<156>|<100>|<157>|<101>|<158>|<102>|<103>|<104>|<105>|<106>|<107>|<108>|<109>|<110>|<111>|<112>|<113>|<114>|<115>|<116>|<117>|<118>|<119>|<120>|<121>|<122>|<123>|<124>|<125>|<126>|<127>|<128>|<129>|<130>|<131>|<132>|<133>|<134>|<135>|<136>|<137>|<138>|<139>|<140>|<141>|<142>|<159>|<143>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.ruleSet1 = ['sequence']

    def gotBegin(self,moduleInfo):
        window = moduleInfo[2]
        self.firstWord = 0
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        self.deactivateAll()
        title = string.lower(moduleInfo[1])
        if string.find(title,'') >= 0:
            for rule in self.ruleSet1:
                self.activate(rule)

    def convert_number_word(self, word):
        if   word == '0':
            return '0'
        else:
            return word

    # 'Switch Window'
    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Alt+Tab}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_1(words[1:], fullResults)
        except Exception, e:
            handle_error('window_switching.vch', 4, '\'Switch Window\'', e)
            self.firstWord = -1

    # 'Copy and Switch'
    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Alt+Tab}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_2(words[1:], fullResults)
        except Exception, e:
            handle_error('window_switching.vch', 5, '\'Copy and Switch\'', e)
            self.firstWord = -1

    # 'Copy to' ('NatSpeak' | 'Emacs' | 'Composition')
    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'switch'
            dragon_arg2 = ''
            dragon_arg2 += 'to'
            dragon_arg3 = ''
            word = fullResults[1 + self.firstWord][0]
            dragon_arg3 += word
            saved_firstWord = self.firstWord
            call_Dragon('HeardWord', 'ssssssss', [dragon_arg1, dragon_arg2, dragon_arg3])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_3(words[2:], fullResults)
        except Exception, e:
            handle_error('window_switching.vch', 6, '\'Copy to\' (\'NatSpeak\' | \'Emacs\' | \'Composition\')', e)
            self.firstWord = -1

    # 'launch bar'
    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_4(words[1:], fullResults)
        except Exception, e:
            handle_error('window_switching.vch', 13, '\'launch bar\'', e)
            self.firstWord = -1

    def get_exe_apps(self, list_buffer, functional, word):
        if word == 'crome':
            list_buffer += 'chrome.exe'
        elif word == 'outlook':
            list_buffer += 'outlook.exe'
        elif word == 'putty':
            list_buffer += 'putty.exe'
        elif word == 'pad':
            list_buffer += 'win32pad.exe'
        elif word == 'virtualbox':
            list_buffer += 'virtualbox.exe'
        elif word == 'video':
            list_buffer += 'vlc.exe'
        elif word == 'editor':
            list_buffer += 'gvim.exe'
        elif word == 'Spotify':
            list_buffer += 'Spotify.exe'
        elif word == 'charm':
            list_buffer += 'pycharm.exe'
        elif word == 'skype':
            list_buffer += 'Skype.exe'
        elif word == 'firefox':
            list_buffer += 'firefox.exe'
        elif word == 'explorer':
            list_buffer += 'explorer.exe'
        return list_buffer

    # 'go to' <exe_apps>
    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer += '{alt+space}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '50'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'n'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'app>'
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_exe_apps(extension_arg1, True, word)
            import vocola_ext_window_switching
            vocola_ext_window_switching.window_go(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('window_switching.vch', 37, '\'go to\' <exe_apps>', e)
            self.firstWord = -1

    # 'spotify window' ('space' | 'skip' | 'volume up' | 'volume down' | 'mute sound') 1..9
    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':old'
            extension_arg2 = ''
            import vocola_ext_window_switching
            extension_arg2 += str(vocola_ext_window_switching.window_ID())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer += '{alt+space}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '50'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'n'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'app>Spotify.exe'
            import vocola_ext_window_switching
            vocola_ext_window_switching.window_go(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                word = fullResults[2 + self.firstWord][0]
                limit2 += self.convert_number_word(word)
                for i in range(to_long(limit2)):
                    word = fullResults[1 + self.firstWord][0]
                    if word == 'space':
                        top_buffer += '{space}'
                    elif word == 'skip':
                        top_buffer += '{ctrl+right}'
                    elif word == 'volume up':
                        top_buffer += '{ctrl+up}'
                    elif word == 'volume down':
                        top_buffer += '{ctrl+down}'
                    elif word == 'mute sound':
                        limit3 = ''
                        limit3 += '10'
                        for i in range(to_long(limit3)):
                            top_buffer += '{ctrl+down}'
            else:
                word = fullResults[1 + self.firstWord][0]
                if word == 'space':
                    top_buffer += '{space}'
                elif word == 'skip':
                    top_buffer += '{ctrl+right}'
                elif word == 'volume up':
                    top_buffer += '{ctrl+up}'
                elif word == 'volume down':
                    top_buffer += '{ctrl+down}'
                elif word == 'mute sound':
                    limit2 = ''
                    limit2 += '10'
                    for i in range(to_long(limit2)):
                        top_buffer += '{ctrl+down}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{alt+space}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'n'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'ID>'
            extension2_arg1 = ''
            extension2_arg1 += ':old'
            import vocola_ext_variables
            extension_arg1 += str(vocola_ext_variables.variable_get(extension2_arg1))
            import vocola_ext_window_switching
            vocola_ext_window_switching.window_go(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_6(words[3:], fullResults)
        except Exception, e:
            handle_error('window_switching.vch', 58, '\'spotify window\' (\'space\' | \'skip\' | \'volume up\' | \'volume down\' | \'mute sound\') 1..9', e)
            self.firstWord = -1

    # 'spotify window' ('space' | 'skip' | 'volume up' | 'volume down' | 'mute sound')
    def gotResults_144(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':old'
            extension_arg2 = ''
            import vocola_ext_window_switching
            extension_arg2 += str(vocola_ext_window_switching.window_ID())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer += '{alt+space}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '50'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'n'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'app>Spotify.exe'
            import vocola_ext_window_switching
            vocola_ext_window_switching.window_go(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    word = fullResults[1 + self.firstWord][0]
                    if word == 'space':
                        top_buffer += '{space}'
                    elif word == 'skip':
                        top_buffer += '{ctrl+right}'
                    elif word == 'volume up':
                        top_buffer += '{ctrl+up}'
                    elif word == 'volume down':
                        top_buffer += '{ctrl+down}'
                    elif word == 'mute sound':
                        limit3 = ''
                        limit3 += '10'
                        for i in range(to_long(limit3)):
                            top_buffer += '{ctrl+down}'
            else:
                word = fullResults[1 + self.firstWord][0]
                if word == 'space':
                    top_buffer += '{space}'
                elif word == 'skip':
                    top_buffer += '{ctrl+right}'
                elif word == 'volume up':
                    top_buffer += '{ctrl+up}'
                elif word == 'volume down':
                    top_buffer += '{ctrl+down}'
                elif word == 'mute sound':
                    limit2 = ''
                    limit2 += '10'
                    for i in range(to_long(limit2)):
                        top_buffer += '{ctrl+down}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{alt+space}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'n'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'ID>'
            extension2_arg1 = ''
            extension2_arg1 += ':old'
            import vocola_ext_variables
            extension_arg1 += str(vocola_ext_variables.variable_get(extension2_arg1))
            import vocola_ext_window_switching
            vocola_ext_window_switching.window_go(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_144(words[2:], fullResults)
        except Exception, e:
            handle_error('window_switching.vch', 58, '\'spotify window\' (\'space\' | \'skip\' | \'volume up\' | \'volume down\' | \'mute sound\')', e)
            self.firstWord = -1

    # 'spotify search' <_anything>
    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer += '{alt+space}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '50'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'n'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'app>Spotify.exe'
            import vocola_ext_window_switching
            vocola_ext_window_switching.window_go(extension_arg1)
            top_buffer += '{ctrl+l}'
            top_buffer += '{ctrl+a}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('window_switching.vch', 61, '\'spotify search\' <_anything>', e)
            self.firstWord = -1

    # 'chrome page' ('down' | 'up')
    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':old'
            extension_arg2 = ''
            import vocola_ext_window_switching
            extension_arg2 += str(vocola_ext_window_switching.window_ID())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer += '{alt+space}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '50'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'n'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'app>chrome.exe'
            import vocola_ext_window_switching
            vocola_ext_window_switching.window_go(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{pg'
            word = fullResults[1 + self.firstWord][0]
            if word == 'down':
                top_buffer += 'dn'
            elif word == 'up':
                top_buffer += 'up'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer += '{alt+space}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '50'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'n'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'ID>'
            extension2_arg1 = ''
            extension2_arg1 += ':old'
            import vocola_ext_variables
            extension_arg1 += str(vocola_ext_variables.variable_get(extension2_arg1))
            import vocola_ext_window_switching
            vocola_ext_window_switching.window_go(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_8(words[2:], fullResults)
        except Exception, e:
            handle_error('window_switching.vch', 67, '\'chrome page\' (\'down\' | \'up\')', e)
            self.firstWord = -1

    # 'page with Firefox'
    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer += '{alt+space}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '50'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'n'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'app>firefox.exe'
            import vocola_ext_window_switching
            vocola_ext_window_switching.window_go(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+t}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+v}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_9(words[1:], fullResults)
        except Exception, e:
            handle_error('window_switching.vch', 72, '\'page with Firefox\'', e)
            self.firstWord = -1

    # 'bash last command'
    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':old'
            extension_arg2 = ''
            import vocola_ext_window_switching
            extension_arg2 += str(vocola_ext_window_switching.window_ID())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer += '{alt+space}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '50'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'n'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'app>putty.exe'
            import vocola_ext_window_switching
            vocola_ext_window_switching.window_go(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{up}{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer += '{alt+space}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '50'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'n'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'ID>'
            extension2_arg1 = ''
            extension2_arg1 += ':old'
            import vocola_ext_variables
            extension_arg1 += str(vocola_ext_variables.variable_get(extension2_arg1))
            import vocola_ext_window_switching
            vocola_ext_window_switching.window_go(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_10(words[1:], fullResults)
        except Exception, e:
            handle_error('window_switching.vch', 78, '\'bash last command\'', e)
            self.firstWord = -1

    # 'Sonos volume' ('up' | 'down -') 1..9
    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':old'
            extension_arg2 = ''
            import vocola_ext_window_switching
            extension_arg2 += str(vocola_ext_window_switching.window_ID())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'app>Sonos.exe'
            import vocola_ext_window_switching
            vocola_ext_window_switching.window_go(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            limit = ''
            word = fullResults[2 + self.firstWord][0]
            limit += self.convert_number_word(word)
            for i in range(to_long(limit)):
                top_buffer += '{ctrl+'
                word = fullResults[1 + self.firstWord][0]
                if word == 'up':
                    top_buffer += '+'
                elif word == 'down -':
                    top_buffer += 'down -'
                top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{alt+space}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'n'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'ID>'
            extension2_arg1 = ''
            extension2_arg1 += ':old'
            import vocola_ext_variables
            extension_arg1 += str(vocola_ext_variables.variable_get(extension2_arg1))
            import vocola_ext_window_switching
            vocola_ext_window_switching.window_go(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_11(words[3:], fullResults)
        except Exception, e:
            handle_error('window_switching.vch', 84, '\'Sonos volume\' (\'up\' | \'down -\') 1..9', e)
            self.firstWord = -1

    # 'Sonos volume' ('up' | 'down -')
    def gotResults_145(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':old'
            extension_arg2 = ''
            import vocola_ext_window_switching
            extension_arg2 += str(vocola_ext_window_switching.window_ID())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'app>Sonos.exe'
            import vocola_ext_window_switching
            vocola_ext_window_switching.window_go(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            limit = ''
            limit += ''
            for i in range(to_long(limit)):
                top_buffer += '{ctrl+'
                word = fullResults[1 + self.firstWord][0]
                if word == 'up':
                    top_buffer += '+'
                elif word == 'down -':
                    top_buffer += 'down -'
                top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{alt+space}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'n'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += 'ID>'
            extension2_arg1 = ''
            extension2_arg1 += ':old'
            import vocola_ext_variables
            extension_arg1 += str(vocola_ext_variables.variable_get(extension2_arg1))
            import vocola_ext_window_switching
            vocola_ext_window_switching.window_go(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_145(words[2:], fullResults)
        except Exception, e:
            handle_error('window_switching.vch', 84, '\'Sonos volume\' (\'up\' | \'down -\')', e)
            self.firstWord = -1

    def get_2to20(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Launch' <2to20> ('from bottom')
    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += word
            if when_value != "":
                limit2 = ''
                word = fullResults[1 + self.firstWord][0]
                limit2 = self.get_2to20(limit2, True, word)
                for i in range(to_long(limit2)):
                    top_buffer += '{Up}'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '100'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
            else:
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                word = fullResults[1 + self.firstWord][0]
                eval_template3_arg2 = self.get_2to20(eval_template3_arg2, True, word)
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Down}'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '50'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('window_switching.vch', 107, '\'Launch\' <2to20> (\'from bottom\')', e)
            self.firstWord = -1

    # 'Launch' <2to20>
    def gotResults_146(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                word = fullResults[1 + self.firstWord][0]
                limit2 = self.get_2to20(limit2, True, word)
                for i in range(to_long(limit2)):
                    top_buffer += '{Up}'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '100'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
            else:
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                word = fullResults[1 + self.firstWord][0]
                eval_template3_arg2 = self.get_2to20(eval_template3_arg2, True, word)
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Down}'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '50'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('window_switching.vch', 107, '\'Launch\' <2to20>', e)
            self.firstWord = -1

    # 'Launch close' <2to20> ('from bottom') 1..6 'times'
    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += word
            if when_value != "":
                limit2 = ''
                word = fullResults[1 + self.firstWord][0]
                limit2 = self.get_2to20(limit2, True, word)
                for i in range(to_long(limit2)):
                    top_buffer += '{Up}'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '100'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
            else:
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                word = fullResults[1 + self.firstWord][0]
                eval_template3_arg2 = self.get_2to20(eval_template3_arg2, True, word)
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Down}'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '50'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
            when_value = ''
            word = fullResults[3 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                word = fullResults[3 + self.firstWord][0]
                limit2 += self.convert_number_word(word)
                for i in range(to_long(limit2)):
                    top_buffer += '{alt+f4}'
            else:
                top_buffer += '{enter}{alt+f4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('window_switching.vch', 108, '\'Launch close\' <2to20> (\'from bottom\') 1..6 \'times\'', e)
            self.firstWord = -1

    # 'Launch close' <2to20> ('from bottom')
    def gotResults_148(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += word
            if when_value != "":
                limit2 = ''
                word = fullResults[1 + self.firstWord][0]
                limit2 = self.get_2to20(limit2, True, word)
                for i in range(to_long(limit2)):
                    top_buffer += '{Up}'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '100'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
            else:
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                word = fullResults[1 + self.firstWord][0]
                eval_template3_arg2 = self.get_2to20(eval_template3_arg2, True, word)
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Down}'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '50'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    top_buffer += '{alt+f4}'
            else:
                top_buffer += '{enter}{alt+f4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('window_switching.vch', 108, '\'Launch close\' <2to20> (\'from bottom\')', e)
            self.firstWord = -1

    # 'Launch close' <2to20> 1..6 'times'
    def gotResults_147(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                word = fullResults[1 + self.firstWord][0]
                limit2 = self.get_2to20(limit2, True, word)
                for i in range(to_long(limit2)):
                    top_buffer += '{Up}'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '100'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
            else:
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                word = fullResults[1 + self.firstWord][0]
                eval_template3_arg2 = self.get_2to20(eval_template3_arg2, True, word)
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Down}'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '50'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                word = fullResults[2 + self.firstWord][0]
                limit2 += self.convert_number_word(word)
                for i in range(to_long(limit2)):
                    top_buffer += '{alt+f4}'
            else:
                top_buffer += '{enter}{alt+f4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('window_switching.vch', 108, '\'Launch close\' <2to20> 1..6 \'times\'', e)
            self.firstWord = -1

    # 'Launch close' <2to20>
    def gotResults_149(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                word = fullResults[1 + self.firstWord][0]
                limit2 = self.get_2to20(limit2, True, word)
                for i in range(to_long(limit2)):
                    top_buffer += '{Up}'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '100'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
            else:
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                word = fullResults[1 + self.firstWord][0]
                eval_template3_arg2 = self.get_2to20(eval_template3_arg2, True, word)
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Down}'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '50'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    top_buffer += '{alt+f4}'
            else:
                top_buffer += '{enter}{alt+f4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('window_switching.vch', 108, '\'Launch close\' <2to20>', e)
            self.firstWord = -1

    # 'Launch' ('bottom' | 'top')
    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            if word == 'bottom':
                top_buffer += '{up}'
            elif word == 'top':
                top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_14(words[2:], fullResults)
        except Exception, e:
            handle_error('window_switching.vch', 109, '\'Launch\' (\'bottom\' | \'top\')', e)
            self.firstWord = -1

    # 'Launch close' ('bottom' | 'top')
    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            if word == 'bottom':
                top_buffer += '{up}'
            elif word == 'top':
                top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{alt+f4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_15(words[2:], fullResults)
        except Exception, e:
            handle_error('window_switching.vch', 110, '\'Launch close\' (\'bottom\' | \'top\')', e)
            self.firstWord = -1

    def get_area(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    # 'set' <area> 'area'
    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_area(extension_arg1, True, word)
            extension_arg1 += '_area_title'
            extension_arg2 = ''
            extension_arg2 += 'ID>'
            import vocola_ext_window_switching
            extension_arg2 += str(vocola_ext_window_switching.window_ID())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('window_switching.vch', 135, '\'set\' <area> \'area\'', e)
            self.firstWord = -1

    # 'reset' <area> 'area'
    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_area(extension_arg1, True, word)
            extension_arg1 += '_area_title'
            import vocola_ext_variables
            vocola_ext_variables.variable_unset(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('window_switching.vch', 136, '\'reset\' <area> \'area\'', e)
            self.firstWord = -1

    # <area> 'area'
    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+t}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer += '{alt+space}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '50'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'n'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension2_arg1 = ''
            word = fullResults[0 + self.firstWord][0]
            extension2_arg1 = self.get_area(extension2_arg1, True, word)
            extension2_arg1 += '_area_title'
            extension2_arg2 = ''
            word = fullResults[0 + self.firstWord][0]
            extension2_arg2 = self.get_area(extension2_arg2, True, word)
            extension2_arg2 += ' window not set yet'
            import vocola_ext_variables
            extension_arg1 += str(vocola_ext_variables.variable_get(extension2_arg1, extension2_arg2))
            import vocola_ext_window_switching
            vocola_ext_window_switching.window_go(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('window_switching.vch', 138, '<area> \'area\'', e)
            self.firstWord = -1

    # 'Mark list windows' <_anything>
    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += word
            if when_value != "":
                top_buffer = do_flush(False, top_buffer);
                extension2_arg1 = ''
                word = fullResults[1 + self.firstWord][0]
                extension2_arg1 += word
                import vocola_ext_window_switching
                vocola_ext_window_switching.list_windows(extension2_arg1)
            else:
                top_buffer = do_flush(False, top_buffer);
                import vocola_ext_window_switching
                vocola_ext_window_switching.list_windows()
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('window_switching.vch', 161, '\'Mark list windows\' <_anything>', e)
            self.firstWord = -1

    # 'Close Prompt'
    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+Space}c'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_20(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 11, '\'Close Prompt\'', e)
            self.firstWord = -1

    # 'Context Menu'
    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{shift+f10}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_21(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 12, '\'Context Menu\'', e)
            self.firstWord = -1

    # ('Switch' | 'Next') 'View'
    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_22(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 17, '(\'Switch\' | \'Next\') \'View\'', e)
            self.firstWord = -1

    # ('Switch' | 'Next') 'View' <n>
    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Tab_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 18, '(\'Switch\' | \'Next\') \'View\' <n>', e)
            self.firstWord = -1

    # 'Previous View'
    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_24(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 19, '\'Previous View\'', e)
            self.firstWord = -1

    # 'Previous View' <n>
    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Tab_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 20, '\'Previous View\' <n>', e)
            self.firstWord = -1

    # 'Back Tab'
    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+Tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_26(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 22, '\'Back Tab\'', e)
            self.firstWord = -1

    # 'Back Tab' <n>
    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+Tab_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 23, '\'Back Tab\' <n>', e)
            self.firstWord = -1

    # 'Page'
    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{PgDn}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_28(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 24, '\'Page\'', e)
            self.firstWord = -1

    # 'Page' <n>
    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{PgDn_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 25, '\'Page\' <n>', e)
            self.firstWord = -1

    # 'okay alert'
    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{tab}{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_30(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 29, '\'okay alert\'', e)
            self.firstWord = -1

    # ('Expand' | 'Collapse') 'That'
    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'Expand':
                dragon_arg1 += '{Alt+ExtDown}'
            elif word == 'Collapse':
                dragon_arg1 += '{Alt+ExtUp}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_31(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 32, '(\'Expand\' | \'Collapse\') \'That\'', e)
            self.firstWord = -1

    # ('hold' | 'release') ('shift' | 'control' | 'tab' | 'alternate') 'button'
    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{'
            word = fullResults[1 + self.firstWord][0]
            if word == 'shift':
                extension_arg1 += 'shift'
            elif word == 'control':
                extension_arg1 += 'ctrl'
            elif word == 'tab':
                extension_arg1 += 'tab'
            elif word == 'alternate':
                extension_arg1 += 'alt'
            extension_arg1 += '_'
            word = fullResults[0 + self.firstWord][0]
            extension_arg1 += word
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_32(words[3:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 38, '(\'hold\' | \'release\') (\'shift\' | \'control\' | \'tab\' | \'alternate\') \'button\'', e)
            self.firstWord = -1

    # 'type environment variable' ('home' | 'path' | 'unknown')
    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            extension_arg1 = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'home':
                extension_arg1 += 'HOME'
            elif word == 'path':
                extension_arg1 += 'PATH'
            elif word == 'unknown':
                extension_arg1 += 'unknown'
            extension_arg2 = ''
            extension_arg2 += 'UNKNOWN'
            import vocola_ext_environment
            top_buffer += str(vocola_ext_environment.get(extension_arg1, extension_arg2))
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_33(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 40, '\'type environment variable\' (\'home\' | \'path\' | \'unknown\')', e)
            self.firstWord = -1

    # 'Short date separator'
    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '----{enter}'
            extension_arg1 = ''
            extension_arg1 += '%d/%m/%y'
            import vocola_ext_date
            top_buffer += str(vocola_ext_date.now(extension_arg1))
            top_buffer += '{enter}{enter}{enter}{up}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_34(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 42, '\'Short date separator\'', e)
            self.firstWord = -1

    # 'show clipboard'
    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '"'
            import vocola_ext_clipboard
            dragon_arg1 += str(vocola_ext_clipboard.clipboard_get())
            dragon_arg1 += '"'
            dragon_arg2 = ''
            dragon_arg2 += '64'
            dragon_arg3 = ''
            dragon_arg3 += 'Current contents of clipboard'
            saved_firstWord = self.firstWord
            call_Dragon('MsgBoxConfirm', 'sis', [dragon_arg1, dragon_arg2, dragon_arg3])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_35(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 45, '\'show clipboard\'', e)
            self.firstWord = -1

    # 'set clipboard to' <_anything>
    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 += word
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_set(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 46, '\'set clipboard to\' <_anything>', e)
            self.firstWord = -1

    def get_v(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    # 'clipboard save to' <v> 'register'
    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_v(extension_arg1, True, word)
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 49, '\'clipboard save to\' <v> \'register\'', e)
            self.firstWord = -1

    # 'clipboard save' <v> 'register'
    def gotResults_150(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_v(extension_arg1, True, word)
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 49, '\'clipboard save\' <v> \'register\'', e)
            self.firstWord = -1

    # 'save clipboard to' <v> 'register'
    def gotResults_38(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_v(extension_arg1, True, word)
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 50, '\'save clipboard to\' <v> \'register\'', e)
            self.firstWord = -1

    # 'save clipboard' <v> 'register'
    def gotResults_151(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_v(extension_arg1, True, word)
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 50, '\'save clipboard\' <v> \'register\'', e)
            self.firstWord = -1

    # 'set' <v> 'register' 1..10
    def gotResults_39(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_v(extension_arg1, True, word)
            extension_arg2 = ''
            word = fullResults[3 + self.firstWord][0]
            extension_arg2 += self.convert_number_word(word)
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('_vocola.vcl', 51, '\'set\' <v> \'register\' 1..10', e)
            self.firstWord = -1

    # 'unset' <v> 'register'
    def gotResults_40(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_v(extension_arg1, True, word)
            import vocola_ext_variables
            vocola_ext_variables.variable_unset(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 52, '\'unset\' <v> \'register\'', e)
            self.firstWord = -1

    # 'type' <v> 'register'
    def gotResults_41(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            extension_arg1 = ''
            word = fullResults[1 + self.firstWord][0]
            extension_arg1 = self.get_v(extension_arg1, True, word)
            extension_arg2 = ''
            extension_arg2 += 'UNDEFINED'
            import vocola_ext_variables
            top_buffer += str(vocola_ext_variables.variable_get(extension_arg1, extension_arg2))
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 53, '\'type\' <v> \'register\'', e)
            self.firstWord = -1

    # ('Shift' | 'Control' | 'Alt') 'Click'
    def gotResults_42(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                dragon_arg1 += '1'
            elif word == 'Control':
                dragon_arg1 += '2'
            elif word == 'Alt':
                dragon_arg1 += '3'
            saved_firstWord = self.firstWord
            call_Dragon('ShiftKey', 'ii', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            saved_firstWord = self.firstWord
            call_Dragon('ButtonClick', 'ii', [])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_42(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 74, '(\'Shift\' | \'Control\' | \'Alt\') \'Click\'', e)
            self.firstWord = -1

    def get_n(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # <n> <n> 'Go'
    def gotResults_43(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '0'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template2_arg2 = self.get_n(eval_template2_arg2, True, word)
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            word = fullResults[0 + self.firstWord][0]
            eval_template2_arg2 = self.get_n(eval_template2_arg2, True, word)
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            saved_firstWord = self.firstWord
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 82, '<n> <n> \'Go\'', e)
            self.firstWord = -1

    # <n> <n> 'Touch'
    def gotResults_44(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '0'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template2_arg2 = self.get_n(eval_template2_arg2, True, word)
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            word = fullResults[0 + self.firstWord][0]
            eval_template2_arg2 = self.get_n(eval_template2_arg2, True, word)
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            saved_firstWord = self.firstWord
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            saved_firstWord = self.firstWord
            call_Dragon('ButtonClick', 'ii', [])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 83, '<n> <n> \'Touch\'', e)
            self.firstWord = -1

    # <n> <n> 'Drag'
    def gotResults_45(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            saved_firstWord = self.firstWord
            call_Dragon('RememberPoint', '', [])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '0'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template2_arg2 = self.get_n(eval_template2_arg2, True, word)
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            word = fullResults[0 + self.firstWord][0]
            eval_template2_arg2 = self.get_n(eval_template2_arg2, True, word)
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            saved_firstWord = self.firstWord
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            saved_firstWord = self.firstWord
            call_Dragon('DragToPoint', 'i', [])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 84, '<n> <n> \'Drag\'', e)
            self.firstWord = -1

    def get_upDown(self, list_buffer, functional, word):
        if word == 'Up':
            list_buffer += '-'
        elif word == 'Down':
            list_buffer += ''
        return list_buffer

    def get_leftRight(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += '-'
        elif word == 'Right':
            list_buffer += ''
        return list_buffer

    # 'Drag' <n> <upDown>
    def gotResults_46(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            saved_firstWord = self.firstWord
            call_Dragon('RememberPoint', '', [])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '0'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template2_arg2 = self.get_upDown(eval_template2_arg2, True, word)
            word = fullResults[1 + self.firstWord][0]
            eval_template2_arg2 = self.get_n(eval_template2_arg2, True, word)
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            saved_firstWord = self.firstWord
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            saved_firstWord = self.firstWord
            call_Dragon('DragToPoint', 'i', [])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 90, '\'Drag\' <n> <upDown>', e)
            self.firstWord = -1

    # 'Drag' <n> <leftRight>
    def gotResults_47(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            saved_firstWord = self.firstWord
            call_Dragon('RememberPoint', '', [])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template2_arg2 = self.get_leftRight(eval_template2_arg2, True, word)
            word = fullResults[1 + self.firstWord][0]
            eval_template2_arg2 = self.get_n(eval_template2_arg2, True, word)
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '0'
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            saved_firstWord = self.firstWord
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            saved_firstWord = self.firstWord
            call_Dragon('DragToPoint', 'i', [])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 91, '\'Drag\' <n> <leftRight>', e)
            self.firstWord = -1

    def get_mouse_range_adjust(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    # 'Mouse' <upDown> <mouse_range_adjust>
    def gotResults_48(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '0'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template2_arg2 = self.get_upDown(eval_template2_arg2, True, word)
            eval_template3_arg1 = ''
            eval_template3_arg1 += '%a/5'
            eval_template3_arg2 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template3_arg2 = self.get_mouse_range_adjust(eval_template3_arg2, True, word)
            eval_template2_arg2 += eval_template(eval_template3_arg1, eval_template3_arg2)
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            saved_firstWord = self.firstWord
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 96, '\'Mouse\' <upDown> <mouse_range_adjust>', e)
            self.firstWord = -1

    # 'Mouse' <leftRight> <mouse_range_adjust>
    def gotResults_49(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template2_arg2 = self.get_leftRight(eval_template2_arg2, True, word)
            eval_template3_arg1 = ''
            eval_template3_arg1 += '%a/5'
            eval_template3_arg2 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template3_arg2 = self.get_mouse_range_adjust(eval_template3_arg2, True, word)
            eval_template2_arg2 += eval_template(eval_template3_arg1, eval_template3_arg2)
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '0'
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            saved_firstWord = self.firstWord
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 97, '\'Mouse\' <leftRight> <mouse_range_adjust>', e)
            self.firstWord = -1

    def get_ns(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Window move' <direction>
    def gotResults_50(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Win+'
            word = fullResults[1 + self.firstWord][0]
            dragon_arg1 = self.get_direction(dragon_arg1, True, word)
            dragon_arg1 += '}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 101, '\'Window move\' <direction>', e)
            self.firstWord = -1

    # 'Window move' <direction> <ns>
    def gotResults_51(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            limit = ''
            word = fullResults[2 + self.firstWord][0]
            limit = self.get_ns(limit, True, word)
            for i in range(to_long(limit)):
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '{Win+'
                word = fullResults[1 + self.firstWord][0]
                dragon2_arg1 = self.get_direction(dragon2_arg1, True, word)
                dragon2_arg1 += '}'
                saved_firstWord = self.firstWord
                call_Dragon('SendSystemKeys', 'si', [dragon2_arg1])
                self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 102, '\'Window move\' <direction> <ns>', e)
            self.firstWord = -1

    # 'Window maximise' ('swap' | 'left' | 'right')
    def gotResults_52(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Win+Up}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            limit = ''
            limit += '2'
            for i in range(to_long(limit)):
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '{Win+Right}'
                saved_firstWord = self.firstWord
                call_Dragon('SendSystemKeys', 'si', [dragon2_arg1])
                self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Win+Up}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_52(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 104, '\'Window maximise\' (\'swap\' | \'left\' | \'right\')', e)
            self.firstWord = -1

    def get_direction(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_left_right(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_start_end(self, list_buffer, functional, word):
        if word == 'Start':
            list_buffer += '{Home}'
        elif word == 'End':
            list_buffer += '{End}'
        return list_buffer

    def get_compass(self, list_buffer, functional, word):
        if word == 'North':
            list_buffer += '{Shift+Ctrl+Home}'
        elif word == 'South':
            list_buffer += '{Shift+Ctrl+End}'
        elif word == 'East':
            list_buffer += '{Shift+End}'
        elif word == 'West':
            list_buffer += '{Shift+Home}'
        return list_buffer

    # 'Kill' ('Char' | '1' | 'One')
    def gotResults_53(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_53(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 133, '\'Kill\' (\'Char\' | \'1\' | \'One\')', e)
            self.firstWord = -1

    # 'Kill Back 1'
    def gotResults_54(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Backspace}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_54(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 134, '\'Kill Back 1\'', e)
            self.firstWord = -1

    # 'Kill Back'
    def gotResults_152(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Backspace}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_152(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 134, '\'Kill Back\'', e)
            self.firstWord = -1

    # 'Kill' <n>
    def gotResults_55(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 135, '\'Kill\' <n>', e)
            self.firstWord = -1

    # 'Kill Back' <n>
    def gotResults_56(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Backspace_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 136, '\'Kill Back\' <n>', e)
            self.firstWord = -1

    # 'Back' <n>
    def gotResults_153(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Backspace_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 136, '\'Back\' <n>', e)
            self.firstWord = -1

    # 'One Word' <left_right>
    def gotResults_57(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_left_right(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 139, '\'One Word\' <left_right>', e)
            self.firstWord = -1

    # 'Word' <left_right>
    def gotResults_154(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_left_right(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 139, '\'Word\' <left_right>', e)
            self.firstWord = -1

    # <n> 'Words' <left_right>
    def gotResults_58(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_left_right(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 140, '<n> \'Words\' <left_right>', e)
            self.firstWord = -1

    # 'Kill Word'
    def gotResults_59(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Right_2}{Ctrl+Left}{Shift+Ctrl+Right}'
            top_buffer += '{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_59(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 141, '\'Kill Word\'', e)
            self.firstWord = -1

    # 'Kill' <n> 'Words'
    def gotResults_60(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Right_2}{Ctrl+Left}{Shift+Ctrl+Right_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 142, '\'Kill\' <n> \'Words\'', e)
            self.firstWord = -1

    # 'Kill Back Word'
    def gotResults_61(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left}{Ctrl+Right}{Shift+Ctrl+Left}'
            top_buffer += '{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_61(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 143, '\'Kill Back Word\'', e)
            self.firstWord = -1

    # 'Kill Back' <n> 'Words'
    def gotResults_62(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left}{Ctrl+Right}{Shift+Ctrl+Left_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 144, '\'Kill Back\' <n> \'Words\'', e)
            self.firstWord = -1

    # 'Line' <start_end>
    def gotResults_63(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_start_end(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 147, '\'Line\' <start_end>', e)
            self.firstWord = -1

    # 'Line Here'
    def gotResults_64(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Enter}{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_64(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 150, '\'Line Here\'', e)
            self.firstWord = -1

    # 'Copy Line'
    def gotResults_65(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{home}{Shift+End}{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_65(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 151, '\'Copy Line\'', e)
            self.firstWord = -1

    # 'Kill Line'
    def gotResults_66(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{home}{Shift+End}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_66(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 152, '\'Kill Line\'', e)
            self.firstWord = -1

    # 'Kill Back Line'
    def gotResults_67(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{home}{Shift+Up}'
            top_buffer += '{Shift+Home}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_67(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 153, '\'Kill Back Line\'', e)
            self.firstWord = -1

    # 'Kill' <n> 'Lines'
    def gotResults_68(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{home}{Shift+Down_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}{Shift+Home}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 154, '\'Kill\' <n> \'Lines\'', e)
            self.firstWord = -1

    # 'Kill Back' <n> 'Lines'
    def gotResults_69(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{home}{Shift+Up_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer += '{Shift+Home}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 155, '\'Kill Back\' <n> \'Lines\'', e)
            self.firstWord = -1

    # 'Kill Here'
    def gotResults_70(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+End}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_70(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 156, '\'Kill Here\'', e)
            self.firstWord = -1

    # 'Kill Back Here'
    def gotResults_71(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+Home}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_71(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 157, '\'Kill Back Here\'', e)
            self.firstWord = -1

    # 'Duplicate Line'
    def gotResults_72(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{home}{Shift+Down}{Shift+Home}{Ctrl+c}{Home}{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_72(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 158, '\'Duplicate Line\'', e)
            self.firstWord = -1

    # 'Graph Start'
    def gotResults_73(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Up}{Right}{Home}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_73(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 161, '\'Graph Start\'', e)
            self.firstWord = -1

    # 'Graph End'
    def gotResults_74(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Down}{Left_2}{End}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_74(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 162, '\'Graph End\'', e)
            self.firstWord = -1

    # ('Paragraph' | 'Graph') 'Here'
    def gotResults_75(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Enter}{Enter}{Left}{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_75(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 163, '(\'Paragraph\' | \'Graph\') \'Here\'', e)
            self.firstWord = -1

    # 'Open' ('Graph' | 'Line')
    def gotResults_76(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Enter}{Enter}{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_76(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 164, '\'Open\' (\'Graph\' | \'Line\')', e)
            self.firstWord = -1

    # 'Copy Graph'
    def gotResults_77(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Down}{Shift+Ctrl+Up}{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_77(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 165, '\'Copy Graph\'', e)
            self.firstWord = -1

    # 'Kill Graph'
    def gotResults_78(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Down}{Shift+Ctrl+Up}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_78(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 166, '\'Kill Graph\'', e)
            self.firstWord = -1

    # 'Duplicate Graph'
    def gotResults_79(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Down}{Shift+Ctrl+Up}{Ctrl+c}{Home}{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_79(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 167, '\'Duplicate Graph\'', e)
            self.firstWord = -1

    # 'Flow Start'
    def gotResults_80(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Home}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_80(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 170, '\'Flow Start\'', e)
            self.firstWord = -1

    # 'Flow End'
    def gotResults_81(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+End}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_81(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 171, '\'Flow End\'', e)
            self.firstWord = -1

    # 'All'
    def gotResults_82(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_82(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 173, '\'All\'', e)
            self.firstWord = -1

    # 'Copy All'
    def gotResults_83(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_83(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 174, '\'Copy All\'', e)
            self.firstWord = -1

    # ('Cut' | 'Kill') 'All'
    def gotResults_84(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}{Ctrl+x}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_84(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 175, '(\'Cut\' | \'Kill\') \'All\'', e)
            self.firstWord = -1

    # 'Kill Flow Here'
    def gotResults_85(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+End}'
            top_buffer += '{Ctrl+x}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_85(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 176, '\'Kill Flow Here\'', e)
            self.firstWord = -1

    # 'Kill Back Flow Here'
    def gotResults_86(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Home}{Ctrl+x}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_86(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 177, '\'Kill Back Flow Here\'', e)
            self.firstWord = -1

    # 'Replace All'
    def gotResults_87(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}{Del}{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_87(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 178, '\'Replace All\'', e)
            self.firstWord = -1

    # 'Kill That'
    def gotResults_88(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_88(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 181, '\'Kill That\'', e)
            self.firstWord = -1

    # 'Yank That'
    def gotResults_89(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_89(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 185, '\'Yank That\'', e)
            self.firstWord = -1

    # 'Paste Here'
    def gotResults_90(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            saved_firstWord = self.firstWord
            call_Dragon('ButtonClick', 'ii', [])
            self.firstWord = saved_firstWord
            top_buffer += '{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_90(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 186, '\'Paste Here\'', e)
            self.firstWord = -1

    # 'Duplicate That'
    def gotResults_91(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+c}{Left}{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_91(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 187, '\'Duplicate That\'', e)
            self.firstWord = -1

    # 'Keep That'
    def gotResults_92(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+c}{Ctrl+a}{Del}{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_92(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 188, '\'Keep That\'', e)
            self.firstWord = -1

    # 'Select' <compass>
    def gotResults_93(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_compass(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 189, '\'Select\' <compass>', e)
            self.firstWord = -1

    # 'undo that' <n>
    def gotResults_94(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+z_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 192, '\'undo that\' <n>', e)
            self.firstWord = -1

    def get_key(self, list_buffer, functional, word):
        if word == 'alpha':
            list_buffer += 'a'
        elif word == 'bravo':
            list_buffer += 'b'
        elif word == 'charlie':
            list_buffer += 'c'
        elif word == 'delta':
            list_buffer += 'd'
        elif word == 'echo':
            list_buffer += 'e'
        elif word == 'foxtrot':
            list_buffer += 'f'
        elif word == 'golf':
            list_buffer += 'g'
        elif word == 'hotel':
            list_buffer += 'h'
        elif word == 'india':
            list_buffer += 'i'
        elif word == 'juliett':
            list_buffer += 'j'
        elif word == 'kilo':
            list_buffer += 'k'
        elif word == 'lima':
            list_buffer += 'l'
        elif word == 'mike':
            list_buffer += 'm'
        elif word == 'november':
            list_buffer += 'n'
        elif word == 'oscar':
            list_buffer += 'o'
        elif word == 'papa':
            list_buffer += 'p'
        elif word == 'quebec':
            list_buffer += 'q'
        elif word == 'romeo':
            list_buffer += 'r'
        elif word == 'sierra':
            list_buffer += 's'
        elif word == 'tango':
            list_buffer += 't'
        elif word == 'uniform':
            list_buffer += 'u'
        elif word == 'victor':
            list_buffer += 'v'
        elif word == 'whiskey':
            list_buffer += 'w'
        elif word == 'xray':
            list_buffer += 'x'
        elif word == 'yankee':
            list_buffer += 'y'
        elif word == 'zulu':
            list_buffer += 'z'
        elif word == '0':
            list_buffer += '0'
        elif word == '1':
            list_buffer += '1'
        elif word == '2':
            list_buffer += '2'
        elif word == '3':
            list_buffer += '3'
        elif word == '4':
            list_buffer += '4'
        elif word == '5':
            list_buffer += '5'
        elif word == '6':
            list_buffer += '6'
        elif word == '7':
            list_buffer += '7'
        elif word == '8':
            list_buffer += '8'
        elif word == '9':
            list_buffer += '9'
        elif word == '!':
            list_buffer += '!'
        elif word == '@':
            list_buffer += '@'
        elif word == '#':
            list_buffer += '#'
        elif word == '$':
            list_buffer += '$'
        elif word == '%':
            list_buffer += '%'
        elif word == '^':
            list_buffer += '^'
        elif word == '&':
            list_buffer += '&'
        elif word == '*':
            list_buffer += '*'
        elif word == '(':
            list_buffer += '('
        elif word == ')':
            list_buffer += ')'
        elif word == '`':
            list_buffer += '`'
        elif word == '~':
            list_buffer += '~'
        elif word == '-':
            list_buffer += '-'
        elif word == '_':
            list_buffer += '_'
        elif word == '=':
            list_buffer += '='
        elif word == '+':
            list_buffer += '+'
        elif word == '\\':
            list_buffer += '\\'
        elif word == '|':
            list_buffer += '|'
        elif word == '[':
            list_buffer += '['
        elif word == '{':
            list_buffer += '{'
        elif word == ']':
            list_buffer += ']'
        elif word == '}':
            list_buffer += '}'
        elif word == ';':
            list_buffer += ';'
        elif word == ':':
            list_buffer += ':'
        elif word == '\'':
            list_buffer += '\''
        elif word == '"':
            list_buffer += '"'
        elif word == ',':
            list_buffer += ','
        elif word == '<':
            list_buffer += '<'
        elif word == '.':
            list_buffer += '.'
        elif word == '>':
            list_buffer += '>'
        elif word == '/':
            list_buffer += '/'
        elif word == '?':
            list_buffer += '?'
        elif word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'Escape':
            list_buffer += 'Esc'
        elif word == 'Home':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
        return list_buffer

    # 'Press' <key>
    def gotResults_95(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 20, '\'Press\' <key>', e)
            self.firstWord = -1

    # 'Space Bar'
    def gotResults_96(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_96(words[1:], fullResults)
        except Exception, e:
            handle_error('keys.vch', 24, '\'Space Bar\'', e)
            self.firstWord = -1

    # 'Tab Key'
    def gotResults_97(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_97(words[1:], fullResults)
        except Exception, e:
            handle_error('keys.vch', 25, '\'Tab Key\'', e)
            self.firstWord = -1

    def get_special(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'escape':
            list_buffer += 'Esc'
        return list_buffer

    def get_mod(self, list_buffer, functional, word):
        if word == 'Shift':
            list_buffer += 'Shift'
        elif word == 'control-key':
            list_buffer += 'Ctrl'
        elif word == 'Alt':
            list_buffer += 'Alt'
        return list_buffer

    def get_nn(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Press' <special> <nn>
    def gotResults_98(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_special(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys.vch', 37, '\'Press\' <special> <nn>', e)
            self.firstWord = -1

    # (('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape')) <nn>
    def gotResults_155(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Left':
                top_buffer += 'Left'
            elif word == 'Right':
                top_buffer += 'Right'
            elif word == 'Up':
                top_buffer += 'Up'
            elif word == 'Down':
                top_buffer += 'Down'
            elif word == 'space-bar':
                top_buffer += ' '
            elif word == 'tab-key':
                top_buffer += 'Tab'
            elif word == 'Enter':
                top_buffer += 'Enter'
            elif word == 'page-up':
                top_buffer += 'PgUp'
            elif word == 'page-down':
                top_buffer += 'PgDn'
            elif word == 'Backspace':
                top_buffer += 'Backspace'
            elif word == 'delete':
                top_buffer += 'Del'
            elif word == 'escape':
                top_buffer += 'Esc'
            top_buffer += '_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 37, '((\'Left\' | \'Right\' | \'Up\' | \'Down\' | \'space-bar\' | \'tab-key\' | \'Enter\' | \'page-up\' | \'page-down\' | \'Backspace\' | \'delete\' | \'escape\')) <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <key> <nn>
    def gotResults_99(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys.vch', 38, '\'Press\' <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <key> <nn>
    def gotResults_156(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys.vch', 38, '(\'Shift\' | \'control-key\' | \'Alt\') <key> <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <key> <nn>
    def gotResults_100(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys.vch', 39, '\'Press\' <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <mod> <key> <nn>
    def gotResults_157(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys.vch', 39, '(\'Shift\' | \'control-key\' | \'Alt\') <mod> <key> <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <mod> <key> <nn>
    def gotResults_101(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[5 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('keys.vch', 40, '\'Press\' <mod> <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <mod> <mod> <key> <nn>
    def gotResults_158(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys.vch', 40, '(\'Shift\' | \'control-key\' | \'Alt\') <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('quick start bar' | 'notification tray')
    def gotResults_102(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{win+b}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_102(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 206, '(\'quick start bar\' | \'notification tray\')', e)
            self.firstWord = -1

    def get_lr(self, list_buffer, functional, word):
        if word == 'left':
            list_buffer += '{space}'
        elif word == 'right':
            list_buffer += '{shift+f10}'
        return list_buffer

    # 'icon 1' 1..4 <lr>
    def gotResults_103(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{win+b}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            limit = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '(%a-1)'
            eval_template2_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template2_arg2 += self.convert_number_word(word)
            limit += eval_template(eval_template2_arg1, eval_template2_arg2)
            for i in range(to_long(limit)):
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '50'
                saved_firstWord = self.firstWord
                call_Dragon('Wait', 'i', [dragon2_arg1])
                self.firstWord = saved_firstWord
                top_buffer += '{right}'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_lr(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 210, '\'icon 1\' 1..4 <lr>', e)
            self.firstWord = -1

    # 'icon' 2..6 1..4 <lr>
    def gotResults_104(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{win+b}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            limit = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '((%a-1)*4)+(%a)'
            eval_template2_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template2_arg2 += self.convert_number_word(word)
            eval_template2_arg3 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template2_arg3 += self.convert_number_word(word)
            limit += eval_template(eval_template2_arg1, eval_template2_arg2, eval_template2_arg3)
            for i in range(to_long(limit)):
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '50'
                saved_firstWord = self.firstWord
                call_Dragon('Wait', 'i', [dragon2_arg1])
                self.firstWord = saved_firstWord
                top_buffer += '{right}'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_lr(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('_vocola.vcl', 211, '\'icon\' 2..6 1..4 <lr>', e)
            self.firstWord = -1

    # 'open computer'
    def gotResults_105(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+e}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_105(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 215, '\'open computer\'', e)
            self.firstWord = -1

    # 'search' ('programs' | 'files' | 'computer')
    def gotResults_106(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+'
            word = fullResults[1 + self.firstWord][0]
            if word == 'programs':
                dragon_arg1 += 'q'
            elif word == 'files':
                dragon_arg1 += 'f'
            elif word == 'computer':
                dragon_arg1 += 's'
            dragon_arg1 += '}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_106(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 216, '\'search\' (\'programs\' | \'files\' | \'computer\')', e)
            self.firstWord = -1

    # 'open main menu'
    def gotResults_107(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+x}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_107(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 217, '\'open main menu\'', e)
            self.firstWord = -1

    # 'show all windows'
    def gotResults_108(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{ctrl+alt+tab}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_108(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 218, '\'show all windows\'', e)
            self.firstWord = -1

    # 'network control'
    def gotResults_109(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+i}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Down_4}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_109(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 221, '\'network control\'', e)
            self.firstWord = -1

    # 'Volume control'
    def gotResults_110(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+i}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Down_4}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Right_1}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_110(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 224, '\'Volume control\'', e)
            self.firstWord = -1

    # 'volume' ('up' | 'down') ('10' | '20' | '30' | '40' | '50')
    def gotResults_111(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+i}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Down_4}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Right_1}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer += word
            top_buffer += '}'
            limit = ''
            limit += '2'
            for i in range(to_long(limit)):
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '100'
                saved_firstWord = self.firstWord
                call_Dragon('Wait', 'i', [dragon2_arg1])
                self.firstWord = saved_firstWord
                top_buffer += '{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_111(words[3:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 225, '\'volume\' (\'up\' | \'down\') (\'10\' | \'20\' | \'30\' | \'40\' | \'50\')', e)
            self.firstWord = -1

    # 'brightness control'
    def gotResults_112(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+i}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Down_4}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Right_2}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_112(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 230, '\'brightness control\'', e)
            self.firstWord = -1

    # 'brightness' ('up' | 'down') ('10' | '20' | '30' | '40' | '50')
    def gotResults_113(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{win+i}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Down_4}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Right_2}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer += word
            top_buffer += '}'
            limit = ''
            limit += '2'
            for i in range(to_long(limit)):
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '100'
                saved_firstWord = self.firstWord
                call_Dragon('Wait', 'i', [dragon2_arg1])
                self.firstWord = saved_firstWord
                top_buffer += '{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_113(words[3:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 231, '\'brightness\' (\'up\' | \'down\') (\'10\' | \'20\' | \'30\' | \'40\' | \'50\')', e)
            self.firstWord = -1

    # 'Sound panel'
    def gotResults_114(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Win+r}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Run'
            dragon_arg2 = ''
            dragon_arg2 += ''
            dragon_arg3 = ''
            dragon_arg3 += '1000'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1, dragon_arg2, dragon_arg3])
            self.firstWord = saved_firstWord
            top_buffer += 'mmsys.cpl'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Sound'
            dragon_arg2 = ''
            dragon_arg2 += ''
            dragon_arg3 = ''
            dragon_arg3 += '1000'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1, dragon_arg2, dragon_arg3])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+down}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_114(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 238, '\'Sound panel\'', e)
            self.firstWord = -1

    # 'display' ('settings' | 'panel')
    def gotResults_115(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Win+r}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'desk.cpl'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Control Panel\\All Control Panel Items\\Display\\Screen Resolution'
            dragon_arg2 = ''
            dragon_arg2 += ''
            dragon_arg3 = ''
            dragon_arg3 += '2000'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1, dragon_arg2, dragon_arg3])
            self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_115(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 252, '\'display\' (\'settings\' | \'panel\')', e)
            self.firstWord = -1

    # 'Network panel'
    def gotResults_116(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Win+r}'
            saved_firstWord = self.firstWord
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'ncpa.cpl'
            top_buffer += '{enter}'
            top_buffer += '{ctrl+down}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_116(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 265, '\'Network panel\'', e)
            self.firstWord = -1

    # 'hypertext'
    def gotResults_117(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'http://'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_117(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 271, '\'hypertext\'', e)
            self.firstWord = -1

    # 'secure hypertext'
    def gotResults_118(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'https://'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_118(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 272, '\'secure hypertext\'', e)
            self.firstWord = -1

    # ('bite code' | 'python' | 'Shell' | 'text' | 'tar' | 'jason') 'extension'
    def gotResults_119(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.'
            word = fullResults[0 + self.firstWord][0]
            if word == 'bite code':
                top_buffer += 'pyc'
            elif word == 'python':
                top_buffer += 'py'
            elif word == 'Shell':
                top_buffer += 'sh'
            elif word == 'text':
                top_buffer += 'txt'
            elif word == 'tar':
                top_buffer += 'tar.gz'
            elif word == 'jason':
                top_buffer += 'json'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_119(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 279, '(\'bite code\' | \'python\' | \'Shell\' | \'text\' | \'tar\' | \'jason\') \'extension\'', e)
            self.firstWord = -1

    # 'Keyac' ('space' | 'backspace' | 'page up' | 'page down' | 'control' | 'alt' | 'shift' | 'del' | 'source' | 'escape' | 'pie' | 'red package' | 'config')
    def gotResults_120(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'space':
                top_buffer += 'space'
            elif word == 'backspace':
                top_buffer += 'backspace'
            elif word == 'page up':
                top_buffer += 'pgup'
            elif word == 'page down':
                top_buffer += 'pgdn'
            elif word == 'control':
                top_buffer += 'ctrl'
            elif word == 'alt':
                top_buffer += 'alt'
            elif word == 'shift':
                top_buffer += 'shift'
            elif word == 'del':
                top_buffer += 'del'
            elif word == 'source':
                top_buffer += 'src'
            elif word == 'escape':
                top_buffer += 'esc'
            elif word == 'pie':
                top_buffer += 'py'
            elif word == 'red package':
                top_buffer += 'rpm'
            elif word == 'config':
                top_buffer += 'cfg'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_120(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 293, '\'Keyac\' (\'space\' | \'backspace\' | \'page up\' | \'page down\' | \'control\' | \'alt\' | \'shift\' | \'del\' | \'source\' | \'escape\' | \'pie\' | \'red package\' | \'config\')', e)
            self.firstWord = -1

    def get_key_short(self, list_buffer, functional, word):
        if word == 'pie':
            list_buffer += 'python'
        elif word == 'upper pie':
            list_buffer += 'PYTHON'
        elif word == 'Hydra':
            list_buffer += 'HYD-'
        elif word == 'Corrie':
            list_buffer += 'corosync'
        elif word == 'chrome':
            list_buffer += 'chroma'
        return list_buffer

    # 'keyboard' <key_short>
    def gotResults_121(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key_short(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 301, '\'keyboard\' <key_short>', e)
            self.firstWord = -1

    # ('vim' | 'bash') 'config'
    def gotResults_122(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.'
            word = fullResults[0 + self.firstWord][0]
            top_buffer += word
            top_buffer += 'rc'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_122(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 303, '(\'vim\' | \'bash\') \'config\'', e)
            self.firstWord = -1

    # 'insert signature'
    def gotResults_123(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{enter}{enter}Regards,{enter}Tom'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_123(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 304, '\'insert signature\'', e)
            self.firstWord = -1

    # 'double right arrow'
    def gotResults_124(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '>> '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_124(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 305, '\'double right arrow\'', e)
            self.firstWord = -1

    # 'triple quote'
    def gotResults_125(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '"""'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_125(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 306, '\'triple quote\'', e)
            self.firstWord = -1

    # 'python interpreter'
    def gotResults_126(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'python '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_126(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 307, '\'python interpreter\'', e)
            self.firstWord = -1

    # 'root user'
    def gotResults_127(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'root'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_127(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 308, '\'root user\'', e)
            self.firstWord = -1

    # 'default prefix'
    def gotResults_128(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '192.168.'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_128(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 309, '\'default prefix\'', e)
            self.firstWord = -1

    # ('BEGIN' | 'END') 'separator'
    def gotResults_129(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '----'
            word = fullResults[0 + self.firstWord][0]
            top_buffer += word
            top_buffer += '----{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_129(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 310, '(\'BEGIN\' | \'END\') \'separator\'', e)
            self.firstWord = -1

    # 'firefox advanced settings'
    def gotResults_130(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'about:preferences#advanced'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_130(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 311, '\'firefox advanced settings\'', e)
            self.firstWord = -1

    # 'Intel' ('proxy' | 'proxy Web port' | 'host' | 'manager' | 'proxy port')
    def gotResults_131(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'proxy':
                top_buffer += 'proxy-chain.intel.com'
            elif word == 'proxy Web port':
                top_buffer += '911'
            elif word == 'host':
                top_buffer += 'tanabarr-MOBL1.ger.corp.intel.com'
            elif word == 'manager':
                top_buffer += 'imldev.local'
            elif word == 'proxy port':
                top_buffer += '1080'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_131(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 319, '\'Intel\' (\'proxy\' | \'proxy Web port\' | \'host\' | \'manager\' | \'proxy port\')', e)
            self.firstWord = -1

    # 'Intel pay portal ID'
    def gotResults_132(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'TNabarro@IntelUK'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_132(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 320, '\'Intel pay portal ID\'', e)
            self.firstWord = -1

    # 'Jenkins address'
    def gotResults_133(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'https://jenkins.lotus.hpdd.lab.intel.com:8080'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_133(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 322, '\'Jenkins address\'', e)
            self.firstWord = -1

    # 'get it address'
    def gotResults_134(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'http://review.whamcloud.com/#/c/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_134(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 323, '\'get it address\'', e)
            self.firstWord = -1

    # 'jira address'
    def gotResults_135(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'https://jira.hpdd.intel.com/browse/HYD-'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_135(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 324, '\'jira address\'', e)
            self.firstWord = -1

    # ('import' | 'insert') 'Pie' ('develop' | 'debug')
    def gotResults_136(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'import pydevd;pydevd.settrace(\'imldev.local\', port=2100, stdoutToServer=True, stderrToServer=True)'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_136(words[3:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 330, '(\'import\' | \'insert\') \'Pie\' (\'develop\' | \'debug\')', e)
            self.firstWord = -1

    # 'import debug'
    def gotResults_137(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'import ipdb;ipdb.set_trace()'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_137(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 332, '\'import debug\'', e)
            self.firstWord = -1

    # 'chrome password'
    def gotResults_138(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'lustre'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_138(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 334, '\'chrome password\'', e)
            self.firstWord = -1

    # 'cluster'
    def gotResults_139(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'lotus-32vm'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_139(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 335, '\'cluster\'', e)
            self.firstWord = -1

    # 'cluster domain'
    def gotResults_140(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'lotus.hpdd.lab.intel.com'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_140(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 336, '\'cluster domain\'', e)
            self.firstWord = -1

    # 'windows mount command'
    def gotResults_141(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'mount -u:tanabarr \\\\192.168.56.102\\home\\share g:'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_141(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 337, '\'windows mount command\'', e)
            self.firstWord = -1

    # ('upper') 'she said'
    def gotResults_142(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[0 + self.firstWord][0]
            when_value += word
            if when_value != "":
                top_buffer += 'ZFS'
            else:
                top_buffer += 'zfs'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_142(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 338, '(\'upper\') \'she said\'', e)
            self.firstWord = -1

    # 'she said'
    def gotResults_159(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += 'ZFS'
            else:
                top_buffer += 'zfs'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_159(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 338, '\'she said\'', e)
            self.firstWord = -1

    # 'dongle number'
    def gotResults_143(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '0607659202'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_143(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 339, '\'dongle number\'', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None
