# NatLink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.5, Mon Sep 05 09:05:05 2016

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """
        <dgndictation> imported;
        <key> = ('alpha' | 'bravo' | 'charlie' | 'delta' | 'echo' | 'foxtrot' | 'golf' | 'hotel' | 'india' | 'juliett' | 'kilo' | 'lima' | 'mike' | 'november' | 'oscar' | 'papa' | 'quebec' | 'romeo' | 'sierra' | 'tango' | 'uniform' | 'victor' | 'whiskey' | 'xray' | 'yankee' | 'zulu' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '`' | '~' | '-' | '_' | '=' | '+' | '\\' | '|' | '[' | '{' | ']' | '}' | ';' | ':' | "'" | '"' | ',' | '<' | '.' | '>' | '/' | '?' | 'Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'Escape' | 'Home' | 'End' ) ;
        <1> = 'Press' <key> ;
        <2> = 'Space Bar' ;
        <3> = 'Tab Key' ;
        <special> = ('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ;
        <mod> = 'Shift' | 'control-key' | 'Alt' ;
        <nn> = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50) ;
        <4> = 'Press' <special> <nn> ;
        <255> = (('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ) <nn> ;
        <5> = 'Press' <mod> <key> <nn> ;
        <256> = ('Shift' | 'control-key' | 'Alt' ) <key> <nn> ;
        <6> = 'Press' <mod> <mod> <key> <nn> ;
        <257> = ('Shift' | 'control-key' | 'Alt' ) <mod> <key> <nn> ;
        <7> = 'Press' <mod> <mod> <mod> <key> <nn> ;
        <258> = ('Shift' | 'control-key' | 'Alt' ) <mod> <mod> <key> <nn> ;
        <0to9> = ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <2to9> = (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <1to30> = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) ;
        <direction> = 'Left' | 'Right' | 'Up' | 'Down' ;
        <left_right> = ('Left' | 'Right' ) ;
        <top_bottom> = ('Top' | 'Bottom' | 'Middle' ) ;
        <8> = ((1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) ) <direction> ;
        <9> = ('Change' | 'Copy' ) ('Char' | '1' | 'One' ) ;
        <10> = ('Change' | 'Copy' ) 'Back 1' ;
        <259> = ('Change' | 'Copy' ) 'Back' ;
        <11> = ('Change' | 'Copy' ) <11b> ;
        <11b> = <1to30> 'Chars' ;
        <260> = ('Change' | 'Copy' ) <1to30> ;
        <12> = ('Change' | 'Copy' ) 'Back' <12b> ;
        <12b> = <1to30> 'Chars' ;
        <261> = ('Change' | 'Copy' ) 'Back' <1to30> ;
        <13> = 'Kill' ('Char' | '1' | 'One' ) ;
        <14> = 'Kill Back 1' ;
        <262> = 'Kill Back' ;
        <15> = 'Kill' <15b> ;
        <15b> = <1to30> 'Chars' ;
        <263> = 'Kill' <1to30> ;
        <16> = 'Kill Back' <16b> ;
        <16b> = <1to30> 'Chars' ;
        <264> = 'Kill Back' <1to30> ;
        <17> = 'Change case' ('back' ) <1to30> ;
        <266> = 'Change case' ('back' ) ;
        <265> = 'Change case' <1to30> ;
        <267> = 'Change case' ;
        <18> = 'One Word' ;
        <268> = 'Word' ;
        <19> = 'Back One Word' ;
        <269> = 'Back Word' ;
        <20> = <1to30> 'Words' ;
        <21> = 'Back' <21b> ;
        <21b> = <1to30> 'Words' ;
        <22> = <edit_mode> 'Word' ;
        <23> = <edit_mode> <1to30> 'Words' ;
        <24> = <edit_mode> 'Back Word' ;
        <25> = <edit_mode> 'Back' <25b> ;
        <25b> = <1to30> 'Words' ;
        <26> = <edit_mode> 'Next Word' ;
        <line_actions> = ('Move to' | 'Copy to' | 'Change' | 'Kill' | 'Copy' | 'Sub' | 'Duplicate' | 'Start' | 'Append' | 'beginning' | 'middle' | 'near the end' | 'vim comment' | 'vim remove comment' | 'New Here' | 'New insert' | 'New Back' | 'Append semicolon' ) ;
        <edit_mode> = ('Change' | 'Kill' | 'Copy' ) ;
        <27> = <line_actions> 'this Line' ;
        <270> = <line_actions> 'Line' ;
        <28> = 'Swap' ('Line' | 'Char' ) ;
        <29> = 'Swap back' ('Line' | 'Char' ) ;
        <30> = <edit_mode> ('Beginning' | 'Start' | 'End' ) 'Line Here' ;
        <272> = <edit_mode> ('Beginning' | 'Start' | 'End' ) 'Line' ;
        <271> = <edit_mode> ('Beginning' | 'Start' | 'End' ) 'Here' ;
        <273> = <edit_mode> ('Beginning' | 'Start' | 'End' ) ;
        <31> = 'Blank' ('back' | 'insert' ) 'Line' ;
        <274> = 'Blank' ('back' | 'insert' ) ;
        <32> = 'Join' ('Back' | 'Next' ) 'Line' ;
        <276> = 'Join' ('Back' | 'Next' ) ;
        <275> = 'Join Line' ;
        <277> = 'Join' ;
        <relative_range_actions> = ('Change' | 'Kill' | 'Copy' | 'Move to' | 'Copy to' | 'duplicate' | 'indent' | 'reverse indent' ) ;
        <33> = <relative_range_actions> ('Next' | 'Back' ) 'Line' ;
        <34> = <relative_range_actions> (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) 'Lines' ;
        <35> = <relative_range_actions> 'Back' (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) 'Lines' ;
        <relative_range_commands> = ('Sub' | 'Start' | 'Append' | 'copy here' | 'comment' | 'remove comment' ) ;
        <36> = <relative_range_commands> ('Next' | 'Back' ) 'Line' ;
        <37> = <relative_range_commands> (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) 'Lines' ;
        <38> = <relative_range_commands> 'Back' (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) 'Lines' ;
        <range_actions> = ('Move to' | 'Copy to' | 'Change' | 'Kill' | 'Copy' | 'Sub' | 'copy here' | 'comment' | 'remove comment' ) ;
        <39> = <range_actions> 'Range' ;
        <insert> = ('insert' | 'append' ) ;
        <40> = 'Flow' ('Start' | 'Append' ) <insert> ;
        <278> = 'Flow' ('Start' | 'Append' ) ;
        <41> = <edit_mode> ('Flow Here' | 'Flow All' | 'Back Flow Here' ) ;
        <42> = ('Indent' | 'reverse indent' ) ('Line' | 'Range' ) (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <279> = ('Indent' | 'reverse indent' ) ('Line' | 'Range' ) ;
        <sub_action> = ('all' | 'here' | 'back here' ) ;
        <43> = ('sub' | 'substitute' ) <sub_action> ;
        <44> = ('edit' | 'editor' ) ('cancel' | 'redo' ) <2to9> ;
        <280> = ('edit' | 'editor' ) ('cancel' | 'redo' ) ;
        <45> = ('change' ) ('inner' | 'outer' ) ('brackets' | 'braces' | 'square brackets' | 'doc string' | 'quotes' ) ;
        <46> = 'Start macro' ;
        <47> = 'Repeat macro' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) 'times' ;
        <281> = 'Repeat macro' ;
        <text_actions> = ('Paste' | 'Paste Back' | 'Insert' | 'Append here' | 'Append' | 'Substitute' | 'Replace' | 'diff push' | 'diff pull' | 'diff next' | 'diff back' | 'Format' | 'Normal mode' | 'visual mode' ) ;
        <48> = (('Paste' | 'Paste Back' | 'Insert' | 'Append here' | 'Append' | 'Substitute' | 'Replace' | 'diff push' | 'diff pull' | 'diff next' | 'diff back' | 'Format' | 'Normal mode' | 'visual mode' ) ) ;
        <line_mod> = ('Start' | 'Append' | 'Sub' | 'Scroll to bottom' | 'Scroll bottom' | 'Scroll to top' | 'Scroll top' | 'Scroll to middle' | 'Scroll middle' | 'beginning' | 'middlie' | 'end' | 'New back' | 'insert' | 'Change' | 'Kill' | 'Copy' | 'Paste' | 'Paste Back' | 'Move to' | 'copy here' | 'indent' | 'reverse indent' | 'Comment' | 'Remove Comment' | 'Blank back' | 'Blank insert' | 'touch' ) ;
        <49> = 'line' <line_mod> <0to9> ;
        <285> = 'line' <0to9> ;
        <50> = 'line' <line_mod> <0to9> <0to9> ;
        <286> = 'line' <0to9> <0to9> ;
        <51> = 'line' <line_mod> <0to9> <0to9> <0to9> ;
        <287> = 'line' <0to9> <0to9> <0to9> ;
        <52> = 'line' <line_mod> <0to9> <0to9> <0to9> <0to9> ;
        <288> = 'line' <0to9> <0to9> <0to9> <0to9> ;
        <navigation_actions> = ('List changes' | 'back change' | 'Undo jump' | 'return from' | 'Set mark' | 'Goto mark' | 'Append back' | 'Append next' | 'Start back' | 'Start next' | 'Match bracket' | 'Scroll to bottom' | 'Scroll bottom' | 'Scroll to top' | 'Scroll top' | 'Scroll to middle' | 'Scroll middle' ) ;
        <53> = (('List changes' | 'back change' | 'Undo jump' | 'return from' | 'Set mark' | 'Goto mark' | 'Append back' | 'Append next' | 'Start back' | 'Start next' | 'Match bracket' | 'Scroll to bottom' | 'Scroll bottom' | 'Scroll to top' | 'Scroll top' | 'Scroll to middle' | 'Scroll middle' ) ) ;
        <54> = 'Halfpage' ('Up' | 'Down' ) ;
        <292> = 'Halfpage' ;
        <55> = 'Page' <top_bottom> ;
        <56> = 'leap back' <56b> ;
        <56b> = <printable> (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <293> = 'leap back' <printable> ;
        <57> = 'leap' <57b> ;
        <57b> = <printable> (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <294> = 'leap' <printable> ;
        <58> = 'leap before' <58b> ;
        <58b> = <printable> (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <295> = 'leap before' <printable> ;
        <59> = 'leap back cap' <59b> ;
        <59b> = <printable> (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <296> = 'leap back cap' <printable> ;
        <60> = 'leap cap' <60b> ;
        <60b> = <printable> (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <297> = 'leap cap' <printable> ;
        <61> = 'leap before cap' <61b> ;
        <61b> = <printable> (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <298> = 'leap before cap' <printable> ;
        <62> = 'leap next' ;
        <63> = 'leap combo' <printable> <printable> <printable> <printable> ;
        <300> = 'leap combo' <printable> <printable> <printable> ;
        <299> = 'leap combo' <printable> <printable> ;
        <64> = 'Search' <dgndictation> ;
        <65> = 'Search go' <dgndictation> ;
        <66> = 'clear Search' ;
        <67> = 'shell command' ;
        <68> = 'Make' ;
        <69> = 'Vim Update Tag File' ;
        <70> = 'List errors' ;
        <71> = 'Next error' ;
        <72> = 'back error' ;
        <73> = ('Save' | 'Close' | 'save and close' ) 'file' ('confirm' ) ;
        <301> = ('Save' | 'Close' | 'save and close' ) 'file' ;
        <74> = 'back command' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <302> = 'back command' ;
        <75> = 'Edit another' ;
        <76> = 'File browser' ;
        <77> = 'vim diff split' ;
        <78> = 'print function' ;
        <79> = 'Insert space' ;
        <80> = 'Insert space after' ;
        <81> = 'Append comment' ;
        <82> = 'Insert line break' ;
        <83> = 'insert comment' ;
        <84> = ('open' | 'close' ) 'doc string' ;
        <85> = 'Double slash backslash' ;
        <86> = 'reference' ;
        <87> = 'Function definition' ;
        <88> = 'Function definition' <dgndictation> ;
        <89> = 'Show Help' ;
        <90> = 'Set setting' ('paste' ) ;
        <303> = 'Set setting' ;
        <91> = 'Set dark background' ;
        <92> = 'Set light background' ;
        <93> = 'reload vim config' ;
        <94> = 'run this' ('now' ) ;
        <304> = 'run this' ;
        <95> = 'Split vertical' ;
        <window_action> = ('left' | 'right' | 'up' | 'down' | 'next' | 'close' ) ;
        <96> = 'Vim Window' <window_action> ;
        <97> = 'Vim Window crop' ;
        <98> = 'Vim Window make fat' ;
        <99> = 'Vim Window make thin' ;
        <buffer_action> = ('back' | 'close' | 'next' | 'switch' | 'list' ) ;
        <100> = 'via buffer' <buffer_action> ;
        <101> = 'via buffer number' <1to30> ;
        <tab_actions> = ('back' | 'Close' | 'Next' | 'List' | 'Last' | 'First' ) ;
        <102> = 'vim page' <tab_actions> ;
        <103> = 'vim page switch' <1to30> ;
        <104> = 'vim Tags back' ;
        <105> = 'vim Tags Jump' ;
        <106> = 'vim Tags Next' ;
        <107> = 'Vim Tags Match' ;
        <108> = 'Vim Tags Return' ;
        <109> = 'Vim Tags Stack' ;
        <110> = 'Nowrap' ;
        <111> = 'setting based' ;
        <112> = 'Edit vim RC' ;
        <113> = 'Reload' ;
        <114> = 'all buffers' ;
        <115> = 'show file details' ;
        <116> = 'command history' ;
        <117> = 'pattern match history' ;
        <118> = 'histogram debug' ;
        <119> = 'ifdef' ('debug' | 'trace' ) ;
        <120> = 'ifdef end' ;
        <printable> = ('space' | '!' | 'bang' | '"' | 'quote' | '#' | 'pound' | '$' | 'dollar' | '%' | 'percent' | '&' | "'" | 'apostrophe' | 'single' | '(' | 'paren' | ')' | 'close paren' | '*' | 'asterisk' | 'star' | '+' | 'plus' | ',' | '-' | 'minus' | '.' | 'dot' | '/' | 'zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | ':' | ';' | 'semi' | '<' | 'bend' | '=' | 'equal' | 'equals' | '>' | 'close bend' | '?' | 'question' | '@' | 'big Alpha' | 'big Bravo' | 'big Charlie' | 'big Delta' | 'big echo' | 'big foxtrot' | 'big golf' | 'big Hotel' | 'big India' | 'big Juliett' | 'big kilo' | 'big Lima' | 'big Mike' | 'big November' | 'big Oscar' | 'big Papa' | 'big Quebec' | 'big Romeo' | 'big Sierra' | 'big tango' | 'big uniform' | 'big Victor' | 'big whiskey' | 'big x-ray' | 'big Yankee' | 'big Zulu' | '[' | 'bracket' | 'backslash' | ']' | 'close bracket' | '^' | '_' | '`' | 'Alpha' | 'Bravo' | 'Charlie' | 'Delta' | 'echo' | 'foxtrot' | 'golf' | 'Hotel' | 'India' | 'Juliett' | 'kilo' | 'Lima' | 'Mike' | 'November' | 'Oscar' | 'Papa' | 'Quebec' | 'Romeo' | 'Sierra' | 'tango' | 'uniform' | 'Victor' | 'whiskey' | 'x-ray' | 'Yankee' | 'Zulu' | '{' | 'brace' | '|' | 'vertical bar' | 'bar' | '}' | 'close brace' | '~' ) ;
        <121> = 'Vim show Taglist' ;
        <122> = 'Vim Align' ;
        <123> = 'Vim Align' <key> ;
        <124> = 'complete' ;
        <125> = 'local complete' ;
        <126> = 'Remove preview' ;
        <127> = 'Unite files' ;
        <128> = 'Unite files recursive' ;
        <129> = 'Unite recent' ;
        <130> = 'Unite history' ;
        <131> = 'Unite buffer' ;
        <132> = 'Unite insert' ;
        <133> = 'tee comment' ('range' | 'line' ) ;
        <line_mod2> = ('tee Comment' ) ;
        <134> = 'line' <line_mod2> <0to9> ;
        <305> = 'line' <0to9> ;
        <135> = 'line' <line_mod2> <0to9> <0to9> ;
        <306> = 'line' <0to9> <0to9> ;
        <136> = 'line' <line_mod2> <0to9> <0to9> <0to9> ;
        <307> = 'line' <0to9> <0to9> <0to9> ;
        <137> = 'line' <line_mod2> <0to9> <0to9> <0to9> <0to9> ;
        <308> = 'line' <0to9> <0to9> <0to9> <0to9> ;
        <relative_range_commands2> = ('tee Comment' ) ;
        <138> = <relative_range_commands2> ('Next' | 'Back' ) 'Line' ;
        <139> = <relative_range_commands2> (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) 'Lines' ;
        <140> = <relative_range_commands2> 'Back' (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) 'Lines' ;
        <comment_type> = ('frame' | 'function' | 'method' | 'class' | 'implementation' | 'header' | 'source section' | 'header section' | 'keyword' | 'special' | 'date' | 'time' | 'toggle type' ) ;
        <141> = <comment_type> 'comment' ;
        <statement_type> = ('do' | 'for' | 'if' | 'if else' | 'else' | 'while' | 'switch' | 'case' ) ;
        <142> = <statement_type> 'statement' ;
        <idiom_type> = ('function' | 'static' | 'main' | 'for increment' | 'print' | 'file print' ) ;
        <143> = <idiom_type> 'idiom' ;
        <144> = 'start' ('brace' | 'comment' ) ('block' ) ;
        <309> = 'start' ('brace' | 'comment' ) ;
        <preprocessor_type> = ('include header' | 'include global' | 'include local' | 'define' ) ;
        <145> = <preprocessor_type> 'preprocessor' ;
        <146> = 'Bundle command' ('Install' | 'Clean' | 'List' ) ;
        <147> = ('expand' | 'collapse' ) 'all' ;
        <148> = 'screen new' ;
        <149> = 'screen remove' ;
        <150> = 'screen crop' ;
        <151> = 'scroll back' ;
        <152> = 'scroll mode' ;
        <153> = 'screen paste' ;
        <154> = 'screen mark' ;
        <155> = 'screen kill' ;
        <156> = 'screen help' ;
        <157> = 'screen split' ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <310> = 'screen split' ;
        <158> = 'screen title' ;
        <159> = 'screen list' ;
        <160> = 'screen switch' ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <311> = 'screen switch' ;
        <161> = 'screen detach' ;
        <162> = 'screen next' ;
        <163> = 'screen back' ;
        <164> = 'screen' ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <165> = 'screen attach' ;
        <166> = 'screen join' ;
        <167> = 'screen search' ('backward' | 'forward' ) ;
        <168> = 'screen search next' ('backward' | 'forward' ) ;
        <subcmds> = ('log' | 'fetch' | 'pull' | 'clone' | 'config' | 'help' | 'checkout' | 'checkout move' | 'checkout new' | 'checkout reset' | 'branch' | 'branch remove' | 'branch show' | 'status' | 'status show' | 'add' | 'add updated' | 'add patch' | 'add interactive' | 'diff' | 'diff cashed' | 'rebase' | 'rebase continue' | 'rebase master' | 'rebase develop' | 'rebase managed' | 'checkout master' | 'checkout branch' | 'commit' | 'commit amend' | 'commit modified' | 'commit message' | 'commit patch' | 'commit interactive' | 'commit previous message' | 'ref log' | 'cherry' | 'reset' | 'reset soft' | 'reset hard' | 'reset head' | 'reset hard head' | 'stash' | 'stash list' | 'stash show' | 'stash pop' | 'submodule init' | 'submodule update' ) ;
        <169> = 'versioning' <subcmds> ;
        <subcmds_sysctl> = ('start' | 'stop' | 'enable' | 'disable' | 'help' | 'status' | 'dependencies' | 'units' ) ;
        <170> = 'system control' <subcmds_sysctl> ;
        <171> = ('arguments' | 'quit' | 'list source' | 'where' | 'next' | 'step' | 'return' | 'continue' | 'up stack' | 'until' | 'step over' | 'over' ) ;
        <172> = ('breakpoint' | 'clear' ) (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <312> = ('breakpoint' | 'clear' ) ;
        <173> = 'execute expression' ;
        <174> = 'print' ;
        <175> = ('locals' | 'globals' ) ;
        <176> = ('continue' | 'step out' | 'Step over' | 'step' | 'step into' ) (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20) 'times' ;
        <314> = ('continue' | 'step out' | 'Step over' | 'step' | 'step into' ) (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20) ;
        <313> = ('continue' | 'step out' | 'Step over' | 'step' | 'step into' ) 'times' ;
        <315> = ('continue' | 'step out' | 'Step over' | 'step' | 'step into' ) ;
        <177> = 'insert print macro' ;
        <pkg_mgmt_subcmds> = ('query' | 'query all' | 'query package requirements' | 'install' | 'erase' ) ;
        <178> = 'red package' ;
        <179> = 'red package' <pkg_mgmt_subcmds> ;
        <180> = 'pip' ('freeze' | 'completion' | 'install' | 'list' | 'help' ) ;
        <181> = 'pip option' ('bash' | 'upgrade' | 'outdated' | 'local' | 'no index' | 'find links' ) ;
        <182> = 'yummy' ('provides' | 'install' | 'search' | 'update' | 'remove' | 'clean' | 'clean all' | 'local install' ) ;
        <183> = 'yummy list' ('available' | 'installed' | 'extras' | 'updates' | 'obsoletes' | 'all' | 'recent' ) ;
        <184> = 'yummy' ('enable' | 'disable' ) ;
        <service_names> = ('corrie' | 'pacemaker' | 'PCS' | 'IP tables' | 'agent' | 'firewall de' ) ;
        <185> = <service_names> ('stop' | 'start' | 'status' | 'reload' | 'restart' ) ;
        <common_actions> = ('source' | 'find process' | 'find process file' | 'find files' | 'make archive' | 'extract archive' | 'track archive' | 'read archive' | 'change ownership' | 'change permissions' | 'move files' | 'remove file' | 'network stats' | 'network interfaces' | 'make link' | 'grep' | 'recursive grep' | 'read file' | 'tail file' | 'list command history' | 'execute command' | 'home root' | 'edit' | 'list' | 'list directory' | 'long list' | 'long list directory' | 'make directory' | 'show disk space' | 'echo command' ) ;
        <186> = ('as root' ) <common_actions> ;
        <316> = (('source' | 'find process' | 'find process file' | 'find files' | 'make archive' | 'extract archive' | 'track archive' | 'read archive' | 'change ownership' | 'change permissions' | 'move files' | 'remove file' | 'network stats' | 'network interfaces' | 'make link' | 'grep' | 'recursive grep' | 'read file' | 'tail file' | 'list command history' | 'execute command' | 'home root' | 'edit' | 'list' | 'list directory' | 'long list' | 'long list directory' | 'make directory' | 'show disk space' | 'echo command' ) ) ;
        <187> = 'switch to' ('superuser' | 'user' ) ;
        <317> = 'switch' ('superuser' | 'user' ) ;
        <188> = 'keyac shell' ('superuser' ) ;
        <189> = 'history' ;
        <190> = 'search history' ;
        <191> = 'list history' ;
        <192> = 'break' ;
        <193> = 'break end of file' ;
        <194> = 'escape process' ;
        <195> = ('foreground' | 'background' ) 'process' ;
        <196> = 'double dash' ;
        <197> = 'Bash Tag File Update' ;
        <198> = 'confirm force' ('close' | 'remove' ) ;
        <199> = 'back directory' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <200> = 'enter list' ;
        <201> = 'change absolute directory' ;
        <202> = 'present working directory' ;
        <203> = 'search text' ;
        <204> = 'close shell' ;
        <205> = ('version' | 'short' | 'short yes' | 'long' | 'help' | 'force' | 'continue' | 'yes' ) 'option' ;
        <206> = ('vim' | 'normal' | 'normal brief' ) 'diff' ;
        <207> = 'start environment' (1 | 2 | 3 | 4 | 5) ;
        <208> = 'stop environment' ;
        <209> = 'export' ('test' | 'development' ) 'settings' ;
        <210> = 'get it fetch' ;
        <211> = 'Django' ('shell' | 'database shell' | 'sink' | 'sink input' | 'run' | 'dump' ) ;
        <212> = 'fix enter key' ;
        <213> = 'initialisation scripts' ;
        <214> = 'et cetera' ;
        <215> = 'system config' ;
        <216> = 'my home' ('one' | 'two' ) ;
        <318> = 'my home' ;
        <217> = 'log root' ;
        <218> = 'use a lip' ('pie' ) ;
        <319> = 'use a lip' ;
        <219> = ('manager' | 'dependencies' | 'common' | 'bundles' | 'agent' | 'external' | 'simulator' ) ;
        <220> = 'repeat command' ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <221> = 'repeat command' ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <222> = 'repeat command' ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <223> = 'replay' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) 'commands starting' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) 'back' ;
        <224> = 'Journal control' ;
        <225> = 'firewall command' ;
        <226> = 'service control' ;
        <227> = 'service control new' ;
        <228> = 'go to' ;
        <229> = 'switch directory' ;
        <230> = 'back directory' ;
        <231> = ('shell' | 'go' ) 'back directory' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <320> = ('shell' | 'go' ) 'back directory' ;
        <usage> = ('usage' | 'usage kilobytes' | 'usage megabytes' ) ;
        <232> = 'show disk' <usage> ;
        <233> = 'W get' ;
        <234> = 'cool' ;
        <235> = 'postgres sequel' ;
        <236> = 'engine X' ;
        <237> = 'packet to dump' ;
        <321> = 'packet dump' ;
        <238> = 'remote login' ('root' ) ('cluster' ) ;
        <323> = 'remote login' ('root' ) ;
        <322> = 'remote login' ('cluster' ) ;
        <324> = 'remote login' ;
        <239> = 'multiple get' ;
        <240> = 'local change directory' ;
        <241> = 'local working directory' ;
        <242> = 'public key' ('15' | '11' | '12' ) ('init' | 'tool' ) ;
        <325> = 'public key' ('15' | '11' | '12' ) ;
        <243> = 'skip on' ;
        <244> = ('pool' | 'she said' ) ('history' | 'status' | 'list' | 'destroy' | 'create' ) ('go' ) ;
        <326> = ('pool' | 'she said' ) ('history' | 'status' | 'list' | 'destroy' | 'create' ) ;
        <245> = 'pool' ('import' | 'export' ) ('go' ) ;
        <328> = 'pool' ('import' | 'export' ) ;
        <327> = 'pool' ('go' ) ;
        <329> = 'pool' ;
        <246> = 'pace' ('monitor' | 'resource' | 'resource resource' ) ;
        <247> = 'probe' ;
        <248> = 'check return' ;
        <249> = 'remove target' ;
        <250> = 'list volumes' ;
        <251> = 'cygwin package' ('manager' | 'install' | 'remove' | 'update' | 'upgrade' ) ;
        <252> = 'package' ('manager' | 'install' | 'remove' | 'update' | 'upgrade' ) ;
        <253> = 'find package' ;
        <254> = 'Add' ('link' | 'torrent' | 'magnet' ) ;
        <any> = <1>|<2>|<3>|<4>|<255>|<5>|<256>|<6>|<257>|<7>|<258>|<8>|<9>|<10>|<259>|<11>|<260>|<12>|<261>|<13>|<14>|<262>|<15>|<263>|<16>|<264>|<17>|<266>|<265>|<267>|<18>|<268>|<19>|<269>|<20>|<21>|<22>|<23>|<24>|<25>|<26>|<27>|<270>|<28>|<29>|<30>|<272>|<271>|<273>|<31>|<274>|<32>|<276>|<275>|<277>|<33>|<34>|<35>|<36>|<37>|<38>|<39>|<40>|<278>|<41>|<42>|<279>|<43>|<44>|<280>|<45>|<46>|<47>|<281>|<48>|<49>|<285>|<50>|<286>|<51>|<287>|<52>|<288>|<53>|<54>|<292>|<55>|<56>|<293>|<57>|<294>|<58>|<295>|<59>|<296>|<60>|<297>|<61>|<298>|<62>|<63>|<300>|<299>|<64>|<65>|<66>|<67>|<68>|<69>|<70>|<71>|<72>|<73>|<301>|<74>|<302>|<75>|<76>|<77>|<78>|<79>|<80>|<81>|<82>|<83>|<84>|<85>|<86>|<87>|<88>|<89>|<90>|<303>|<91>|<92>|<93>|<94>|<304>|<95>|<96>|<97>|<98>|<99>|<100>|<101>|<102>|<103>|<104>|<105>|<106>|<107>|<108>|<109>|<110>|<111>|<112>|<113>|<114>|<115>|<116>|<117>|<118>|<119>|<120>|<121>|<122>|<123>|<124>|<125>|<126>|<127>|<128>|<129>|<130>|<131>|<132>|<133>|<134>|<305>|<135>|<306>|<136>|<307>|<137>|<308>|<138>|<139>|<140>|<141>|<142>|<143>|<144>|<309>|<145>|<146>|<147>|<148>|<149>|<150>|<151>|<152>|<153>|<154>|<155>|<156>|<157>|<310>|<158>|<159>|<160>|<311>|<161>|<162>|<163>|<164>|<165>|<166>|<167>|<168>|<169>|<170>|<171>|<172>|<312>|<173>|<174>|<175>|<176>|<314>|<313>|<315>|<177>|<178>|<179>|<180>|<181>|<182>|<183>|<184>|<185>|<186>|<316>|<187>|<317>|<188>|<189>|<190>|<191>|<192>|<193>|<194>|<195>|<196>|<197>|<198>|<199>|<200>|<201>|<202>|<203>|<204>|<205>|<206>|<207>|<208>|<209>|<210>|<211>|<212>|<213>|<214>|<215>|<216>|<318>|<217>|<218>|<319>|<219>|<220>|<221>|<222>|<223>|<224>|<225>|<226>|<227>|<228>|<229>|<230>|<231>|<320>|<232>|<233>|<234>|<235>|<236>|<237>|<321>|<238>|<323>|<322>|<324>|<239>|<240>|<241>|<242>|<325>|<243>|<244>|<326>|<245>|<328>|<327>|<329>|<246>|<247>|<248>|<249>|<250>|<251>|<252>|<253>|<254>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.ruleSet1 = ['sequence']

    def gotBegin(self,moduleInfo):
        # Return if wrong application
        window = matchWindow(moduleInfo,'putty','')
        if not window: return None
        self.firstWord = 0
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        self.deactivateAll()
        title = string.lower(moduleInfo[1])
        if string.find(title,'') >= 0:
            for rule in self.ruleSet1:
                try:
                    self.activate(rule,window)
                except natlink.BadWindow:
                    pass

    def convert_number_word(self, word):
        if   word == '0':
            return '0'
        else:
            return word

    def get_key(self, list_buffer, functional, word):
        if word == 'alpha':
            list_buffer += 'a'
        elif word == 'bravo':
            list_buffer += 'b'
        elif word == 'charlie':
            list_buffer += 'c'
        elif word == 'delta':
            list_buffer += 'd'
        elif word == 'echo':
            list_buffer += 'e'
        elif word == 'foxtrot':
            list_buffer += 'f'
        elif word == 'golf':
            list_buffer += 'g'
        elif word == 'hotel':
            list_buffer += 'h'
        elif word == 'india':
            list_buffer += 'i'
        elif word == 'juliett':
            list_buffer += 'j'
        elif word == 'kilo':
            list_buffer += 'k'
        elif word == 'lima':
            list_buffer += 'l'
        elif word == 'mike':
            list_buffer += 'm'
        elif word == 'november':
            list_buffer += 'n'
        elif word == 'oscar':
            list_buffer += 'o'
        elif word == 'papa':
            list_buffer += 'p'
        elif word == 'quebec':
            list_buffer += 'q'
        elif word == 'romeo':
            list_buffer += 'r'
        elif word == 'sierra':
            list_buffer += 's'
        elif word == 'tango':
            list_buffer += 't'
        elif word == 'uniform':
            list_buffer += 'u'
        elif word == 'victor':
            list_buffer += 'v'
        elif word == 'whiskey':
            list_buffer += 'w'
        elif word == 'xray':
            list_buffer += 'x'
        elif word == 'yankee':
            list_buffer += 'y'
        elif word == 'zulu':
            list_buffer += 'z'
        elif word == '0':
            list_buffer += '0'
        elif word == '1':
            list_buffer += '1'
        elif word == '2':
            list_buffer += '2'
        elif word == '3':
            list_buffer += '3'
        elif word == '4':
            list_buffer += '4'
        elif word == '5':
            list_buffer += '5'
        elif word == '6':
            list_buffer += '6'
        elif word == '7':
            list_buffer += '7'
        elif word == '8':
            list_buffer += '8'
        elif word == '9':
            list_buffer += '9'
        elif word == '!':
            list_buffer += '!'
        elif word == '@':
            list_buffer += '@'
        elif word == '#':
            list_buffer += '#'
        elif word == '$':
            list_buffer += '$'
        elif word == '%':
            list_buffer += '%'
        elif word == '^':
            list_buffer += '^'
        elif word == '&':
            list_buffer += '&'
        elif word == '*':
            list_buffer += '*'
        elif word == '(':
            list_buffer += '('
        elif word == ')':
            list_buffer += ')'
        elif word == '`':
            list_buffer += '`'
        elif word == '~':
            list_buffer += '~'
        elif word == '-':
            list_buffer += '-'
        elif word == '_':
            list_buffer += '_'
        elif word == '=':
            list_buffer += '='
        elif word == '+':
            list_buffer += '+'
        elif word == '\\':
            list_buffer += '\\'
        elif word == '|':
            list_buffer += '|'
        elif word == '[':
            list_buffer += '['
        elif word == '{':
            list_buffer += '{'
        elif word == ']':
            list_buffer += ']'
        elif word == '}':
            list_buffer += '}'
        elif word == ';':
            list_buffer += ';'
        elif word == ':':
            list_buffer += ':'
        elif word == '\'':
            list_buffer += '\''
        elif word == '"':
            list_buffer += '"'
        elif word == ',':
            list_buffer += ','
        elif word == '<':
            list_buffer += '<'
        elif word == '.':
            list_buffer += '.'
        elif word == '>':
            list_buffer += '>'
        elif word == '/':
            list_buffer += '/'
        elif word == '?':
            list_buffer += '?'
        elif word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'Escape':
            list_buffer += 'Esc'
        elif word == 'Home':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
        return list_buffer

    # 'Press' <key>
    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 20, '\'Press\' <key>', e)
            self.firstWord = -1

    # 'Space Bar'
    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_2(words[1:], fullResults)
        except Exception, e:
            handle_error('keys.vch', 24, '\'Space Bar\'', e)
            self.firstWord = -1

    # 'Tab Key'
    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_3(words[1:], fullResults)
        except Exception, e:
            handle_error('keys.vch', 25, '\'Tab Key\'', e)
            self.firstWord = -1

    def get_special(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'escape':
            list_buffer += 'Esc'
        return list_buffer

    def get_mod(self, list_buffer, functional, word):
        if word == 'Shift':
            list_buffer += 'Shift'
        elif word == 'control-key':
            list_buffer += 'Ctrl'
        elif word == 'Alt':
            list_buffer += 'Alt'
        return list_buffer

    def get_nn(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Press' <special> <nn>
    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_special(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys.vch', 37, '\'Press\' <special> <nn>', e)
            self.firstWord = -1

    # (('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape')) <nn>
    def gotResults_255(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Left':
                top_buffer += 'Left'
            elif word == 'Right':
                top_buffer += 'Right'
            elif word == 'Up':
                top_buffer += 'Up'
            elif word == 'Down':
                top_buffer += 'Down'
            elif word == 'space-bar':
                top_buffer += ' '
            elif word == 'tab-key':
                top_buffer += 'Tab'
            elif word == 'Enter':
                top_buffer += 'Enter'
            elif word == 'page-up':
                top_buffer += 'PgUp'
            elif word == 'page-down':
                top_buffer += 'PgDn'
            elif word == 'Backspace':
                top_buffer += 'Backspace'
            elif word == 'delete':
                top_buffer += 'Del'
            elif word == 'escape':
                top_buffer += 'Esc'
            top_buffer += '_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 37, '((\'Left\' | \'Right\' | \'Up\' | \'Down\' | \'space-bar\' | \'tab-key\' | \'Enter\' | \'page-up\' | \'page-down\' | \'Backspace\' | \'delete\' | \'escape\')) <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <key> <nn>
    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys.vch', 38, '\'Press\' <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <key> <nn>
    def gotResults_256(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys.vch', 38, '(\'Shift\' | \'control-key\' | \'Alt\') <key> <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <key> <nn>
    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys.vch', 39, '\'Press\' <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <mod> <key> <nn>
    def gotResults_257(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys.vch', 39, '(\'Shift\' | \'control-key\' | \'Alt\') <mod> <key> <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <mod> <key> <nn>
    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[5 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('keys.vch', 40, '\'Press\' <mod> <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <mod> <mod> <key> <nn>
    def gotResults_258(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys.vch', 40, '(\'Shift\' | \'control-key\' | \'Alt\') <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    def get_0to9(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_2to9(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_1to30(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_direction(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_left_right(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += '{b}'
        elif word == 'Right':
            list_buffer += '{w}'
        return list_buffer

    def get_top_bottom(self, list_buffer, functional, word):
        if word == 'Top':
            list_buffer += '{Shift+h}'
        elif word == 'Bottom':
            list_buffer += '{Shift+l}'
        elif word == 'Middle':
            list_buffer += '{Shift+m}'
        return list_buffer

    # (1..30) <direction>
    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_direction(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[0 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 26, '(1..30) <direction>', e)
            self.firstWord = -1

    # ('Change' | 'Copy') ('Char' | '1' | 'One')
    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_9(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 27, '(\'Change\' | \'Copy\') (\'Char\' | \'1\' | \'One\')', e)
            self.firstWord = -1

    # ('Change' | 'Copy') 'Back 1'
    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_10(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 28, '(\'Change\' | \'Copy\') \'Back 1\'', e)
            self.firstWord = -1

    # ('Change' | 'Copy') 'Back'
    def gotResults_259(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_259(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 28, '(\'Change\' | \'Copy\') \'Back\'', e)
            self.firstWord = -1

    # ('Change' | 'Copy') <1to30> 'Chars'
    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 29, '(\'Change\' | \'Copy\') <1to30> \'Chars\'', e)
            self.firstWord = -1

    # ('Change' | 'Copy') <1to30>
    def gotResults_260(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 29, '(\'Change\' | \'Copy\') <1to30>', e)
            self.firstWord = -1

    # ('Change' | 'Copy') 'Back' <1to30> 'Chars'
    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 30, '(\'Change\' | \'Copy\') \'Back\' <1to30> \'Chars\'', e)
            self.firstWord = -1

    # ('Change' | 'Copy') 'Back' <1to30>
    def gotResults_261(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 30, '(\'Change\' | \'Copy\') \'Back\' <1to30>', e)
            self.firstWord = -1

    # 'Kill' ('Char' | '1' | 'One')
    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_13(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 31, '\'Kill\' (\'Char\' | \'1\' | \'One\')', e)
            self.firstWord = -1

    # 'Kill Back 1'
    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_14(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 32, '\'Kill Back 1\'', e)
            self.firstWord = -1

    # 'Kill Back'
    def gotResults_262(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_262(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 32, '\'Kill Back\'', e)
            self.firstWord = -1

    # 'Kill' <1to30> 'Chars'
    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 33, '\'Kill\' <1to30> \'Chars\'', e)
            self.firstWord = -1

    # 'Kill' <1to30>
    def gotResults_263(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 33, '\'Kill\' <1to30>', e)
            self.firstWord = -1

    # 'Kill Back' <1to30> 'Chars'
    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 34, '\'Kill Back\' <1to30> \'Chars\'', e)
            self.firstWord = -1

    # 'Kill Back' <1to30>
    def gotResults_264(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 34, '\'Kill Back\' <1to30>', e)
            self.firstWord = -1

    # 'Change case' ('back') <1to30>
    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'back':
                when_value += '1'
            if when_value != "":
                when_value2 = ''
                word = fullResults[2 + self.firstWord][0]
                when_value2 = self.get_1to30(when_value2, True, word)
                if when_value2 != "":
                    top_buffer += '{Left_'
                    word = fullResults[2 + self.firstWord][0]
                    top_buffer = self.get_1to30(top_buffer, False, word)
                    top_buffer += '}'
                else:
                    top_buffer += '{Left}'
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value = self.get_1to30(when_value, True, word)
            if when_value != "":
                word = fullResults[2 + self.firstWord][0]
                top_buffer = self.get_1to30(top_buffer, False, word)
                top_buffer += '~'
            else:
                top_buffer += '~'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 35, '\'Change case\' (\'back\') <1to30>', e)
            self.firstWord = -1

    # 'Change case' ('back')
    def gotResults_266(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'back':
                when_value += '1'
            if when_value != "":
                when_value2 = ''
                when_value2 += ''
                if when_value2 != "":
                    top_buffer += '{Left_'
                    top_buffer += ''
                    top_buffer += '}'
                else:
                    top_buffer += '{Left}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
                top_buffer += '~'
            else:
                top_buffer += '~'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_266(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 35, '\'Change case\' (\'back\')', e)
            self.firstWord = -1

    # 'Change case' <1to30>
    def gotResults_265(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                when_value2 = ''
                word = fullResults[1 + self.firstWord][0]
                when_value2 = self.get_1to30(when_value2, True, word)
                if when_value2 != "":
                    top_buffer += '{Left_'
                    word = fullResults[1 + self.firstWord][0]
                    top_buffer = self.get_1to30(top_buffer, False, word)
                    top_buffer += '}'
                else:
                    top_buffer += '{Left}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value = self.get_1to30(when_value, True, word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer = self.get_1to30(top_buffer, False, word)
                top_buffer += '~'
            else:
                top_buffer += '~'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 35, '\'Change case\' <1to30>', e)
            self.firstWord = -1

    # 'Change case'
    def gotResults_267(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                when_value2 = ''
                when_value2 += ''
                if when_value2 != "":
                    top_buffer += '{Left_'
                    top_buffer += ''
                    top_buffer += '}'
                else:
                    top_buffer += '{Left}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
                top_buffer += '~'
            else:
                top_buffer += '~'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_267(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 35, '\'Change case\'', e)
            self.firstWord = -1

    # 'One Word'
    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_18(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 38, '\'One Word\'', e)
            self.firstWord = -1

    # 'Word'
    def gotResults_268(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_268(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 38, '\'Word\'', e)
            self.firstWord = -1

    # 'Back One Word'
    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_19(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 39, '\'Back One Word\'', e)
            self.firstWord = -1

    # 'Back Word'
    def gotResults_269(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_269(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 39, '\'Back Word\'', e)
            self.firstWord = -1

    # <1to30> 'Words'
    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 40, '<1to30> \'Words\'', e)
            self.firstWord = -1

    # 'Back' <1to30> 'Words'
    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 41, '\'Back\' <1to30> \'Words\'', e)
            self.firstWord = -1

    # <edit_mode> 'Word'
    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 42, '<edit_mode> \'Word\'', e)
            self.firstWord = -1

    # <edit_mode> <1to30> 'Words'
    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 43, '<edit_mode> <1to30> \'Words\'', e)
            self.firstWord = -1

    # <edit_mode> 'Back Word'
    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 44, '<edit_mode> \'Back Word\'', e)
            self.firstWord = -1

    # <edit_mode> 'Back' <1to30> 'Words'
    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 45, '<edit_mode> \'Back\' <1to30> \'Words\'', e)
            self.firstWord = -1

    # <edit_mode> 'Next Word'
    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'w'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 46, '<edit_mode> \'Next Word\'', e)
            self.firstWord = -1

    def get_line_actions(self, list_buffer, functional, word):
        if word == 'Move to':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '.m'
        elif word == 'Copy to':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '.co'
        elif word == 'Change':
            list_buffer += 'cc'
        elif word == 'Kill':
            list_buffer += 'dd'
        elif word == 'Copy':
            list_buffer += 'yy'
        elif word == 'Sub':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '.s///{Left_2}'
        elif word == 'Duplicate':
            list_buffer += 'yyp'
        elif word == 'Start':
            list_buffer += '\\^i'
        elif word == 'Append':
            list_buffer += 'i{end}'
        elif word == 'beginning':
            list_buffer += '20li'
        elif word == 'middle':
            list_buffer += '40li'
        elif word == 'near the end':
            list_buffer += '60li'
        elif word == 'vim comment':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '.s/^/#/{enter}'
        elif word == 'vim remove comment':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '.s/#//{enter}'
        elif word == 'New Here':
            list_buffer += 'i{enter}'
        elif word == 'New insert':
            list_buffer += 'o'
        elif word == 'New Back':
            list_buffer += 'O'
        elif word == 'Append semicolon':
            list_buffer += '$i;'
        return list_buffer

    def get_edit_mode(self, list_buffer, functional, word):
        if word == 'Change':
            list_buffer += '{c}'
        elif word == 'Kill':
            list_buffer += '{d}'
        elif word == 'Copy':
            list_buffer += '{y}'
        return list_buffer

    # <line_actions> 'this Line'
    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_line_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 59, '<line_actions> \'this Line\'', e)
            self.firstWord = -1

    # <line_actions> 'Line'
    def gotResults_270(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_line_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 59, '<line_actions> \'Line\'', e)
            self.firstWord = -1

    # 'Swap' ('Line' | 'Char')
    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += 'd'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Line':
                top_buffer += 'd'
            elif word == 'Char':
                top_buffer += 'l'
            top_buffer += 'p'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_28(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 61, '\'Swap\' (\'Line\' | \'Char\')', e)
            self.firstWord = -1

    # 'Swap back' ('Line' | 'Char')
    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '%a=="d"'
            eval_template2_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Line':
                eval_template2_arg2 += 'd'
            elif word == 'Char':
                eval_template2_arg2 += 'l'
            when_value += eval_template(eval_template2_arg1, eval_template2_arg2)
            if when_value != "":
                top_buffer += '{Up}'
            else:
                top_buffer += '{Left}'
            top_buffer += 'd'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Line':
                top_buffer += 'd'
            elif word == 'Char':
                top_buffer += 'l'
            top_buffer += 'p'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_29(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 62, '\'Swap back\' (\'Line\' | \'Char\')', e)
            self.firstWord = -1

    # <edit_mode> ('Beginning' | 'Start' | 'End') 'Line Here'
    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Beginning':
                when_value += '0'
            elif word == 'Start':
                when_value += '^'
            elif word == 'End':
                when_value += '$'
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                if word == 'Beginning':
                    top_buffer += '0'
                elif word == 'Start':
                    top_buffer += '^'
                elif word == 'End':
                    top_buffer += '$'
            else:
                top_buffer += '$'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 64, '<edit_mode> (\'Beginning\' | \'Start\' | \'End\') \'Line Here\'', e)
            self.firstWord = -1

    # <edit_mode> ('Beginning' | 'Start' | 'End') 'Line'
    def gotResults_272(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Beginning':
                when_value += '0'
            elif word == 'Start':
                when_value += '^'
            elif word == 'End':
                when_value += '$'
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                if word == 'Beginning':
                    top_buffer += '0'
                elif word == 'Start':
                    top_buffer += '^'
                elif word == 'End':
                    top_buffer += '$'
            else:
                top_buffer += '$'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 64, '<edit_mode> (\'Beginning\' | \'Start\' | \'End\') \'Line\'', e)
            self.firstWord = -1

    # <edit_mode> ('Beginning' | 'Start' | 'End') 'Here'
    def gotResults_271(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Beginning':
                when_value += '0'
            elif word == 'Start':
                when_value += '^'
            elif word == 'End':
                when_value += '$'
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                if word == 'Beginning':
                    top_buffer += '0'
                elif word == 'Start':
                    top_buffer += '^'
                elif word == 'End':
                    top_buffer += '$'
            else:
                top_buffer += '$'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 64, '<edit_mode> (\'Beginning\' | \'Start\' | \'End\') \'Here\'', e)
            self.firstWord = -1

    # <edit_mode> ('Beginning' | 'Start' | 'End')
    def gotResults_273(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Beginning':
                when_value += '0'
            elif word == 'Start':
                when_value += '^'
            elif word == 'End':
                when_value += '$'
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                if word == 'Beginning':
                    top_buffer += '0'
                elif word == 'Start':
                    top_buffer += '^'
                elif word == 'End':
                    top_buffer += '$'
            else:
                top_buffer += '$'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 64, '<edit_mode> (\'Beginning\' | \'Start\' | \'End\')', e)
            self.firstWord = -1

    # 'Blank' ('back' | 'insert') 'Line'
    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'back':
                top_buffer += 'O{down}'
            elif word == 'insert':
                top_buffer += 'o{up}'
            top_buffer += '{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_31(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 65, '\'Blank\' (\'back\' | \'insert\') \'Line\'', e)
            self.firstWord = -1

    # 'Blank' ('back' | 'insert')
    def gotResults_274(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'back':
                top_buffer += 'O{down}'
            elif word == 'insert':
                top_buffer += 'o{up}'
            top_buffer += '{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_274(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 65, '\'Blank\' (\'back\' | \'insert\')', e)
            self.firstWord = -1

    # 'Join' ('Back' | 'Next') 'Line'
    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Back':
                when_value += 'Up'
            elif word == 'Next':
                when_value += 'Space'
            if when_value != "":
                top_buffer += '{'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Back':
                    top_buffer += 'Up'
                elif word == 'Next':
                    top_buffer += 'Space'
                top_buffer += '}'
            top_buffer += 'J'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_32(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 66, '\'Join\' (\'Back\' | \'Next\') \'Line\'', e)
            self.firstWord = -1

    # 'Join' ('Back' | 'Next')
    def gotResults_276(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Back':
                when_value += 'Up'
            elif word == 'Next':
                when_value += 'Space'
            if when_value != "":
                top_buffer += '{'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Back':
                    top_buffer += 'Up'
                elif word == 'Next':
                    top_buffer += 'Space'
                top_buffer += '}'
            top_buffer += 'J'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_276(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 66, '\'Join\' (\'Back\' | \'Next\')', e)
            self.firstWord = -1

    # 'Join Line'
    def gotResults_275(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{'
                top_buffer += ''
                top_buffer += '}'
            top_buffer += 'J'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_275(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 66, '\'Join Line\'', e)
            self.firstWord = -1

    # 'Join'
    def gotResults_277(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{'
                top_buffer += ''
                top_buffer += '}'
            top_buffer += 'J'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_277(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 66, '\'Join\'', e)
            self.firstWord = -1

    def get_relative_range_actions(self, list_buffer, functional, word):
        if word == 'Change':
            list_buffer += 'cc'
        elif word == 'Kill':
            list_buffer += 'dd'
        elif word == 'Copy':
            list_buffer += 'yy'
        elif word == 'Move to':
            list_buffer += 'm'
        elif word == 'Copy to':
            list_buffer += 'co'
        elif word == 'duplicate':
            list_buffer += 'yyp'
        elif word == 'indent':
            list_buffer += '>>g;'
        elif word == 'reverse indent':
            list_buffer += '<<g;'
        return list_buffer

    # <relative_range_actions> ('Next' | 'Back') 'Line'
    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            if word == 'Next':
                top_buffer += '+'
            elif word == 'Back':
                top_buffer += '-'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 78, '<relative_range_actions> (\'Next\' | \'Back\') \'Line\'', e)
            self.firstWord = -1

    # <relative_range_actions> 2..30 'Lines'
    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 79, '<relative_range_actions> 2..30 \'Lines\'', e)
            self.firstWord = -1

    # <relative_range_actions> 'Back' 2..30 'Lines'
    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Up_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[2 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 80, '<relative_range_actions> \'Back\' 2..30 \'Lines\'', e)
            self.firstWord = -1

    def get_relative_range_commands(self, list_buffer, functional, word):
        if word == 'Sub':
            list_buffer += 's///gc{Left_4}'
        elif word == 'Start':
            list_buffer += '{enter}i'
        elif word == 'Append':
            list_buffer += '{enter}i{end}'
        elif word == 'copy here':
            list_buffer += 'co.'
        elif word == 'comment':
            list_buffer += 's/^/#/{enter}'
        elif word == 'remove comment':
            list_buffer += 's/#//{enter}'
        return list_buffer

    # <relative_range_commands> ('Next' | 'Back') 'Line'
    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            if word == 'Next':
                top_buffer += '+'
            elif word == 'Back':
                top_buffer += '-'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += ':'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_commands(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 86, '<relative_range_commands> (\'Next\' | \'Back\') \'Line\'', e)
            self.firstWord = -1

    # <relative_range_commands> 2..30 'Lines'
    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += ':.,+'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a-1'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += self.convert_number_word(word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_commands(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 87, '<relative_range_commands> 2..30 \'Lines\'', e)
            self.firstWord = -1

    # <relative_range_commands> 'Back' 2..30 'Lines'
    def gotResults_38(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += ':-'
            word = fullResults[2 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += ',-1'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_commands(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 88, '<relative_range_commands> \'Back\' 2..30 \'Lines\'', e)
            self.firstWord = -1

    def get_range_actions(self, list_buffer, functional, word):
        if word == 'Move to':
            list_buffer += 'm'
        elif word == 'Copy to':
            list_buffer += 'co'
        elif word == 'Change':
            list_buffer += 'c'
        elif word == 'Kill':
            list_buffer += 'd'
        elif word == 'Copy':
            list_buffer += 'y'
        elif word == 'Sub':
            list_buffer += 's///'
        elif word == 'copy here':
            list_buffer += 'co.'
        elif word == 'comment':
            list_buffer += 's/^/#/'
        elif word == 'remove comment':
            list_buffer += 's/#//'
        return list_buffer

    # <range_actions> 'Range'
    def gotResults_39(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_range_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{Home}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 95, '<range_actions> \'Range\'', e)
            self.firstWord = -1

    def get_insert(self, list_buffer, functional, word):
        if word == 'insert':
            list_buffer += 'I'
        elif word == 'append':
            list_buffer += 'A'
        return list_buffer

    # 'Flow' ('Start' | 'Append') <insert>
    def gotResults_40(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Start':
                top_buffer += 'gg'
            elif word == 'Append':
                top_buffer += 'G'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '20'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_insert(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 99, '\'Flow\' (\'Start\' | \'Append\') <insert>', e)
            self.firstWord = -1

    # 'Flow' ('Start' | 'Append')
    def gotResults_278(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Start':
                top_buffer += 'gg'
            elif word == 'Append':
                top_buffer += 'G'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '20'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_278(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 99, '\'Flow\' (\'Start\' | \'Append\')', e)
            self.firstWord = -1

    # <edit_mode> ('Flow Here' | 'Flow All' | 'Back Flow Here')
    def gotResults_41(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            if word == 'Flow Here':
                top_buffer += '.,$'
            elif word == 'Flow All':
                top_buffer += '0,$'
            elif word == 'Back Flow Here':
                top_buffer += '0,.'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 100, '<edit_mode> (\'Flow Here\' | \'Flow All\' | \'Back Flow Here\')', e)
            self.firstWord = -1

    # ('Indent' | 'reverse indent') ('Line' | 'Range') 1..9
    def gotResults_42(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                word = fullResults[2 + self.firstWord][0]
                limit2 += self.convert_number_word(word)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ':'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
                    word = fullResults[0 + self.firstWord][0]
                    if word == 'Indent':
                        top_buffer += '>'
                    elif word == 'reverse indent':
                        top_buffer += '<'
                    word = fullResults[1 + self.firstWord][0]
                    if word == 'Line':
                        top_buffer += '{enter}'
                    elif word == 'Range':
                        top_buffer += '{Left}'
            else:
                top_buffer += '{esc}'
                top_buffer += ':'
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '200'
                saved_firstWord = self.firstWord
                call_Dragon('Wait', 'i', [dragon2_arg1])
                self.firstWord = saved_firstWord
                word = fullResults[0 + self.firstWord][0]
                if word == 'Indent':
                    top_buffer += '>'
                elif word == 'reverse indent':
                    top_buffer += '<'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Line':
                    top_buffer += '{enter}'
                elif word == 'Range':
                    top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_42(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 103, '(\'Indent\' | \'reverse indent\') (\'Line\' | \'Range\') 1..9', e)
            self.firstWord = -1

    # ('Indent' | 'reverse indent') ('Line' | 'Range')
    def gotResults_279(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ':'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
                    word = fullResults[0 + self.firstWord][0]
                    if word == 'Indent':
                        top_buffer += '>'
                    elif word == 'reverse indent':
                        top_buffer += '<'
                    word = fullResults[1 + self.firstWord][0]
                    if word == 'Line':
                        top_buffer += '{enter}'
                    elif word == 'Range':
                        top_buffer += '{Left}'
            else:
                top_buffer += '{esc}'
                top_buffer += ':'
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '200'
                saved_firstWord = self.firstWord
                call_Dragon('Wait', 'i', [dragon2_arg1])
                self.firstWord = saved_firstWord
                word = fullResults[0 + self.firstWord][0]
                if word == 'Indent':
                    top_buffer += '>'
                elif word == 'reverse indent':
                    top_buffer += '<'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Line':
                    top_buffer += '{enter}'
                elif word == 'Range':
                    top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_279(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 103, '(\'Indent\' | \'reverse indent\') (\'Line\' | \'Range\')', e)
            self.firstWord = -1

    def get_sub_action(self, list_buffer, functional, word):
        if word == 'all':
            list_buffer += '%s'
        elif word == 'here':
            list_buffer += '.,$s'
        elif word == 'back here':
            list_buffer += '0,.s'
        return list_buffer

    # ('sub' | 'substitute') <sub_action>
    def gotResults_43(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_sub_action(top_buffer, False, word)
            top_buffer += '///gc'
            limit = ''
            limit += '4'
            for i in range(to_long(limit)):
                top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 106, '(\'sub\' | \'substitute\') <sub_action>', e)
            self.firstWord = -1

    # ('edit' | 'editor') ('cancel' | 'redo') <2to9>
    def gotResults_44(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value = self.get_2to9(when_value, True, word)
            if when_value != "":
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a+1'
                eval_template3_arg2 = ''
                word = fullResults[2 + self.firstWord][0]
                eval_template3_arg2 = self.get_2to9(eval_template3_arg2, True, word)
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
                    word = fullResults[1 + self.firstWord][0]
                    if word == 'cancel':
                        top_buffer += 'u'
                    elif word == 'redo':
                        top_buffer += '{ctrl+r}'
            else:
                limit2 = ''
                limit2 += '1'
                for i in range(to_long(limit2)):
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '100'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
                    word = fullResults[1 + self.firstWord][0]
                    if word == 'cancel':
                        top_buffer += 'u'
                    elif word == 'redo':
                        top_buffer += '{ctrl+r}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 110, '(\'edit\' | \'editor\') (\'cancel\' | \'redo\') <2to9>', e)
            self.firstWord = -1

    # ('edit' | 'editor') ('cancel' | 'redo')
    def gotResults_280(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a+1'
                eval_template3_arg2 = ''
                eval_template3_arg2 += ''
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
                    word = fullResults[1 + self.firstWord][0]
                    if word == 'cancel':
                        top_buffer += 'u'
                    elif word == 'redo':
                        top_buffer += '{ctrl+r}'
            else:
                limit2 = ''
                limit2 += '1'
                for i in range(to_long(limit2)):
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '100'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
                    word = fullResults[1 + self.firstWord][0]
                    if word == 'cancel':
                        top_buffer += 'u'
                    elif word == 'redo':
                        top_buffer += '{ctrl+r}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_280(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 110, '(\'edit\' | \'editor\') (\'cancel\' | \'redo\')', e)
            self.firstWord = -1

    # ('change') ('inner' | 'outer') ('brackets' | 'braces' | 'square brackets' | 'doc string' | 'quotes')
    def gotResults_45(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += 't'
            word = fullResults[2 + self.firstWord][0]
            if word == 'brackets':
                top_buffer += '('
            elif word == 'braces':
                top_buffer += '{'
            elif word == 'square brackets':
                top_buffer += '['
            elif word == 'doc string':
                top_buffer += '"""'
            elif word == 'quotes':
                top_buffer += '"'
            top_buffer += '{Right 2}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'vi'
            word = fullResults[2 + self.firstWord][0]
            if word == 'brackets':
                top_buffer += '('
            elif word == 'braces':
                top_buffer += '{'
            elif word == 'square brackets':
                top_buffer += '['
            elif word == 'doc string':
                top_buffer += '"""'
            elif word == 'quotes':
                top_buffer += '"'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_45(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 118, '(\'change\') (\'inner\' | \'outer\') (\'brackets\' | \'braces\' | \'square brackets\' | \'doc string\' | \'quotes\')', e)
            self.firstWord = -1

    # 'Start macro'
    def gotResults_46(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}qz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_46(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 121, '\'Start macro\'', e)
            self.firstWord = -1

    # 'Repeat macro' 1..9 'times'
    def gotResults_47(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '{shift+'
            top_buffer += '\''
            top_buffer += '}z'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_47(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 123, '\'Repeat macro\' 1..9 \'times\'', e)
            self.firstWord = -1

    # 'Repeat macro'
    def gotResults_281(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ''
            top_buffer += '{shift+'
            top_buffer += '\''
            top_buffer += '}z'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_281(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 123, '\'Repeat macro\'', e)
            self.firstWord = -1

    def get_text_actions(self, list_buffer, functional, word):
        if word == 'Paste':
            list_buffer += 'p'
        elif word == 'Paste Back':
            list_buffer += 'P'
        elif word == 'Insert':
            list_buffer += 'i'
        elif word == 'Append here':
            list_buffer += 'a'
        elif word == 'Append':
            list_buffer += 'A'
        elif word == 'Substitute':
            list_buffer += 's'
        elif word == 'Replace':
            list_buffer += 'R'
        elif word == 'diff push':
            list_buffer += 'dp'
        elif word == 'diff pull':
            list_buffer += 'do'
        elif word == 'diff next':
            list_buffer += '\\]c'
        elif word == 'diff back':
            list_buffer += '\\[c'
        elif word == 'Format':
            list_buffer += 'Q'
        elif word == 'Normal mode':
            pass  # no actions
        elif word == 'visual mode':
            list_buffer += '{ctrl+v}'
        return list_buffer

    # (('Paste' | 'Paste Back' | 'Insert' | 'Append here' | 'Append' | 'Substitute' | 'Replace' | 'diff push' | 'diff pull' | 'diff next' | 'diff back' | 'Format' | 'Normal mode' | 'visual mode'))
    def gotResults_48(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Paste':
                top_buffer += 'p'
            elif word == 'Paste Back':
                top_buffer += 'P'
            elif word == 'Insert':
                top_buffer += 'i'
            elif word == 'Append here':
                top_buffer += 'a'
            elif word == 'Append':
                top_buffer += 'A'
            elif word == 'Substitute':
                top_buffer += 's'
            elif word == 'Replace':
                top_buffer += 'R'
            elif word == 'diff push':
                top_buffer += 'dp'
            elif word == 'diff pull':
                top_buffer += 'do'
            elif word == 'diff next':
                top_buffer += '\\]c'
            elif word == 'diff back':
                top_buffer += '\\[c'
            elif word == 'Format':
                top_buffer += 'Q'
            elif word == 'Normal mode':
                pass  # no actions
            elif word == 'visual mode':
                top_buffer += '{ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_48(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 130, '((\'Paste\' | \'Paste Back\' | \'Insert\' | \'Append here\' | \'Append\' | \'Substitute\' | \'Replace\' | \'diff push\' | \'diff pull\' | \'diff next\' | \'diff back\' | \'Format\' | \'Normal mode\' | \'visual mode\'))', e)
            self.firstWord = -1

    def get_line_mod(self, list_buffer, functional, word):
        if word == 'Start':
            list_buffer += 'zzI'
        elif word == 'Append':
            list_buffer += 'zzA'
        elif word == 'Sub':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += 's///{Left_2}'
        elif word == 'Scroll to bottom':
            list_buffer += 'zb'
        elif word == 'Scroll bottom':
            list_buffer += 'zb'
        elif word == 'Scroll to top':
            list_buffer += 'zt'
        elif word == 'Scroll top':
            list_buffer += 'zt'
        elif word == 'Scroll to middle':
            list_buffer += 'zz'
        elif word == 'Scroll middle':
            list_buffer += 'zz'
        elif word == 'beginning':
            list_buffer += '20li'
        elif word == 'middlie':
            list_buffer += '40li'
        elif word == 'end':
            list_buffer += '60li'
        elif word == 'New back':
            list_buffer += 'zzO'
        elif word == 'insert':
            list_buffer += 'zzo'
        elif word == 'Change':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '.c{enter}'
            list_buffer += '\'v'
        elif word == 'Kill':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '.d{enter}'
            list_buffer += '\'v'
        elif word == 'Copy':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '.y{enter}'
            list_buffer += '\'v'
        elif word == 'Paste':
            list_buffer += 'p'
            list_buffer += '\'v'
        elif word == 'Paste Back':
            list_buffer += 'P'
            list_buffer += '\'v'
        elif word == 'Move to':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '.m'
        elif word == 'copy here':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '.y{enter}'
            list_buffer += '\'v'
            list_buffer += 'p'
        elif word == 'indent':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '>{enter}'
            list_buffer += '\'v'
        elif word == 'reverse indent':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '<{enter}'
            list_buffer += '\'v'
        elif word == 'Comment':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += 's/^/#/{enter}'
            list_buffer += '\'v'
        elif word == 'Remove Comment':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += 's/#//{enter}'
            list_buffer += '\'v'
        elif word == 'Blank back':
            list_buffer += 'O{esc}'
            list_buffer += '\'v'
        elif word == 'Blank insert':
            list_buffer += 'o{esc}'
            list_buffer += '\'v'
        elif word == 'touch':
            list_buffer += 'i'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += ' '
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '{Left}'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '{Del}'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '{esc}'
            list_buffer += '\'v'
        return list_buffer

    # 'line' <line_mod> <0to9>
    def gotResults_49(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_0to9(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_mod(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 166, '\'line\' <line_mod> <0to9>', e)
            self.firstWord = -1

    # 'line' <0to9>
    def gotResults_285(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_0to9(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 166, '\'line\' <0to9>', e)
            self.firstWord = -1

    # 'line' <line_mod> <0to9> <0to9>
    def gotResults_50(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_mod(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 167, '\'line\' <line_mod> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <0to9> <0to9>
    def gotResults_286(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 167, '\'line\' <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <line_mod> <0to9> <0to9> <0to9>
    def gotResults_51(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_mod(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('vim.vch', 168, '\'line\' <line_mod> <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <0to9> <0to9> <0to9>
    def gotResults_287(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 168, '\'line\' <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <line_mod> <0to9> <0to9> <0to9> <0to9>
    def gotResults_52(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg2 = self.get_0to9(eval_template_arg2, True, word)
            eval_template_arg3 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[5 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_mod(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('vim.vch', 169, '\'line\' <line_mod> <0to9> <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <0to9> <0to9> <0to9> <0to9>
    def gotResults_288(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 = self.get_0to9(eval_template_arg2, True, word)
            eval_template_arg3 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('vim.vch', 169, '\'line\' <0to9> <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    def get_navigation_actions(self, list_buffer, functional, word):
        if word == 'List changes':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += 'changes'
        elif word == 'back change':
            list_buffer += 'g;'
        elif word == 'Undo jump':
            list_buffer += '``'
        elif word == 'return from':
            list_buffer += '\'\''
        elif word == 'Set mark':
            list_buffer += 'mz'
        elif word == 'Goto mark':
            list_buffer += '\'zi'
        elif word == 'Append back':
            list_buffer += '-'
            list_buffer += '$'
            list_buffer += 'i{Del}'
        elif word == 'Append next':
            list_buffer += '+'
            list_buffer += '$'
            list_buffer += 'i{Del}'
        elif word == 'Start back':
            list_buffer += '-i'
        elif word == 'Start next':
            list_buffer += '+i'
        elif word == 'Match bracket':
            list_buffer += '%'
        elif word == 'Scroll to bottom':
            list_buffer += 'zb'
        elif word == 'Scroll bottom':
            list_buffer += 'zb'
        elif word == 'Scroll to top':
            list_buffer += 'zt'
        elif word == 'Scroll top':
            list_buffer += 'zt'
        elif word == 'Scroll to middle':
            list_buffer += 'zz'
        elif word == 'Scroll middle':
            list_buffer += 'zz'
        return list_buffer

    # (('List changes' | 'back change' | 'Undo jump' | 'return from' | 'Set mark' | 'Goto mark' | 'Append back' | 'Append next' | 'Start back' | 'Start next' | 'Match bracket' | 'Scroll to bottom' | 'Scroll bottom' | 'Scroll to top' | 'Scroll top' | 'Scroll to middle' | 'Scroll middle'))
    def gotResults_53(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'List changes':
                top_buffer += ':'
                top_buffer = do_flush(False, top_buffer);
                dragon_arg1 = ''
                dragon_arg1 += '200'
                saved_firstWord = self.firstWord
                call_Dragon('Wait', 'i', [dragon_arg1])
                self.firstWord = saved_firstWord
                top_buffer += 'changes'
            elif word == 'back change':
                top_buffer += 'g;'
            elif word == 'Undo jump':
                top_buffer += '``'
            elif word == 'return from':
                top_buffer += '\'\''
            elif word == 'Set mark':
                top_buffer += 'mz'
            elif word == 'Goto mark':
                top_buffer += '\'zi'
            elif word == 'Append back':
                top_buffer += '-'
                top_buffer += '$'
                top_buffer += 'i{Del}'
            elif word == 'Append next':
                top_buffer += '+'
                top_buffer += '$'
                top_buffer += 'i{Del}'
            elif word == 'Start back':
                top_buffer += '-i'
            elif word == 'Start next':
                top_buffer += '+i'
            elif word == 'Match bracket':
                top_buffer += '%'
            elif word == 'Scroll to bottom':
                top_buffer += 'zb'
            elif word == 'Scroll bottom':
                top_buffer += 'zb'
            elif word == 'Scroll to top':
                top_buffer += 'zt'
            elif word == 'Scroll top':
                top_buffer += 'zt'
            elif word == 'Scroll to middle':
                top_buffer += 'zz'
            elif word == 'Scroll middle':
                top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_53(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 181, '((\'List changes\' | \'back change\' | \'Undo jump\' | \'return from\' | \'Set mark\' | \'Goto mark\' | \'Append back\' | \'Append next\' | \'Start back\' | \'Start next\' | \'Match bracket\' | \'Scroll to bottom\' | \'Scroll bottom\' | \'Scroll to top\' | \'Scroll top\' | \'Scroll to middle\' | \'Scroll middle\'))', e)
            self.firstWord = -1

    # 'Halfpage' ('Up' | 'Down')
    def gotResults_54(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Up':
                when_value += 'u'
            elif word == 'Down':
                when_value += 'd'
            if when_value != "":
                top_buffer += '{Ctrl+'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Up':
                    top_buffer += 'u'
                elif word == 'Down':
                    top_buffer += 'd'
                top_buffer += '}'
            else:
                top_buffer += '{Ctrl+d}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_54(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 182, '\'Halfpage\' (\'Up\' | \'Down\')', e)
            self.firstWord = -1

    # 'Halfpage'
    def gotResults_292(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{Ctrl+'
                top_buffer += ''
                top_buffer += '}'
            else:
                top_buffer += '{Ctrl+d}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_292(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 182, '\'Halfpage\'', e)
            self.firstWord = -1

    # 'Page' <top_bottom>
    def gotResults_55(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_top_bottom(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 183, '\'Page\' <top_bottom>', e)
            self.firstWord = -1

    # 'leap back' <printable> 1..9
    def gotResults_56(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'F'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                word = fullResults[2 + self.firstWord][0]
                eval_template3_arg2 += self.convert_number_word(word)
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 188, '\'leap back\' <printable> 1..9', e)
            self.firstWord = -1

    # 'leap back' <printable>
    def gotResults_293(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'F'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                eval_template3_arg2 += ''
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 188, '\'leap back\' <printable>', e)
            self.firstWord = -1

    # 'leap' <printable> 1..9
    def gotResults_57(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'f'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                word = fullResults[2 + self.firstWord][0]
                eval_template3_arg2 += self.convert_number_word(word)
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 189, '\'leap\' <printable> 1..9', e)
            self.firstWord = -1

    # 'leap' <printable>
    def gotResults_294(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'f'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                eval_template3_arg2 += ''
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 189, '\'leap\' <printable>', e)
            self.firstWord = -1

    # 'leap before' <printable> 1..9
    def gotResults_58(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 't'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                word = fullResults[2 + self.firstWord][0]
                eval_template3_arg2 += self.convert_number_word(word)
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 190, '\'leap before\' <printable> 1..9', e)
            self.firstWord = -1

    # 'leap before' <printable>
    def gotResults_295(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 't'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                eval_template3_arg2 += ''
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 190, '\'leap before\' <printable>', e)
            self.firstWord = -1

    # 'leap back cap' <printable> 1..9
    def gotResults_59(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'F{shift+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            top_buffer += '}'
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                word = fullResults[2 + self.firstWord][0]
                eval_template3_arg2 += self.convert_number_word(word)
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 192, '\'leap back cap\' <printable> 1..9', e)
            self.firstWord = -1

    # 'leap back cap' <printable>
    def gotResults_296(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'F{shift+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            top_buffer += '}'
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                eval_template3_arg2 += ''
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 192, '\'leap back cap\' <printable>', e)
            self.firstWord = -1

    # 'leap cap' <printable> 1..9
    def gotResults_60(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'f{shift+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            top_buffer += '}'
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                word = fullResults[2 + self.firstWord][0]
                eval_template3_arg2 += self.convert_number_word(word)
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 193, '\'leap cap\' <printable> 1..9', e)
            self.firstWord = -1

    # 'leap cap' <printable>
    def gotResults_297(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'f{shift+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            top_buffer += '}'
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                eval_template3_arg2 += ''
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 193, '\'leap cap\' <printable>', e)
            self.firstWord = -1

    # 'leap before cap' <printable> 1..9
    def gotResults_61(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 't{shift+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            top_buffer += '}'
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                word = fullResults[2 + self.firstWord][0]
                eval_template3_arg2 += self.convert_number_word(word)
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 194, '\'leap before cap\' <printable> 1..9', e)
            self.firstWord = -1

    # 'leap before cap' <printable>
    def gotResults_298(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 't{shift+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            top_buffer += '}'
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                eval_template3_arg1 = ''
                eval_template3_arg1 += '%a-1'
                eval_template3_arg2 = ''
                eval_template3_arg2 += ''
                limit2 += eval_template(eval_template3_arg1, eval_template3_arg2)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 194, '\'leap before cap\' <printable>', e)
            self.firstWord = -1

    # 'leap next'
    def gotResults_62(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_62(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 195, '\'leap next\'', e)
            self.firstWord = -1

    # 'leap combo' <printable> <printable> <printable> <printable>
    def gotResults_63(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '/'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            top_buffer += '{enter}i'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('vim.vch', 197, '\'leap combo\' <printable> <printable> <printable> <printable>', e)
            self.firstWord = -1

    # 'leap combo' <printable> <printable> <printable>
    def gotResults_300(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '/'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            top_buffer += ''
            top_buffer += '{enter}i'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 197, '\'leap combo\' <printable> <printable> <printable>', e)
            self.firstWord = -1

    # 'leap combo' <printable> <printable>
    def gotResults_299(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '/'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            top_buffer += ''
            top_buffer += ''
            top_buffer += '{enter}i'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 197, '\'leap combo\' <printable> <printable>', e)
            self.firstWord = -1

    # 'Search' <_anything>
    def gotResults_64(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '/'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '\\c'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 202, '\'Search\' <_anything>', e)
            self.firstWord = -1

    # 'Search go' <_anything>
    def gotResults_65(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '/\\c'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 203, '\'Search go\' <_anything>', e)
            self.firstWord = -1

    # 'clear Search'
    def gotResults_66(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '/zzz'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_66(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 204, '\'clear Search\'', e)
            self.firstWord = -1

    # 'shell command'
    def gotResults_67(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}:!'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_67(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 207, '\'shell command\'', e)
            self.firstWord = -1

    # 'Make'
    def gotResults_68(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'make'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_68(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 208, '\'Make\'', e)
            self.firstWord = -1

    # 'Vim Update Tag File'
    def gotResults_69(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '!ctags -R --c++-kinds=+pl --fields=+iaS --extra=+q .'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_69(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 209, '\'Vim Update Tag File\'', e)
            self.firstWord = -1

    # 'List errors'
    def gotResults_70(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'clist'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_70(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 210, '\'List errors\'', e)
            self.firstWord = -1

    # 'Next error'
    def gotResults_71(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'cn'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_71(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 211, '\'Next error\'', e)
            self.firstWord = -1

    # 'back error'
    def gotResults_72(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'cp'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_72(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 212, '\'back error\'', e)
            self.firstWord = -1

    # ('Save' | 'Close' | 'save and close') 'file' ('confirm')
    def gotResults_73(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[0 + self.firstWord][0]
            if word == 'Save':
                top_buffer += 'w'
            elif word == 'Close':
                top_buffer += 'q'
            elif word == 'save and close':
                top_buffer += 'wq'
            word = fullResults[2 + self.firstWord][0]
            if word == 'confirm':
                top_buffer += '!'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_73(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 213, '(\'Save\' | \'Close\' | \'save and close\') \'file\' (\'confirm\')', e)
            self.firstWord = -1

    # ('Save' | 'Close' | 'save and close') 'file'
    def gotResults_301(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[0 + self.firstWord][0]
            if word == 'Save':
                top_buffer += 'w'
            elif word == 'Close':
                top_buffer += 'q'
            elif word == 'save and close':
                top_buffer += 'wq'
            top_buffer += ''
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_301(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 213, '(\'Save\' | \'Close\' | \'save and close\') \'file\'', e)
            self.firstWord = -1

    # 'back command' 1..9
    def gotResults_74(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                word = fullResults[1 + self.firstWord][0]
                limit2 += self.convert_number_word(word)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ':'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
                    top_buffer += ''
                    top_buffer += '{up}{enter}'
            else:
                top_buffer += '{Esc}'
                top_buffer += ':'
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '200'
                saved_firstWord = self.firstWord
                call_Dragon('Wait', 'i', [dragon2_arg1])
                self.firstWord = saved_firstWord
                top_buffer += ''
                top_buffer += '{up}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_74(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 217, '\'back command\' 1..9', e)
            self.firstWord = -1

    # 'back command'
    def gotResults_302(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ':'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
                    top_buffer += ''
                    top_buffer += '{up}{enter}'
            else:
                top_buffer += '{Esc}'
                top_buffer += ':'
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '200'
                saved_firstWord = self.firstWord
                call_Dragon('Wait', 'i', [dragon2_arg1])
                self.firstWord = saved_firstWord
                top_buffer += ''
                top_buffer += '{up}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_302(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 217, '\'back command\'', e)
            self.firstWord = -1

    # 'Edit another'
    def gotResults_75(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'e '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_75(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 218, '\'Edit another\'', e)
            self.firstWord = -1

    # 'File browser'
    def gotResults_76(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'e.'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_76(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 219, '\'File browser\'', e)
            self.firstWord = -1

    # 'vim diff split'
    def gotResults_77(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'vert diffsplit '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_77(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 220, '\'vim diff split\'', e)
            self.firstWord = -1

    # 'print function'
    def gotResults_78(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            top_buffer += '{Right}'
            top_buffer += 'print()'
            top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_78(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 227, '\'print function\'', e)
            self.firstWord = -1

    # 'Insert space'
    def gotResults_79(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            top_buffer += '{space}{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_79(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 230, '\'Insert space\'', e)
            self.firstWord = -1

    # 'Insert space after'
    def gotResults_80(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            top_buffer += '{Right}{space}{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_80(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 232, '\'Insert space after\'', e)
            self.firstWord = -1

    # 'Append comment'
    def gotResults_81(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i */'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_81(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 234, '\'Append comment\'', e)
            self.firstWord = -1

    # 'Insert line break'
    def gotResults_82(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_82(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 237, '\'Insert line break\'', e)
            self.firstWord = -1

    # 'insert comment'
    def gotResults_83(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i#'
            top_buffer += '{esc}'
            top_buffer += 'il'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_83(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 238, '\'insert comment\'', e)
            self.firstWord = -1

    # ('open' | 'close') 'doc string'
    def gotResults_84(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'li"""'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_84(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 240, '(\'open\' | \'close\') \'doc string\'', e)
            self.firstWord = -1

    # 'Double slash backslash'
    def gotResults_85(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\/\\/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_85(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 241, '\'Double slash backslash\'', e)
            self.firstWord = -1

    # 'reference'
    def gotResults_86(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '-'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '>'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_86(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 242, '\'reference\'', e)
            self.firstWord = -1

    # 'Function definition'
    def gotResults_87(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            top_buffer += 'idef ():'
            top_buffer += '{Left_3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_87(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 243, '\'Function definition\'', e)
            self.firstWord = -1

    # 'Function definition' <_anything>
    def gotResults_88(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            top_buffer += 'idef '
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '():'
            top_buffer += '{Left_2}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 244, '\'Function definition\' <_anything>', e)
            self.firstWord = -1

    # 'Show Help'
    def gotResults_89(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'help '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_89(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 245, '\'Show Help\'', e)
            self.firstWord = -1

    # 'Set setting' ('paste')
    def gotResults_90(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'set '
            word = fullResults[1 + self.firstWord][0]
            if word == 'paste':
                top_buffer += 'paste{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_90(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 246, '\'Set setting\' (\'paste\')', e)
            self.firstWord = -1

    # 'Set setting'
    def gotResults_303(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'set '
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_303(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 246, '\'Set setting\'', e)
            self.firstWord = -1

    # 'Set dark background'
    def gotResults_91(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'set bg=dark'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_91(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 247, '\'Set dark background\'', e)
            self.firstWord = -1

    # 'Set light background'
    def gotResults_92(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'set bg=light'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_92(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 248, '\'Set light background\'', e)
            self.firstWord = -1

    # 'reload vim config'
    def gotResults_93(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'source ~/.vimrc'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_93(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 249, '\'reload vim config\'', e)
            self.firstWord = -1

    # 'run this' ('now')
    def gotResults_94(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '!./% '
            word = fullResults[1 + self.firstWord][0]
            if word == 'now':
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_94(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 250, '\'run this\' (\'now\')', e)
            self.firstWord = -1

    # 'run this'
    def gotResults_304(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '!./% '
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_304(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 250, '\'run this\'', e)
            self.firstWord = -1

    # 'Split vertical'
    def gotResults_95(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'vsp'
            top_buffer += '{Enter}{Shift+h}{PgUp}'
            top_buffer += '{Ctrl+w}'
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_95(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 255, '\'Split vertical\'', e)
            self.firstWord = -1

    def get_window_action(self, list_buffer, functional, word):
        if word == 'left':
            list_buffer += 'h'
        elif word == 'right':
            list_buffer += 'l'
        elif word == 'up':
            list_buffer += 'k'
        elif word == 'down':
            list_buffer += 'j'
        elif word == 'next':
            list_buffer += 'w'
        elif word == 'close':
            list_buffer += 'c'
        return list_buffer

    # 'Vim Window' <window_action>
    def gotResults_96(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}{ctrl+w}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_window_action(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 257, '\'Vim Window\' <window_action>', e)
            self.firstWord = -1

    # 'Vim Window crop'
    def gotResults_97(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'only'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_97(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 258, '\'Vim Window crop\'', e)
            self.firstWord = -1

    # 'Vim Window make fat'
    def gotResults_98(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'vertical resize +15'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_98(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 259, '\'Vim Window make fat\'', e)
            self.firstWord = -1

    # 'Vim Window make thin'
    def gotResults_99(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'vertical resize -15'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_99(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 260, '\'Vim Window make thin\'', e)
            self.firstWord = -1

    def get_buffer_action(self, list_buffer, functional, word):
        if word == 'back':
            list_buffer += 'bp'
        elif word == 'close':
            list_buffer += 'bd'
        elif word == 'next':
            list_buffer += 'bn'
        elif word == 'switch':
            list_buffer += 'b#'
        elif word == 'list':
            list_buffer += 'buffers'
        return list_buffer

    # 'via buffer' <buffer_action>
    def gotResults_100(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_buffer_action(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 264, '\'via buffer\' <buffer_action>', e)
            self.firstWord = -1

    # 'via buffer number' <1to30>
    def gotResults_101(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'b'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 265, '\'via buffer number\' <1to30>', e)
            self.firstWord = -1

    def get_tab_actions(self, list_buffer, functional, word):
        if word == 'back':
            list_buffer += 'p'
        elif word == 'Close':
            list_buffer += 'c'
        elif word == 'Next':
            list_buffer += 'n'
        elif word == 'List':
            list_buffer += 's'
        elif word == 'Last':
            list_buffer += 'l'
        elif word == 'First':
            list_buffer += 'fir'
        return list_buffer

    # 'vim page' <tab_actions>
    def gotResults_102(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'tab'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_tab_actions(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 273, '\'vim page\' <tab_actions>', e)
            self.firstWord = -1

    # 'vim page switch' <1to30>
    def gotResults_103(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'tabn '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 274, '\'vim page switch\' <1to30>', e)
            self.firstWord = -1

    # 'vim Tags back'
    def gotResults_104(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'tN{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_104(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 279, '\'vim Tags back\'', e)
            self.firstWord = -1

    # 'vim Tags Jump'
    def gotResults_105(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += '{Ctrl+]}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_105(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 280, '\'vim Tags Jump\'', e)
            self.firstWord = -1

    # 'vim Tags Next'
    def gotResults_106(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'tn{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_106(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 281, '\'vim Tags Next\'', e)
            self.firstWord = -1

    # 'Vim Tags Match'
    def gotResults_107(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'ts{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_107(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 282, '\'Vim Tags Match\'', e)
            self.firstWord = -1

    # 'Vim Tags Return'
    def gotResults_108(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += '{Ctrl+t}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_108(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 283, '\'Vim Tags Return\'', e)
            self.firstWord = -1

    # 'Vim Tags Stack'
    def gotResults_109(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'tags{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_109(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 284, '\'Vim Tags Stack\'', e)
            self.firstWord = -1

    # 'Nowrap'
    def gotResults_110(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}:set nowrap{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_110(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 294, '\'Nowrap\'', e)
            self.firstWord = -1

    # 'setting based'
    def gotResults_111(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}:set paste{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_111(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 295, '\'setting based\'', e)
            self.firstWord = -1

    # 'Edit vim RC'
    def gotResults_112(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'e ~\\.vimrc'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_112(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 296, '\'Edit vim RC\'', e)
            self.firstWord = -1

    # 'Reload'
    def gotResults_113(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'source $MYVIMRC'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_113(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 297, '\'Reload\'', e)
            self.firstWord = -1

    # 'all buffers'
    def gotResults_114(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':bufdo '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_114(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 298, '\'all buffers\'', e)
            self.firstWord = -1

    # 'show file details'
    def gotResults_115(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}:echo'
            top_buffer += '@%{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_115(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 299, '\'show file details\'', e)
            self.firstWord = -1

    # 'command history'
    def gotResults_116(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'q:'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_116(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 302, '\'command history\'', e)
            self.firstWord = -1

    # 'pattern match history'
    def gotResults_117(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'q/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_117(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 303, '\'pattern match history\'', e)
            self.firstWord = -1

    # 'histogram debug'
    def gotResults_118(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += 'i#ifdef DEBUG{enter}fsp_log_debug(shared_data_p->config_p->prog_name_p, {enter}"%s: \\n", __FUNCTION__);{enter}#endif'
            top_buffer += '{Up}{End}'
            limit = ''
            limit += '19'
            for i in range(to_long(limit)):
                top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_118(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 306, '\'histogram debug\'', e)
            self.firstWord = -1

    # 'ifdef' ('debug' | 'trace')
    def gotResults_119(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'ddi#ifdef '
            word = fullResults[1 + self.firstWord][0]
            if word == 'debug':
                top_buffer += 'DEBUG'
            elif word == 'trace':
                top_buffer += 'TRACE'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_119(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 307, '\'ifdef\' (\'debug\' | \'trace\')', e)
            self.firstWord = -1

    # 'ifdef end'
    def gotResults_120(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += 'o#endif'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_120(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 308, '\'ifdef end\'', e)
            self.firstWord = -1

    def get_printable(self, list_buffer, functional, word):
        if word == 'space':
            list_buffer += ' '
        elif word == '!':
            list_buffer += '!'
        elif word == 'bang':
            list_buffer += '!'
        elif word == '"':
            list_buffer += '"'
        elif word == 'quote':
            list_buffer += '"'
        elif word == '#':
            list_buffer += '#'
        elif word == 'pound':
            list_buffer += '#'
        elif word == '$':
            list_buffer += '$'
        elif word == 'dollar':
            list_buffer += '$'
        elif word == '%':
            list_buffer += '%'
        elif word == 'percent':
            list_buffer += '%'
        elif word == '&':
            list_buffer += '&'
        elif word == '\'':
            list_buffer += '\''
        elif word == 'apostrophe':
            list_buffer += '\''
        elif word == 'single':
            list_buffer += '\''
        elif word == '(':
            list_buffer += '('
        elif word == 'paren':
            list_buffer += '('
        elif word == ')':
            list_buffer += ')'
        elif word == 'close paren':
            list_buffer += ')'
        elif word == '*':
            list_buffer += '*'
        elif word == 'asterisk':
            list_buffer += '*'
        elif word == 'star':
            list_buffer += '*'
        elif word == '+':
            list_buffer += '+'
        elif word == 'plus':
            list_buffer += '+'
        elif word == ',':
            list_buffer += ','
        elif word == '-':
            list_buffer += '-'
        elif word == 'minus':
            list_buffer += '-'
        elif word == '.':
            list_buffer += '.'
        elif word == 'dot':
            list_buffer += '.'
        elif word == '/':
            list_buffer += '/'
        elif word == 'zero':
            list_buffer += '0'
        elif word == 'one':
            list_buffer += '1'
        elif word == 'two':
            list_buffer += '2'
        elif word == 'three':
            list_buffer += '3'
        elif word == 'four':
            list_buffer += '4'
        elif word == 'five':
            list_buffer += '5'
        elif word == 'six':
            list_buffer += '6'
        elif word == 'seven':
            list_buffer += '7'
        elif word == 'eight':
            list_buffer += '8'
        elif word == 'nine':
            list_buffer += '9'
        elif word == ':':
            list_buffer += ':'
        elif word == ';':
            list_buffer += ';'
        elif word == 'semi':
            list_buffer += ';'
        elif word == '<':
            list_buffer += '<'
        elif word == 'bend':
            list_buffer += '<'
        elif word == '=':
            list_buffer += '='
        elif word == 'equal':
            list_buffer += '='
        elif word == 'equals':
            list_buffer += '='
        elif word == '>':
            list_buffer += '>'
        elif word == 'close bend':
            list_buffer += '>'
        elif word == '?':
            list_buffer += '?'
        elif word == 'question':
            list_buffer += '?'
        elif word == '@':
            list_buffer += '@'
        elif word == 'big Alpha':
            list_buffer += 'A'
        elif word == 'big Bravo':
            list_buffer += 'B'
        elif word == 'big Charlie':
            list_buffer += 'C'
        elif word == 'big Delta':
            list_buffer += 'D'
        elif word == 'big echo':
            list_buffer += 'E'
        elif word == 'big foxtrot':
            list_buffer += 'F'
        elif word == 'big golf':
            list_buffer += 'G'
        elif word == 'big Hotel':
            list_buffer += 'H'
        elif word == 'big India':
            list_buffer += 'I'
        elif word == 'big Juliett':
            list_buffer += 'J'
        elif word == 'big kilo':
            list_buffer += 'K'
        elif word == 'big Lima':
            list_buffer += 'L'
        elif word == 'big Mike':
            list_buffer += 'M'
        elif word == 'big November':
            list_buffer += 'N'
        elif word == 'big Oscar':
            list_buffer += 'O'
        elif word == 'big Papa':
            list_buffer += 'P'
        elif word == 'big Quebec':
            list_buffer += 'Q'
        elif word == 'big Romeo':
            list_buffer += 'R'
        elif word == 'big Sierra':
            list_buffer += 'S'
        elif word == 'big tango':
            list_buffer += 'T'
        elif word == 'big uniform':
            list_buffer += 'U'
        elif word == 'big Victor':
            list_buffer += 'V'
        elif word == 'big whiskey':
            list_buffer += 'W'
        elif word == 'big x-ray':
            list_buffer += 'X'
        elif word == 'big Yankee':
            list_buffer += 'Y'
        elif word == 'big Zulu':
            list_buffer += 'Z'
        elif word == '[':
            list_buffer += '['
        elif word == 'bracket':
            list_buffer += '['
        elif word == 'backslash':
            list_buffer += '\\'
        elif word == ']':
            list_buffer += ']'
        elif word == 'close bracket':
            list_buffer += ']'
        elif word == '^':
            list_buffer += '^'
        elif word == '_':
            list_buffer += '_'
        elif word == '`':
            list_buffer += '`'
        elif word == 'Alpha':
            list_buffer += 'a'
        elif word == 'Bravo':
            list_buffer += 'b'
        elif word == 'Charlie':
            list_buffer += 'c'
        elif word == 'Delta':
            list_buffer += 'd'
        elif word == 'echo':
            list_buffer += 'e'
        elif word == 'foxtrot':
            list_buffer += 'f'
        elif word == 'golf':
            list_buffer += 'g'
        elif word == 'Hotel':
            list_buffer += 'h'
        elif word == 'India':
            list_buffer += 'i'
        elif word == 'Juliett':
            list_buffer += 'j'
        elif word == 'kilo':
            list_buffer += 'k'
        elif word == 'Lima':
            list_buffer += 'l'
        elif word == 'Mike':
            list_buffer += 'm'
        elif word == 'November':
            list_buffer += 'n'
        elif word == 'Oscar':
            list_buffer += 'o'
        elif word == 'Papa':
            list_buffer += 'p'
        elif word == 'Quebec':
            list_buffer += 'q'
        elif word == 'Romeo':
            list_buffer += 'r'
        elif word == 'Sierra':
            list_buffer += 's'
        elif word == 'tango':
            list_buffer += 't'
        elif word == 'uniform':
            list_buffer += 'u'
        elif word == 'Victor':
            list_buffer += 'v'
        elif word == 'whiskey':
            list_buffer += 'w'
        elif word == 'x-ray':
            list_buffer += 'x'
        elif word == 'Yankee':
            list_buffer += 'y'
        elif word == 'Zulu':
            list_buffer += 'z'
        elif word == '{':
            list_buffer += '{{}'
        elif word == 'brace':
            list_buffer += '{{}'
        elif word == '|':
            list_buffer += '|'
        elif word == 'vertical bar':
            list_buffer += '|'
        elif word == 'bar':
            list_buffer += '|'
        elif word == '}':
            list_buffer += '}'
        elif word == 'close brace':
            list_buffer += '}'
        elif word == '~':
            list_buffer += '~'
        return list_buffer

    # 'Vim show Taglist'
    def gotResults_121(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ''
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_121(words[1:], fullResults)
        except Exception, e:
            handle_error('vim_plugins.vch', 5, '\'Vim show Taglist\'', e)
            self.firstWord = -1

    # 'Vim Align'
    def gotResults_122(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'Align '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_122(words[1:], fullResults)
        except Exception, e:
            handle_error('vim_plugins.vch', 6, '\'Vim Align\'', e)
            self.firstWord = -1

    # 'Vim Align' <key>
    def gotResults_123(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'Align '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '{Left_7}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim_plugins.vch', 7, '\'Vim Align\' <key>', e)
            self.firstWord = -1

    # 'complete'
    def gotResults_124(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+x}{ctrl+o}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_124(words[1:], fullResults)
        except Exception, e:
            handle_error('vim_plugins.vch', 9, '\'complete\'', e)
            self.firstWord = -1

    # 'local complete'
    def gotResults_125(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+p}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_125(words[1:], fullResults)
        except Exception, e:
            handle_error('vim_plugins.vch', 10, '\'local complete\'', e)
            self.firstWord = -1

    # 'Remove preview'
    def gotResults_126(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}{ctrl+w}{Up}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'q{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_126(words[1:], fullResults)
        except Exception, e:
            handle_error('vim_plugins.vch', 11, '\'Remove preview\'', e)
            self.firstWord = -1

    # 'Unite files'
    def gotResults_127(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\f'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_127(words[1:], fullResults)
        except Exception, e:
            handle_error('vim_plugins.vch', 14, '\'Unite files\'', e)
            self.firstWord = -1

    # 'Unite files recursive'
    def gotResults_128(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\t'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_128(words[1:], fullResults)
        except Exception, e:
            handle_error('vim_plugins.vch', 15, '\'Unite files recursive\'', e)
            self.firstWord = -1

    # 'Unite recent'
    def gotResults_129(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\m'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_129(words[1:], fullResults)
        except Exception, e:
            handle_error('vim_plugins.vch', 16, '\'Unite recent\'', e)
            self.firstWord = -1

    # 'Unite history'
    def gotResults_130(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\y'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_130(words[1:], fullResults)
        except Exception, e:
            handle_error('vim_plugins.vch', 18, '\'Unite history\'', e)
            self.firstWord = -1

    # 'Unite buffer'
    def gotResults_131(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\e'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_131(words[1:], fullResults)
        except Exception, e:
            handle_error('vim_plugins.vch', 19, '\'Unite buffer\'', e)
            self.firstWord = -1

    # 'Unite insert'
    def gotResults_132(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{tab}'
            top_buffer += '{Down_3}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_132(words[1:], fullResults)
        except Exception, e:
            handle_error('vim_plugins.vch', 20, '\'Unite insert\'', e)
            self.firstWord = -1

    # 'tee comment' ('range' | 'line')
    def gotResults_133(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'TComment'
            word = fullResults[1 + self.firstWord][0]
            if word == 'range':
                limit = ''
                limit += '9'
                for i in range(to_long(limit)):
                    top_buffer += '{Left}'
            elif word == 'line':
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_133(words[2:], fullResults)
        except Exception, e:
            handle_error('vim_plugins.vch', 23, '\'tee comment\' (\'range\' | \'line\')', e)
            self.firstWord = -1

    def get_line_mod2(self, list_buffer, functional, word):
        if word == 'tee Comment':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += 'TComment{enter}'
            list_buffer += '\'v'
        return list_buffer

    # 'line' <line_mod2> <0to9>
    def gotResults_134(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_0to9(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_mod2(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim_plugins.vch', 31, '\'line\' <line_mod2> <0to9>', e)
            self.firstWord = -1

    # 'line' <0to9>
    def gotResults_305(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_0to9(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim_plugins.vch', 31, '\'line\' <0to9>', e)
            self.firstWord = -1

    # 'line' <line_mod2> <0to9> <0to9>
    def gotResults_135(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_mod2(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim_plugins.vch', 32, '\'line\' <line_mod2> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <0to9> <0to9>
    def gotResults_306(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim_plugins.vch', 32, '\'line\' <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <line_mod2> <0to9> <0to9> <0to9>
    def gotResults_136(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_mod2(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('vim_plugins.vch', 33, '\'line\' <line_mod2> <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <0to9> <0to9> <0to9>
    def gotResults_307(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim_plugins.vch', 33, '\'line\' <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <line_mod2> <0to9> <0to9> <0to9> <0to9>
    def gotResults_137(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg2 = self.get_0to9(eval_template_arg2, True, word)
            eval_template_arg3 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[5 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_mod2(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('vim_plugins.vch', 34, '\'line\' <line_mod2> <0to9> <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <0to9> <0to9> <0to9> <0to9>
    def gotResults_308(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 = self.get_0to9(eval_template_arg2, True, word)
            eval_template_arg3 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('vim_plugins.vch', 34, '\'line\' <0to9> <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    def get_relative_range_commands2(self, list_buffer, functional, word):
        if word == 'tee Comment':
            list_buffer += 'TComment'
        return list_buffer

    # <relative_range_commands2> ('Next' | 'Back') 'Line'
    def gotResults_138(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            if word == 'Next':
                top_buffer += '+'
            elif word == 'Back':
                top_buffer += '-'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += ':'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_commands2(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim_plugins.vch', 39, '<relative_range_commands2> (\'Next\' | \'Back\') \'Line\'', e)
            self.firstWord = -1

    # <relative_range_commands2> 2..30 'Lines'
    def gotResults_139(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += ':.,+'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a-1'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += self.convert_number_word(word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_commands2(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim_plugins.vch', 40, '<relative_range_commands2> 2..30 \'Lines\'', e)
            self.firstWord = -1

    # <relative_range_commands2> 'Back' 2..30 'Lines'
    def gotResults_140(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += ':-'
            word = fullResults[2 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += ',-1'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_commands2(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim_plugins.vch', 41, '<relative_range_commands2> \'Back\' 2..30 \'Lines\'', e)
            self.firstWord = -1

    def get_comment_type(self, list_buffer, functional, word):
        if word == 'frame':
            list_buffer += 'fr'
        elif word == 'function':
            list_buffer += 'fu'
        elif word == 'method':
            list_buffer += 'me'
        elif word == 'class':
            list_buffer += 'cl'
        elif word == 'implementation':
            list_buffer += 'fdi'
        elif word == 'header':
            list_buffer += 'fdh'
        elif word == 'source section':
            list_buffer += 'cs'
        elif word == 'header section':
            list_buffer += 'hs'
        elif word == 'keyword':
            list_buffer += 'kc'
        elif word == 'special':
            list_buffer += 'sc'
        elif word == 'date':
            list_buffer += 'd'
        elif word == 'time':
            list_buffer += 't'
        elif word == 'toggle type':
            list_buffer += 'x'
        return list_buffer

    # <comment_type> 'comment'
    def gotResults_141(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '\\c'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_comment_type(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim_plugins.vch', 51, '<comment_type> \'comment\'', e)
            self.firstWord = -1

    def get_statement_type(self, list_buffer, functional, word):
        if word == 'do':
            list_buffer += 'd'
        elif word == 'for':
            list_buffer += 'fo'
        elif word == 'if':
            list_buffer += 'if'
        elif word == 'if else':
            list_buffer += 'ife'
        elif word == 'else':
            list_buffer += 'e'
        elif word == 'while':
            list_buffer += 'wh'
        elif word == 'switch':
            list_buffer += 's'
        elif word == 'case':
            list_buffer += 'c'
        return list_buffer

    # <statement_type> 'statement'
    def gotResults_142(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '\\s'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_statement_type(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim_plugins.vch', 57, '<statement_type> \'statement\'', e)
            self.firstWord = -1

    def get_idiom_type(self, list_buffer, functional, word):
        if word == 'function':
            list_buffer += 'f'
        elif word == 'static':
            list_buffer += 'sf'
        elif word == 'main':
            list_buffer += 'm'
        elif word == 'for increment':
            list_buffer += '0'
        elif word == 'print':
            list_buffer += 'p'
        elif word == 'file print':
            list_buffer += 'fp'
        return list_buffer

    # <idiom_type> 'idiom'
    def gotResults_143(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '\\i'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_idiom_type(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim_plugins.vch', 63, '<idiom_type> \'idiom\'', e)
            self.firstWord = -1

    # 'start' ('brace' | 'comment') ('block')
    def gotResults_144(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}{i}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'brace':
                top_buffer += '{{enter}'
            elif word == 'comment':
                top_buffer += '/*'
            word = fullResults[2 + self.firstWord][0]
            if word == 'block':
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_144(words[3:], fullResults)
        except Exception, e:
            handle_error('vim_plugins.vch', 65, '\'start\' (\'brace\' | \'comment\') (\'block\')', e)
            self.firstWord = -1

    # 'start' ('brace' | 'comment')
    def gotResults_309(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}{i}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'brace':
                top_buffer += '{{enter}'
            elif word == 'comment':
                top_buffer += '/*'
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_309(words[2:], fullResults)
        except Exception, e:
            handle_error('vim_plugins.vch', 65, '\'start\' (\'brace\' | \'comment\')', e)
            self.firstWord = -1

    def get_preprocessor_type(self, list_buffer, functional, word):
        if word == 'include header':
            list_buffer += 'ih'
        elif word == 'include global':
            list_buffer += '<'
        elif word == 'include local':
            list_buffer += '"'
        elif word == 'define':
            list_buffer += 'd'
        return list_buffer

    # <preprocessor_type> 'preprocessor'
    def gotResults_145(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '\\p'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_preprocessor_type(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim_plugins.vch', 70, '<preprocessor_type> \'preprocessor\'', e)
            self.firstWord = -1

    # 'Bundle command' ('Install' | 'Clean' | 'List')
    def gotResults_146(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'NeoBundle'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_146(words[2:], fullResults)
        except Exception, e:
            handle_error('vim_plugins.vch', 73, '\'Bundle command\' (\'Install\' | \'Clean\' | \'List\')', e)
            self.firstWord = -1

    # ('expand' | 'collapse') 'all'
    def gotResults_147(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'expand':
                top_buffer += 'ctrl'
            elif word == 'collapse':
                top_buffer += 'shift'
            top_buffer += '+f}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_147(words[2:], fullResults)
        except Exception, e:
            handle_error('vim_plugins.vch', 82, '(\'expand\' | \'collapse\') \'all\'', e)
            self.firstWord = -1

    # 'screen new'
    def gotResults_148(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'c'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_148(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 4, '\'screen new\'', e)
            self.firstWord = -1

    # 'screen remove'
    def gotResults_149(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'X'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_149(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 5, '\'screen remove\'', e)
            self.firstWord = -1

    # 'screen crop'
    def gotResults_150(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'Q'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_150(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 6, '\'screen crop\'', e)
            self.firstWord = -1

    # 'scroll back'
    def gotResults_151(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += '['
            top_buffer += '{pgup}{pgup}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_151(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 7, '\'scroll back\'', e)
            self.firstWord = -1

    # 'scroll mode'
    def gotResults_152(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += '['
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_152(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 8, '\'scroll mode\'', e)
            self.firstWord = -1

    # 'screen paste'
    def gotResults_153(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += ']'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_153(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 9, '\'screen paste\'', e)
            self.firstWord = -1

    # 'screen mark'
    def gotResults_154(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '>'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_154(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 10, '\'screen mark\'', e)
            self.firstWord = -1

    # 'screen kill'
    def gotResults_155(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'k'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_155(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 11, '\'screen kill\'', e)
            self.firstWord = -1

    # 'screen help'
    def gotResults_156(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += '?'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_156(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 12, '\'screen help\'', e)
            self.firstWord = -1

    # 'screen split' 0..9
    def gotResults_157(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'S'
            top_buffer += '{ctrl+a}{tab}{ctrl+a}'
            top_buffer += 'n'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '200'
                saved_firstWord = self.firstWord
                call_Dragon('Wait', 'i', [dragon2_arg1])
                self.firstWord = saved_firstWord
                top_buffer += '{ctrl+a}{'
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
                top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_157(words[2:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 15, '\'screen split\' 0..9', e)
            self.firstWord = -1

    # 'screen split'
    def gotResults_310(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'S'
            top_buffer += '{ctrl+a}{tab}{ctrl+a}'
            top_buffer += 'n'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '200'
                saved_firstWord = self.firstWord
                call_Dragon('Wait', 'i', [dragon2_arg1])
                self.firstWord = saved_firstWord
                top_buffer += '{ctrl+a}{'
                top_buffer += ''
                top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_310(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 15, '\'screen split\'', e)
            self.firstWord = -1

    # 'screen title'
    def gotResults_158(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'A'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_158(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 16, '\'screen title\'', e)
            self.firstWord = -1

    # 'screen list'
    def gotResults_159(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += '"'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_159(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 17, '\'screen list\'', e)
            self.firstWord = -1

    # 'screen switch' 0..9
    def gotResults_160(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                word = fullResults[1 + self.firstWord][0]
                limit2 += self.convert_number_word(word)
                for i in range(to_long(limit2)):
                    top_buffer += '{Ctrl+a}{tab}'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
            else:
                top_buffer += '{ctrl+a}{tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_160(words[2:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 21, '\'screen switch\' 0..9', e)
            self.firstWord = -1

    # 'screen switch'
    def gotResults_311(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    top_buffer += '{Ctrl+a}{tab}'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
            else:
                top_buffer += '{ctrl+a}{tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_311(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 21, '\'screen switch\'', e)
            self.firstWord = -1

    # 'screen detach'
    def gotResults_161(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'd'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_161(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 22, '\'screen detach\'', e)
            self.firstWord = -1

    # 'screen next'
    def gotResults_162(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl'
            top_buffer += '+'
            top_buffer += 'a}'
            top_buffer += '{n}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_162(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 23, '\'screen next\'', e)
            self.firstWord = -1

    # 'screen back'
    def gotResults_163(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl'
            top_buffer += '+'
            top_buffer += 'a}'
            top_buffer += '{p}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_163(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 24, '\'screen back\'', e)
            self.firstWord = -1

    # 'screen' 0..9
    def gotResults_164(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl'
            top_buffer += '+'
            top_buffer += 'a}'
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_164(words[2:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 25, '\'screen\' 0..9', e)
            self.firstWord = -1

    # 'screen attach'
    def gotResults_165(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'screen  {Enter}  {enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_165(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 27, '\'screen attach\'', e)
            self.firstWord = -1

    # 'screen join'
    def gotResults_166(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'screen -x {enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_166(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 28, '\'screen join\'', e)
            self.firstWord = -1

    # 'screen search' ('backward' | 'forward')
    def gotResults_167(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+a}'
            top_buffer += '['
            word = fullResults[1 + self.firstWord][0]
            if word == 'backward':
                top_buffer += '?'
            elif word == 'forward':
                top_buffer += '/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_167(words[2:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 29, '\'screen search\' (\'backward\' | \'forward\')', e)
            self.firstWord = -1

    # 'screen search next' ('backward' | 'forward')
    def gotResults_168(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'backward':
                top_buffer += '?'
            elif word == 'forward':
                top_buffer += '/'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_168(words[2:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 30, '\'screen search next\' (\'backward\' | \'forward\')', e)
            self.firstWord = -1

    def get_subcmds(self, list_buffer, functional, word):
        if word == 'log':
            list_buffer += 'log'
        elif word == 'fetch':
            list_buffer += 'fetch'
        elif word == 'pull':
            list_buffer += 'pull'
        elif word == 'clone':
            list_buffer += 'clone'
        elif word == 'config':
            list_buffer += 'config'
        elif word == 'help':
            list_buffer += 'help'
        elif word == 'checkout':
            list_buffer += 'checkout '
        elif word == 'checkout move':
            list_buffer += 'checkout -B '
        elif word == 'checkout new':
            list_buffer += 'checkout -b '
        elif word == 'checkout reset':
            list_buffer += 'checkout -- '
        elif word == 'branch':
            list_buffer += 'branch '
        elif word == 'branch remove':
            list_buffer += 'branch -D '
        elif word == 'branch show':
            list_buffer += 'branch{enter}'
        elif word == 'status':
            list_buffer += 'status'
        elif word == 'status show':
            list_buffer += 'status -uno{enter}'
        elif word == 'add':
            list_buffer += 'add'
        elif word == 'add updated':
            list_buffer += 'add -u '
        elif word == 'add patch':
            list_buffer += 'add --patch{enter}'
        elif word == 'add interactive':
            list_buffer += 'add --interactive{enter}'
        elif word == 'diff':
            list_buffer += 'diff'
        elif word == 'diff cashed':
            list_buffer += 'diff --cached '
        elif word == 'rebase':
            list_buffer += 'rebase -i '
        elif word == 'rebase continue':
            list_buffer += 'rebase --continue'
        elif word == 'rebase master':
            list_buffer += 'rebase -i master'
        elif word == 'rebase develop':
            list_buffer += 'rebase -i develop'
        elif word == 'rebase managed':
            list_buffer += 'rebase -i managed-zfs'
        elif word == 'checkout master':
            list_buffer += 'checkout master'
        elif word == 'checkout branch':
            list_buffer += 'checkout -b '
        elif word == 'commit':
            list_buffer += 'commit -s'
        elif word == 'commit amend':
            list_buffer += 'commit --amend -s'
        elif word == 'commit modified':
            list_buffer += 'commit -a '
        elif word == 'commit message':
            list_buffer += 'commit -m '
        elif word == 'commit patch':
            list_buffer += 'commit --patch{enter}'
        elif word == 'commit interactive':
            list_buffer += 'commit --interactive{enter}'
        elif word == 'commit previous message':
            list_buffer += 'commit -C '
        elif word == 'ref log':
            list_buffer += 'reflog'
        elif word == 'cherry':
            list_buffer += 'cherry-pick '
        elif word == 'reset':
            list_buffer += 'reset'
        elif word == 'reset soft':
            list_buffer += 'reset --soft'
        elif word == 'reset hard':
            list_buffer += 'reset --hard '
        elif word == 'reset head':
            list_buffer += 'reset HEAD'
        elif word == 'reset hard head':
            list_buffer += 'reset --hard HEAD'
        elif word == 'stash':
            list_buffer += 'stash'
        elif word == 'stash list':
            list_buffer += 'stash list'
        elif word == 'stash show':
            list_buffer += 'stash show'
        elif word == 'stash pop':
            list_buffer += 'stash pop'
        elif word == 'submodule init':
            list_buffer += 'submodule init'
        elif word == 'submodule update':
            list_buffer += 'submodule update{enter}'
        return list_buffer

    # 'versioning' <subcmds>
    def gotResults_169(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'git '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_subcmds(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('git.vch', 28, '\'versioning\' <subcmds>', e)
            self.firstWord = -1

    def get_subcmds_sysctl(self, list_buffer, functional, word):
        if word == 'start':
            list_buffer += 'start'
        elif word == 'stop':
            list_buffer += 'stop'
        elif word == 'enable':
            list_buffer += 'enable'
        elif word == 'disable':
            list_buffer += 'disable'
        elif word == 'help':
            list_buffer += 'help'
        elif word == 'status':
            list_buffer += 'status'
        elif word == 'dependencies':
            list_buffer += 'list-dependencies'
        elif word == 'units':
            list_buffer += 'list-unit-files'
        return list_buffer

    # 'system control' <subcmds_sysctl>
    def gotResults_170(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'systemctl '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_subcmds_sysctl(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('systemctl.vch', 7, '\'system control\' <subcmds_sysctl>', e)
            self.firstWord = -1

    # ('arguments' | 'quit' | 'list source' | 'where' | 'next' | 'step' | 'return' | 'continue' | 'up stack' | 'until' | 'step over' | 'over')
    def gotResults_171(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'arguments':
                top_buffer += 'a'
            elif word == 'quit':
                top_buffer += 'quit'
            elif word == 'list source':
                top_buffer += 'list'
            elif word == 'where':
                top_buffer += 'where'
            elif word == 'next':
                top_buffer += 'next'
            elif word == 'step':
                top_buffer += 'step'
            elif word == 'return':
                top_buffer += 'return'
            elif word == 'continue':
                top_buffer += 'continue'
            elif word == 'up stack':
                top_buffer += 'up'
            elif word == 'until':
                top_buffer += 'until'
            elif word == 'step over':
                top_buffer += 'n'
            elif word == 'over':
                top_buffer += 'n'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_171(words[1:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 17, '(\'arguments\' | \'quit\' | \'list source\' | \'where\' | \'next\' | \'step\' | \'return\' | \'continue\' | \'up stack\' | \'until\' | \'step over\' | \'over\')', e)
            self.firstWord = -1

    # ('breakpoint' | 'clear') 1..9
    def gotResults_172(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'breakpoint':
                top_buffer += 'b'
            elif word == 'clear':
                top_buffer += 'clear'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                top_buffer += ' '
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_172(words[2:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 19, '(\'breakpoint\' | \'clear\') 1..9', e)
            self.firstWord = -1

    # ('breakpoint' | 'clear')
    def gotResults_312(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'breakpoint':
                top_buffer += 'b'
            elif word == 'clear':
                top_buffer += 'clear'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ' '
                top_buffer += ''
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_312(words[1:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 19, '(\'breakpoint\' | \'clear\')', e)
            self.firstWord = -1

    # 'execute expression'
    def gotResults_173(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '!'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_173(words[1:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 20, '\'execute expression\'', e)
            self.firstWord = -1

    # 'print'
    def gotResults_174(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'pp '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_174(words[1:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 21, '\'print\'', e)
            self.firstWord = -1

    # ('locals' | 'globals')
    def gotResults_175(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'pp '
            word = fullResults[0 + self.firstWord][0]
            top_buffer += word
            top_buffer += '()'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_175(words[1:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 22, '(\'locals\' | \'globals\')', e)
            self.firstWord = -1

    # ('continue' | 'step out' | 'Step over' | 'step' | 'step into') 1..20 'times'
    def gotResults_176(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                word = fullResults[1 + self.firstWord][0]
                limit2 += self.convert_number_word(word)
                for i in range(to_long(limit2)):
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
                    word = fullResults[0 + self.firstWord][0]
                    if word == 'continue':
                        top_buffer += 'continue'
                    elif word == 'step out':
                        top_buffer += 'return'
                    elif word == 'Step over':
                        top_buffer += 'next'
                    elif word == 'step':
                        top_buffer += 'step'
                    elif word == 'step into':
                        top_buffer += 'step'
                    top_buffer += '{enter}'
            else:
                word = fullResults[0 + self.firstWord][0]
                if word == 'continue':
                    top_buffer += 'continue'
                elif word == 'step out':
                    top_buffer += 'return'
                elif word == 'Step over':
                    top_buffer += 'next'
                elif word == 'step':
                    top_buffer += 'step'
                elif word == 'step into':
                    top_buffer += 'step'
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_176(words[3:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 25, '(\'continue\' | \'step out\' | \'Step over\' | \'step\' | \'step into\') 1..20 \'times\'', e)
            self.firstWord = -1

    # ('continue' | 'step out' | 'Step over' | 'step' | 'step into') 1..20
    def gotResults_314(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                word = fullResults[1 + self.firstWord][0]
                limit2 += self.convert_number_word(word)
                for i in range(to_long(limit2)):
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
                    word = fullResults[0 + self.firstWord][0]
                    if word == 'continue':
                        top_buffer += 'continue'
                    elif word == 'step out':
                        top_buffer += 'return'
                    elif word == 'Step over':
                        top_buffer += 'next'
                    elif word == 'step':
                        top_buffer += 'step'
                    elif word == 'step into':
                        top_buffer += 'step'
                    top_buffer += '{enter}'
            else:
                word = fullResults[0 + self.firstWord][0]
                if word == 'continue':
                    top_buffer += 'continue'
                elif word == 'step out':
                    top_buffer += 'return'
                elif word == 'Step over':
                    top_buffer += 'next'
                elif word == 'step':
                    top_buffer += 'step'
                elif word == 'step into':
                    top_buffer += 'step'
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_314(words[2:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 25, '(\'continue\' | \'step out\' | \'Step over\' | \'step\' | \'step into\') 1..20', e)
            self.firstWord = -1

    # ('continue' | 'step out' | 'Step over' | 'step' | 'step into') 'times'
    def gotResults_313(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
                    word = fullResults[0 + self.firstWord][0]
                    if word == 'continue':
                        top_buffer += 'continue'
                    elif word == 'step out':
                        top_buffer += 'return'
                    elif word == 'Step over':
                        top_buffer += 'next'
                    elif word == 'step':
                        top_buffer += 'step'
                    elif word == 'step into':
                        top_buffer += 'step'
                    top_buffer += '{enter}'
            else:
                word = fullResults[0 + self.firstWord][0]
                if word == 'continue':
                    top_buffer += 'continue'
                elif word == 'step out':
                    top_buffer += 'return'
                elif word == 'Step over':
                    top_buffer += 'next'
                elif word == 'step':
                    top_buffer += 'step'
                elif word == 'step into':
                    top_buffer += 'step'
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_313(words[2:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 25, '(\'continue\' | \'step out\' | \'Step over\' | \'step\' | \'step into\') \'times\'', e)
            self.firstWord = -1

    # ('continue' | 'step out' | 'Step over' | 'step' | 'step into')
    def gotResults_315(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    saved_firstWord = self.firstWord
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    self.firstWord = saved_firstWord
                    word = fullResults[0 + self.firstWord][0]
                    if word == 'continue':
                        top_buffer += 'continue'
                    elif word == 'step out':
                        top_buffer += 'return'
                    elif word == 'Step over':
                        top_buffer += 'next'
                    elif word == 'step':
                        top_buffer += 'step'
                    elif word == 'step into':
                        top_buffer += 'step'
                    top_buffer += '{enter}'
            else:
                word = fullResults[0 + self.firstWord][0]
                if word == 'continue':
                    top_buffer += 'continue'
                elif word == 'step out':
                    top_buffer += 'return'
                elif word == 'Step over':
                    top_buffer += 'next'
                elif word == 'step':
                    top_buffer += 'step'
                elif word == 'step into':
                    top_buffer += 'step'
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_315(words[1:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 25, '(\'continue\' | \'step out\' | \'Step over\' | \'step\' | \'step into\')', e)
            self.firstWord = -1

    # 'insert print macro'
    def gotResults_177(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'print-%: ; @$(error $* is $($*) ($(value $*)) (from $(origin $*)))'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_177(words[1:], fullResults)
        except Exception, e:
            handle_error('pdb.vch', 31, '\'insert print macro\'', e)
            self.firstWord = -1

    def get_pkg_mgmt_subcmds(self, list_buffer, functional, word):
        if word == 'query':
            list_buffer += '-q'
        elif word == 'query all':
            list_buffer += '-qa'
        elif word == 'query package requirements':
            list_buffer += '-qpR'
        elif word == 'install':
            list_buffer += '-Uvh'
        elif word == 'erase':
            list_buffer += '-e'
        return list_buffer

    # 'red package'
    def gotResults_178(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'rpm '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_178(words[1:], fullResults)
        except Exception, e:
            handle_error('package_management.vch', 24, '\'red package\'', e)
            self.firstWord = -1

    # 'red package' <pkg_mgmt_subcmds>
    def gotResults_179(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'rpm '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_pkg_mgmt_subcmds(top_buffer, False, word)
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('package_management.vch', 25, '\'red package\' <pkg_mgmt_subcmds>', e)
            self.firstWord = -1

    # 'pip' ('freeze' | 'completion' | 'install' | 'list' | 'help')
    def gotResults_180(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'pip '
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_180(words[2:], fullResults)
        except Exception, e:
            handle_error('package_management.vch', 30, '\'pip\' (\'freeze\' | \'completion\' | \'install\' | \'list\' | \'help\')', e)
            self.firstWord = -1

    # 'pip option' ('bash' | 'upgrade' | 'outdated' | 'local' | 'no index' | 'find links')
    def gotResults_181(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' --'
            word = fullResults[1 + self.firstWord][0]
            if word == 'bash':
                top_buffer += 'bash'
            elif word == 'upgrade':
                top_buffer += 'upgrade'
            elif word == 'outdated':
                top_buffer += 'outdated'
            elif word == 'local':
                top_buffer += 'local'
            elif word == 'no index':
                top_buffer += 'no-index'
            elif word == 'find links':
                top_buffer += 'find-links'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_181(words[2:], fullResults)
        except Exception, e:
            handle_error('package_management.vch', 31, '\'pip option\' (\'bash\' | \'upgrade\' | \'outdated\' | \'local\' | \'no index\' | \'find links\')', e)
            self.firstWord = -1

    # 'yummy' ('provides' | 'install' | 'search' | 'update' | 'remove' | 'clean' | 'clean all' | 'local install')
    def gotResults_182(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'yum '
            word = fullResults[1 + self.firstWord][0]
            if word == 'provides':
                top_buffer += 'provides'
            elif word == 'install':
                top_buffer += 'install'
            elif word == 'search':
                top_buffer += 'search'
            elif word == 'update':
                top_buffer += 'update'
            elif word == 'remove':
                top_buffer += 'remove'
            elif word == 'clean':
                top_buffer += 'clean'
            elif word == 'clean all':
                top_buffer += 'clean all'
            elif word == 'local install':
                top_buffer += 'localinstall'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_182(words[2:], fullResults)
        except Exception, e:
            handle_error('package_management.vch', 43, '\'yummy\' (\'provides\' | \'install\' | \'search\' | \'update\' | \'remove\' | \'clean\' | \'clean all\' | \'local install\')', e)
            self.firstWord = -1

    # 'yummy list' ('available' | 'installed' | 'extras' | 'updates' | 'obsoletes' | 'all' | 'recent')
    def gotResults_183(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'yum list '
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_183(words[2:], fullResults)
        except Exception, e:
            handle_error('package_management.vch', 44, '\'yummy list\' (\'available\' | \'installed\' | \'extras\' | \'updates\' | \'obsoletes\' | \'all\' | \'recent\')', e)
            self.firstWord = -1

    # 'yummy' ('enable' | 'disable')
    def gotResults_184(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '--'
            word = fullResults[1 + self.firstWord][0]
            if word == 'enable':
                top_buffer += 'en'
            elif word == 'disable':
                top_buffer += 'dis'
            top_buffer += 'ablerepo=*'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_184(words[2:], fullResults)
        except Exception, e:
            handle_error('package_management.vch', 45, '\'yummy\' (\'enable\' | \'disable\')', e)
            self.firstWord = -1

    def get_service_names(self, list_buffer, functional, word):
        if word == 'corrie':
            list_buffer += 'corosync'
        elif word == 'pacemaker':
            list_buffer += 'pacemaker'
        elif word == 'PCS':
            list_buffer += 'pcs'
        elif word == 'IP tables':
            list_buffer += 'iptables'
        elif word == 'agent':
            list_buffer += 'chroma-agent'
        elif word == 'firewall de':
            list_buffer += 'firewalld'
        return list_buffer

    # <service_names> ('stop' | 'start' | 'status' | 'reload' | 'restart')
    def gotResults_185(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'service '
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_service_names(top_buffer, False, word)
            top_buffer += ' '
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('service_control.vch', 13, '<service_names> (\'stop\' | \'start\' | \'status\' | \'reload\' | \'restart\')', e)
            self.firstWord = -1

    def get_common_actions(self, list_buffer, functional, word):
        if word == 'source':
            list_buffer += 'source '
        elif word == 'find process':
            list_buffer += 'ps ax'
        elif word == 'find process file':
            list_buffer += 'ps ef'
        elif word == 'find files':
            list_buffer += 'find / -name \'\'{left}'
        elif word == 'make archive':
            list_buffer += 'tar -cf '
        elif word == 'extract archive':
            list_buffer += 'tar -xf '
        elif word == 'track archive':
            list_buffer += 'tar -xf '
        elif word == 'read archive':
            list_buffer += 'tar -tf '
        elif word == 'change ownership':
            list_buffer += 'chown -R tanabarr:tanabarr '
        elif word == 'change permissions':
            list_buffer += 'chmod -R 755 '
        elif word == 'move files':
            list_buffer += 'mv '
        elif word == 'remove file':
            list_buffer += 'rm '
        elif word == 'network stats':
            list_buffer += 'netstat -tunlp{enter}'
        elif word == 'network interfaces':
            list_buffer += 'ip addr{enter}'
        elif word == 'make link':
            list_buffer += 'ln -sn '
        elif word == 'grep':
            list_buffer += 'grep \'\'{left}'
        elif word == 'recursive grep':
            list_buffer += 'grep -R \'\'{left}'
        elif word == 'read file':
            list_buffer += 'less '
        elif word == 'tail file':
            list_buffer += 'tail -f '
        elif word == 'list command history':
            list_buffer += 'history{enter}'
        elif word == 'execute command':
            list_buffer += './'
        elif word == 'home root':
            list_buffer += '~/'
        elif word == 'edit':
            list_buffer += 'vim '
        elif word == 'list':
            list_buffer += 'ls -h{enter}'
        elif word == 'list directory':
            list_buffer += 'ls -h '
        elif word == 'long list':
            list_buffer += 'ls -lah{enter}'
        elif word == 'long list directory':
            list_buffer += 'ls -lah '
        elif word == 'make directory':
            list_buffer += 'mkdir '
        elif word == 'show disk space':
            list_buffer += 'df -h .{enter}'
        elif word == 'echo command':
            list_buffer += 'echo '
        return list_buffer

    # ('as root') <common_actions>
    def gotResults_186(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'as root':
                top_buffer += 'sudo '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_common_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 46, '(\'as root\') <common_actions>', e)
            self.firstWord = -1

    # (('source' | 'find process' | 'find process file' | 'find files' | 'make archive' | 'extract archive' | 'track archive' | 'read archive' | 'change ownership' | 'change permissions' | 'move files' | 'remove file' | 'network stats' | 'network interfaces' | 'make link' | 'grep' | 'recursive grep' | 'read file' | 'tail file' | 'list command history' | 'execute command' | 'home root' | 'edit' | 'list' | 'list directory' | 'long list' | 'long list directory' | 'make directory' | 'show disk space' | 'echo command'))
    def gotResults_316(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'source':
                top_buffer += 'source '
            elif word == 'find process':
                top_buffer += 'ps ax'
            elif word == 'find process file':
                top_buffer += 'ps ef'
            elif word == 'find files':
                top_buffer += 'find / -name \'\'{left}'
            elif word == 'make archive':
                top_buffer += 'tar -cf '
            elif word == 'extract archive':
                top_buffer += 'tar -xf '
            elif word == 'track archive':
                top_buffer += 'tar -xf '
            elif word == 'read archive':
                top_buffer += 'tar -tf '
            elif word == 'change ownership':
                top_buffer += 'chown -R tanabarr:tanabarr '
            elif word == 'change permissions':
                top_buffer += 'chmod -R 755 '
            elif word == 'move files':
                top_buffer += 'mv '
            elif word == 'remove file':
                top_buffer += 'rm '
            elif word == 'network stats':
                top_buffer += 'netstat -tunlp{enter}'
            elif word == 'network interfaces':
                top_buffer += 'ip addr{enter}'
            elif word == 'make link':
                top_buffer += 'ln -sn '
            elif word == 'grep':
                top_buffer += 'grep \'\'{left}'
            elif word == 'recursive grep':
                top_buffer += 'grep -R \'\'{left}'
            elif word == 'read file':
                top_buffer += 'less '
            elif word == 'tail file':
                top_buffer += 'tail -f '
            elif word == 'list command history':
                top_buffer += 'history{enter}'
            elif word == 'execute command':
                top_buffer += './'
            elif word == 'home root':
                top_buffer += '~/'
            elif word == 'edit':
                top_buffer += 'vim '
            elif word == 'list':
                top_buffer += 'ls -h{enter}'
            elif word == 'list directory':
                top_buffer += 'ls -h '
            elif word == 'long list':
                top_buffer += 'ls -lah{enter}'
            elif word == 'long list directory':
                top_buffer += 'ls -lah '
            elif word == 'make directory':
                top_buffer += 'mkdir '
            elif word == 'show disk space':
                top_buffer += 'df -h .{enter}'
            elif word == 'echo command':
                top_buffer += 'echo '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_316(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 46, '((\'source\' | \'find process\' | \'find process file\' | \'find files\' | \'make archive\' | \'extract archive\' | \'track archive\' | \'read archive\' | \'change ownership\' | \'change permissions\' | \'move files\' | \'remove file\' | \'network stats\' | \'network interfaces\' | \'make link\' | \'grep\' | \'recursive grep\' | \'read file\' | \'tail file\' | \'list command history\' | \'execute command\' | \'home root\' | \'edit\' | \'list\' | \'list directory\' | \'long list\' | \'long list directory\' | \'make directory\' | \'show disk space\' | \'echo command\'))', e)
            self.firstWord = -1

    # 'switch to' ('superuser' | 'user')
    def gotResults_187(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sudo su - '
            word = fullResults[1 + self.firstWord][0]
            if word == 'superuser':
                top_buffer += '{enter}'
            elif word == 'user':
                pass  # no actions
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_187(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 48, '\'switch to\' (\'superuser\' | \'user\')', e)
            self.firstWord = -1

    # 'switch' ('superuser' | 'user')
    def gotResults_317(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sudo su - '
            word = fullResults[1 + self.firstWord][0]
            if word == 'superuser':
                top_buffer += '{enter}'
            elif word == 'user':
                pass  # no actions
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_317(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 48, '\'switch\' (\'superuser\' | \'user\')', e)
            self.firstWord = -1

    # 'keyac shell' ('superuser')
    def gotResults_188(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'superuser':
                top_buffer += 'su'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_188(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 49, '\'keyac shell\' (\'superuser\')', e)
            self.firstWord = -1

    # 'history'
    def gotResults_189(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+r}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_189(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 56, '\'history\'', e)
            self.firstWord = -1

    # 'search history'
    def gotResults_190(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '!'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_190(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 57, '\'search history\'', e)
            self.firstWord = -1

    # 'list history'
    def gotResults_191(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'history{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_191(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 58, '\'list history\'', e)
            self.firstWord = -1

    # 'break'
    def gotResults_192(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_192(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 59, '\'break\'', e)
            self.firstWord = -1

    # 'break end of file'
    def gotResults_193(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+d}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_193(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 60, '\'break end of file\'', e)
            self.firstWord = -1

    # 'escape process'
    def gotResults_194(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}{ctrl+z}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_194(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 61, '\'escape process\'', e)
            self.firstWord = -1

    # ('foreground' | 'background') 'process'
    def gotResults_195(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'foreground':
                top_buffer += 'fg'
            elif word == 'background':
                top_buffer += 'bg'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_195(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 63, '(\'foreground\' | \'background\') \'process\'', e)
            self.firstWord = -1

    # 'double dash'
    def gotResults_196(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '--'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_196(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 64, '\'double dash\'', e)
            self.firstWord = -1

    # 'Bash Tag File Update'
    def gotResults_197(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_197(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 66, '\'Bash Tag File Update\'', e)
            self.firstWord = -1

    # 'confirm force' ('close' | 'remove')
    def gotResults_198(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'close':
                top_buffer += '{esc}:q!'
            elif word == 'remove':
                top_buffer += 'rm -r'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_198(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 67, '\'confirm force\' (\'close\' | \'remove\')', e)
            self.firstWord = -1

    # 'back directory' 1..9
    def gotResults_199(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            limit = ''
            word = fullResults[1 + self.firstWord][0]
            limit += self.convert_number_word(word)
            for i in range(to_long(limit)):
                top_buffer += '../'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_199(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 68, '\'back directory\' 1..9', e)
            self.firstWord = -1

    # 'enter list'
    def gotResults_200(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{enter}ls{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_200(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 69, '\'enter list\'', e)
            self.firstWord = -1

    # 'change absolute directory'
    def gotResults_201(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{shift}cd -P .{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_201(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 70, '\'change absolute directory\'', e)
            self.firstWord = -1

    # 'present working directory'
    def gotResults_202(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'pwd'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_202(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 71, '\'present working directory\'', e)
            self.firstWord = -1

    # 'search text'
    def gotResults_203(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '| grep '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_203(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 72, '\'search text\'', e)
            self.firstWord = -1

    # 'close shell'
    def gotResults_204(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'exit{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_204(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 73, '\'close shell\'', e)
            self.firstWord = -1

    # ('version' | 'short' | 'short yes' | 'long' | 'help' | 'force' | 'continue' | 'yes') 'option'
    def gotResults_205(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' '
            word = fullResults[0 + self.firstWord][0]
            if word == 'version':
                top_buffer += '--version'
            elif word == 'short':
                top_buffer += '-'
            elif word == 'short yes':
                top_buffer += '-y'
            elif word == 'long':
                top_buffer += '--'
            elif word == 'help':
                top_buffer += '--help'
            elif word == 'force':
                top_buffer += '--force'
            elif word == 'continue':
                top_buffer += '--continue'
            elif word == 'yes':
                top_buffer += '-y'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_205(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 81, '(\'version\' | \'short\' | \'short yes\' | \'long\' | \'help\' | \'force\' | \'continue\' | \'yes\') \'option\'', e)
            self.firstWord = -1

    # ('vim' | 'normal' | 'normal brief') 'diff'
    def gotResults_206(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'vim':
                top_buffer += 'vimdiff'
            elif word == 'normal':
                top_buffer += 'diff'
            elif word == 'normal brief':
                top_buffer += 'diff -q'
            top_buffer += ' \\{,\\}{Left_2}{Del}{Left_3}{Del}{Right}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_206(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 86, '(\'vim\' | \'normal\' | \'normal brief\') \'diff\'', e)
            self.firstWord = -1

    # 'start environment' 1..5
    def gotResults_207(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'source $ENV'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '/bin/activate{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_207(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 102, '\'start environment\' 1..5', e)
            self.firstWord = -1

    # 'stop environment'
    def gotResults_208(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'deactivate{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_208(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 103, '\'stop environment\'', e)
            self.firstWord = -1

    # 'export' ('test' | 'development') 'settings'
    def gotResults_209(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'export DJANGO_SETTINGS_MODULE=settings'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_209(words[3:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 104, '\'export\' (\'test\' | \'development\') \'settings\'', e)
            self.firstWord = -1

    # 'get it fetch'
    def gotResults_210(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'git fetch ssh://tanabarr@review.whamcloud.com:29418/chroma refs/changes/44/19344/10 && git checkout FETCH_HEAD'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_210(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 105, '\'get it fetch\'', e)
            self.firstWord = -1

    # 'Django' ('shell' | 'database shell' | 'sink' | 'sink input' | 'run' | 'dump')
    def gotResults_211(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'python mymanage.py '
            word = fullResults[1 + self.firstWord][0]
            if word == 'shell':
                top_buffer += 'shell'
            elif word == 'database shell':
                top_buffer += 'dbshell'
            elif word == 'sink':
                top_buffer += 'syncdb'
            elif word == 'sink input':
                top_buffer += 'syncdb < input'
            elif word == 'run':
                top_buffer += 'runserver 127.0.0.1:9090'
            elif word == 'dump':
                top_buffer += 'dumpdata'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_211(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 112, '\'Django\' (\'shell\' | \'database shell\' | \'sink\' | \'sink input\' | \'run\' | \'dump\')', e)
            self.firstWord = -1

    # 'fix enter key'
    def gotResults_212(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'stty'
            top_buffer += ' '
            top_buffer += 'sane{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_212(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 114, '\'fix enter key\'', e)
            self.firstWord = -1

    # 'initialisation scripts'
    def gotResults_213(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '/etc/init.d/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_213(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 117, '\'initialisation scripts\'', e)
            self.firstWord = -1

    # 'et cetera'
    def gotResults_214(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '/etc/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_214(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 118, '\'et cetera\'', e)
            self.firstWord = -1

    # 'system config'
    def gotResults_215(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '/etc/sysconfig'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_215(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 119, '\'system config\'', e)
            self.firstWord = -1

    # 'my home' ('one' | 'two')
    def gotResults_216(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'one':
                when_value += 'tan'
            elif word == 'two':
                when_value += 'tom'
            if when_value != "":
                top_buffer += '~'
                word = fullResults[1 + self.firstWord][0]
                if word == 'one':
                    top_buffer += 'tan'
                elif word == 'two':
                    top_buffer += 'tom'
                top_buffer += '/'
            else:
                top_buffer += '~tan/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_216(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 120, '\'my home\' (\'one\' | \'two\')', e)
            self.firstWord = -1

    # 'my home'
    def gotResults_318(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '~'
                top_buffer += ''
                top_buffer += '/'
            else:
                top_buffer += '~tan/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_318(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 120, '\'my home\'', e)
            self.firstWord = -1

    # 'log root'
    def gotResults_217(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '/var/log/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_217(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 121, '\'log root\'', e)
            self.firstWord = -1

    # 'use a lip' ('pie')
    def gotResults_218(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '/usr/lib/'
            word = fullResults[1 + self.firstWord][0]
            if word == 'pie':
                top_buffer += 'python'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_218(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 122, '\'use a lip\' (\'pie\')', e)
            self.firstWord = -1

    # 'use a lip'
    def gotResults_319(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '/usr/lib/'
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_319(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 122, '\'use a lip\'', e)
            self.firstWord = -1

    # ('manager' | 'dependencies' | 'common' | 'bundles' | 'agent' | 'external' | 'simulator')
    def gotResults_219(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'chroma-'
            word = fullResults[0 + self.firstWord][0]
            if word == 'manager':
                top_buffer += 'manager'
            elif word == 'dependencies':
                top_buffer += 'dependencies'
            elif word == 'common':
                top_buffer += 'common'
            elif word == 'bundles':
                top_buffer += 'bundles'
            elif word == 'agent':
                top_buffer += 'agent'
            elif word == 'external':
                top_buffer += 'externals'
            elif word == 'simulator':
                top_buffer += 'sim'
            top_buffer += '/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_219(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 123, '(\'manager\' | \'dependencies\' | \'common\' | \'bundles\' | \'agent\' | \'external\' | \'simulator\')', e)
            self.firstWord = -1

    # 'repeat command' 0..9 0..9
    def gotResults_220(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '!'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg4 += self.convert_number_word(word)
            eval_template_arg5 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg5 += self.convert_number_word(word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_220(words[3:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 134, '\'repeat command\' 0..9 0..9', e)
            self.firstWord = -1

    # 'repeat command' 0..9 0..9 0..9
    def gotResults_221(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '!'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg3 += self.convert_number_word(word)
            eval_template_arg4 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg4 += self.convert_number_word(word)
            eval_template_arg5 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg5 += self.convert_number_word(word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
            if len(words) > 4: self.gotResults_221(words[4:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 135, '\'repeat command\' 0..9 0..9 0..9', e)
            self.firstWord = -1

    # 'repeat command' 0..9 0..9 0..9 0..9
    def gotResults_222(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '!'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += self.convert_number_word(word)
            eval_template_arg3 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg3 += self.convert_number_word(word)
            eval_template_arg4 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg4 += self.convert_number_word(word)
            eval_template_arg5 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg5 += self.convert_number_word(word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
            if len(words) > 5: self.gotResults_222(words[5:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 136, '\'repeat command\' 0..9 0..9 0..9 0..9', e)
            self.firstWord = -1

    # 'replay' 1..9 'commands starting' 1..9 'back'
    def gotResults_223(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            limit = ''
            word = fullResults[1 + self.firstWord][0]
            limit += self.convert_number_word(word)
            for i in range(to_long(limit)):
                top_buffer += '{up_'
                word = fullResults[3 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
                top_buffer += '}'
                top_buffer += '{enter}'
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '500'
                saved_firstWord = self.firstWord
                call_Dragon('Wait', 'i', [dragon2_arg1])
                self.firstWord = saved_firstWord
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
            if len(words) > 5: self.gotResults_223(words[5:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 138, '\'replay\' 1..9 \'commands starting\' 1..9 \'back\'', e)
            self.firstWord = -1

    # 'Journal control'
    def gotResults_224(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'journalctl '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_224(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 144, '\'Journal control\'', e)
            self.firstWord = -1

    # 'firewall command'
    def gotResults_225(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'firewall-cmd '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_225(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 145, '\'firewall command\'', e)
            self.firstWord = -1

    # 'service control'
    def gotResults_226(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'chkconfig '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_226(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 146, '\'service control\'', e)
            self.firstWord = -1

    # 'service control new'
    def gotResults_227(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'systemctl '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_227(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 147, '\'service control new\'', e)
            self.firstWord = -1

    # 'go to'
    def gotResults_228(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'cd '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_228(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 166, '\'go to\'', e)
            self.firstWord = -1

    # 'switch directory'
    def gotResults_229(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{shift}cd -{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_229(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 167, '\'switch directory\'', e)
            self.firstWord = -1

    # 'back directory'
    def gotResults_230(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{shift}cd ..{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_230(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 168, '\'back directory\'', e)
            self.firstWord = -1

    # ('shell' | 'go') 'back directory' 1..9
    def gotResults_231(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'shell':
                when_value += ''
            elif word == 'go':
                when_value += '{enter}'
            if when_value != "":
                top_buffer += 'cd '
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                word = fullResults[2 + self.firstWord][0]
                limit2 += self.convert_number_word(word)
                for i in range(to_long(limit2)):
                    top_buffer += '../'
            else:
                top_buffer += '../'
            word = fullResults[0 + self.firstWord][0]
            if word == 'shell':
                top_buffer += ''
            elif word == 'go':
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_231(words[3:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 170, '(\'shell\' | \'go\') \'back directory\' 1..9', e)
            self.firstWord = -1

    # ('shell' | 'go') 'back directory'
    def gotResults_320(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'shell':
                when_value += ''
            elif word == 'go':
                when_value += '{enter}'
            if when_value != "":
                top_buffer += 'cd '
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    top_buffer += '../'
            else:
                top_buffer += '../'
            word = fullResults[0 + self.firstWord][0]
            if word == 'shell':
                top_buffer += ''
            elif word == 'go':
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_320(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 170, '(\'shell\' | \'go\') \'back directory\'', e)
            self.firstWord = -1

    def get_usage(self, list_buffer, functional, word):
        if word == 'usage':
            list_buffer += '-h'
        elif word == 'usage kilobytes':
            list_buffer += ''
        elif word == 'usage megabytes':
            list_buffer += '-m'
        return list_buffer

    # 'show disk' <usage>
    def gotResults_232(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'du '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_usage(top_buffer, False, word)
            top_buffer += ' -s -- .{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 174, '\'show disk\' <usage>', e)
            self.firstWord = -1

    # 'W get'
    def gotResults_233(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'wget'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_233(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 177, '\'W get\'', e)
            self.firstWord = -1

    # 'cool'
    def gotResults_234(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'curl'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_234(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 178, '\'cool\'', e)
            self.firstWord = -1

    # 'postgres sequel'
    def gotResults_235(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'postgresql'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_235(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 179, '\'postgres sequel\'', e)
            self.firstWord = -1

    # 'engine X'
    def gotResults_236(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'nginx'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_236(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 180, '\'engine X\'', e)
            self.firstWord = -1

    # 'packet to dump'
    def gotResults_237(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'tcpdump '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_237(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 185, '\'packet to dump\'', e)
            self.firstWord = -1

    # 'packet dump'
    def gotResults_321(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'tcpdump '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_321(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 185, '\'packet dump\'', e)
            self.firstWord = -1

    # 'remote login' ('root') ('cluster')
    def gotResults_238(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ssh '
            word = fullResults[1 + self.firstWord][0]
            if word == 'root':
                top_buffer += 'root@'
            word = fullResults[2 + self.firstWord][0]
            if word == 'cluster':
                top_buffer += 'lotus-32vm'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_238(words[3:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 194, '\'remote login\' (\'root\') (\'cluster\')', e)
            self.firstWord = -1

    # 'remote login' ('root')
    def gotResults_323(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ssh '
            word = fullResults[1 + self.firstWord][0]
            if word == 'root':
                top_buffer += 'root@'
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_323(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 194, '\'remote login\' (\'root\')', e)
            self.firstWord = -1

    # 'remote login' ('cluster')
    def gotResults_322(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ssh '
            top_buffer += ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'cluster':
                top_buffer += 'lotus-32vm'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_322(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 194, '\'remote login\' (\'cluster\')', e)
            self.firstWord = -1

    # 'remote login'
    def gotResults_324(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ssh '
            top_buffer += ''
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_324(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 194, '\'remote login\'', e)
            self.firstWord = -1

    # 'multiple get'
    def gotResults_239(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'mget '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_239(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 201, '\'multiple get\'', e)
            self.firstWord = -1

    # 'local change directory'
    def gotResults_240(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'lcd '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_240(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 202, '\'local change directory\'', e)
            self.firstWord = -1

    # 'local working directory'
    def gotResults_241(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'lpwd{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_241(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 204, '\'local working directory\'', e)
            self.firstWord = -1

    # 'public key' ('15' | '11' | '12') ('init' | 'tool')
    def gotResults_242(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'pkcs'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '-'
            word = fullResults[2 + self.firstWord][0]
            top_buffer += word
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_242(words[3:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 228, '\'public key\' (\'15\' | \'11\' | \'12\') (\'init\' | \'tool\')', e)
            self.firstWord = -1

    # 'public key' ('15' | '11' | '12')
    def gotResults_325(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'pkcs'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '-'
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_325(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 228, '\'public key\' (\'15\' | \'11\' | \'12\')', e)
            self.firstWord = -1

    # 'skip on'
    def gotResults_243(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+f}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_243(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 235, '\'skip on\'', e)
            self.firstWord = -1

    # ('pool' | 'she said') ('history' | 'status' | 'list' | 'destroy' | 'create') ('go')
    def gotResults_244(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'pool':
                top_buffer += 'zpool'
            elif word == 'she said':
                top_buffer += 'zfs'
            top_buffer += ' '
            word = fullResults[1 + self.firstWord][0]
            if word == 'history':
                top_buffer += 'history'
            elif word == 'status':
                top_buffer += 'status'
            elif word == 'list':
                top_buffer += 'list{enter}'
            elif word == 'destroy':
                top_buffer += 'destroy'
            elif word == 'create':
                top_buffer += 'create'
            top_buffer += ' '
            word = fullResults[2 + self.firstWord][0]
            if word == 'go':
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_244(words[3:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 243, '(\'pool\' | \'she said\') (\'history\' | \'status\' | \'list\' | \'destroy\' | \'create\') (\'go\')', e)
            self.firstWord = -1

    # ('pool' | 'she said') ('history' | 'status' | 'list' | 'destroy' | 'create')
    def gotResults_326(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'pool':
                top_buffer += 'zpool'
            elif word == 'she said':
                top_buffer += 'zfs'
            top_buffer += ' '
            word = fullResults[1 + self.firstWord][0]
            if word == 'history':
                top_buffer += 'history'
            elif word == 'status':
                top_buffer += 'status'
            elif word == 'list':
                top_buffer += 'list{enter}'
            elif word == 'destroy':
                top_buffer += 'destroy'
            elif word == 'create':
                top_buffer += 'create'
            top_buffer += ' '
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_326(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 243, '(\'pool\' | \'she said\') (\'history\' | \'status\' | \'list\' | \'destroy\' | \'create\')', e)
            self.firstWord = -1

    # 'pool' ('import' | 'export') ('go')
    def gotResults_245(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'zpool '
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += ' '
            word = fullResults[2 + self.firstWord][0]
            if word == 'go':
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_245(words[3:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 244, '\'pool\' (\'import\' | \'export\') (\'go\')', e)
            self.firstWord = -1

    # 'pool' ('import' | 'export')
    def gotResults_328(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'zpool '
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += ' '
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_328(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 244, '\'pool\' (\'import\' | \'export\')', e)
            self.firstWord = -1

    # 'pool' ('go')
    def gotResults_327(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'zpool '
            top_buffer += ''
            top_buffer += ' '
            word = fullResults[1 + self.firstWord][0]
            if word == 'go':
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_327(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 244, '\'pool\' (\'go\')', e)
            self.firstWord = -1

    # 'pool'
    def gotResults_329(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'zpool '
            top_buffer += ''
            top_buffer += ' '
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_329(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 244, '\'pool\'', e)
            self.firstWord = -1

    # 'pace' ('monitor' | 'resource' | 'resource resource')
    def gotResults_246(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'crm_'
            word = fullResults[1 + self.firstWord][0]
            if word == 'monitor':
                top_buffer += 'mon -1{enter}'
            elif word == 'resource':
                top_buffer += 'resource '
            elif word == 'resource resource':
                top_buffer += 'resource --resource '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_246(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 254, '\'pace\' (\'monitor\' | \'resource\' | \'resource resource\')', e)
            self.firstWord = -1

    # 'probe'
    def gotResults_247(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'modprobe '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_247(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 256, '\'probe\'', e)
            self.firstWord = -1

    # 'check return'
    def gotResults_248(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'echo $?{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_248(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 257, '\'check return\'', e)
            self.firstWord = -1

    # 'remove target'
    def gotResults_249(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'http -v PUT https://localhost:8000/api/target/16/ state=removed --verify=no --session=iml'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_249(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 263, '\'remove target\'', e)
            self.firstWord = -1

    # 'list volumes'
    def gotResults_250(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'http -v GET https://localhost:8000/api/volume/ --verify=no --session=iml'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_250(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 264, '\'list volumes\'', e)
            self.firstWord = -1

    # 'cygwin package' ('manager' | 'install' | 'remove' | 'update' | 'upgrade')
    def gotResults_251(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sudo apt-cyg '
            word = fullResults[1 + self.firstWord][0]
            if word == 'manager':
                pass  # no actions
            elif word == 'install':
                top_buffer += 'install'
            elif word == 'remove':
                top_buffer += 'remove'
            elif word == 'update':
                top_buffer += 'update'
            elif word == 'upgrade':
                top_buffer += 'upgrade'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_251(words[2:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 10, '\'cygwin package\' (\'manager\' | \'install\' | \'remove\' | \'update\' | \'upgrade\')', e)
            self.firstWord = -1

    # 'package' ('manager' | 'install' | 'remove' | 'update' | 'upgrade')
    def gotResults_252(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sudo apt-get '
            word = fullResults[1 + self.firstWord][0]
            if word == 'manager':
                pass  # no actions
            elif word == 'install':
                top_buffer += 'install'
            elif word == 'remove':
                top_buffer += 'remove'
            elif word == 'update':
                top_buffer += 'update'
            elif word == 'upgrade':
                top_buffer += 'upgrade'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_252(words[2:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 11, '\'package\' (\'manager\' | \'install\' | \'remove\' | \'update\' | \'upgrade\')', e)
            self.firstWord = -1

    # 'find package'
    def gotResults_253(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sudo apt-cache search '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_253(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 12, '\'find package\'', e)
            self.firstWord = -1

    # 'Add' ('link' | 'torrent' | 'magnet')
    def gotResults_254(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'deluge-console'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '20'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1000'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += 'add '
            top_buffer += '"'
            top_buffer += '{Shift+Ins}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '"'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_254(words[2:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 17, '\'Add\' (\'link\' | \'torrent\' | \'magnet\')', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None
