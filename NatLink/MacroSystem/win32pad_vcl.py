# NatLink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.5, Wed Jun 22 09:48:32 2016

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """
        <dgndictation> imported;
        <modifiers> = ('shift' | 'control' | 'control shift' | 'shift control' ) ;
        <unrepeatable_chord> = (('first' | 'start-of-line' ) | ('last' | 'end-of-line' ) | ('top-of-file' | 'top-of-buffer' ) | ('end-of-file' | 'end-of-buffer' ) ) ;
        <1> = ((('first' | 'start-of-line' ) | ('last' | 'end-of-line' ) | ('top-of-file' | 'top-of-buffer' ) | ('end-of-file' | 'end-of-buffer' ) ) ) ;
        <2> = (('shift' | 'control' | 'control shift' | 'shift control' ) ) <unrepeatable_chord> ;
        <chord> = ('soar' | 'down' | 'left' | 'right' | 'back' | 'erase' | 'tab' | 'space' | 'enter' | 'page up' | 'page down' | 'flee' | 'start-word' ) ;
        <3> = (('soar' | 'down' | 'left' | 'right' | 'back' | 'erase' | 'tab' | 'space' | 'enter' | 'page up' | 'page down' | 'flee' | 'start-word' ) ) ;
        <4> = <chord> ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 'ten' | 'eleven' | 'twelve' | 'thirteen' | 'fourteen' | 'fifteen' | 'sixteen' | 'seventeen' | 'eighteen' | 'nineteen' | 'twenty' | 'twenty-one' | 'twenty-two' | 'twenty-three' | 'twenty-four' | 'twenty-five' | 'twenty-six' | 'twenty-seven' | 'twenty-eight' | 'twenty-nine' | 'thirty' | 'thirty-one' | 'thirty-two' | 'thirty-three' | 'thirty-four' | 'thirty-five' | 'thirty-six' | 'thirty-seven' | 'thirty-eight' | 'thirty-nine' | 'forty' | 'forty-one' | 'forty-two' | 'forty-three' | 'forty-four' | 'forty-five' | 'forty-six' | 'forty-seven' | 'forty-eight' | 'forty-nine' | 'fifty' | 'fifty-one' | 'fifty-two' | 'fifty-three' | 'fifty-four' | 'fifty-five' | 'fifty-six' | 'fifty-seven' | 'fifty-eight' | 'fifty-nine' | 'sixty' | 'sixty-one' | 'sixty-two' | 'sixty-three' | 'sixty-four' | 'sixty-five' | 'sixty-six' | 'sixty-seven' | 'sixty-eight' | 'sixty-nine' | 'seventy' | 'seventy-one' | 'seventy-two' | 'seventy-three' | 'seventy-four' | 'seventy-five' | 'seventy-six' | 'seventy-seven' | 'seventy-eight' | 'seventy-nine' | 'eighty' | 'eighty-one' | 'eighty-two' | 'eighty-three' | 'eighty-four' | 'eighty-five' | 'eighty-six' | 'eighty-seven' | 'eighty-eight' | 'eighty-nine' | 'ninety' | 'ninety-one' | 'ninety-two' | 'ninety-three' | 'ninety-four' | 'ninety-five' | 'ninety-six' | 'ninety-seven' | 'ninety-eight' | 'ninety-nine' | 100) ;
        <5> = (('shift' | 'control' | 'control shift' | 'shift control' ) ) <chord> ;
        <6> = <modifiers> <chord> ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 'ten' | 'eleven' | 'twelve' | 'thirteen' | 'fourteen' | 'fifteen' | 'sixteen' | 'seventeen' | 'eighteen' | 'nineteen' | 'twenty' | 'twenty-one' | 'twenty-two' | 'twenty-three' | 'twenty-four' | 'twenty-five' | 'twenty-six' | 'twenty-seven' | 'twenty-eight' | 'twenty-nine' | 'thirty' | 'thirty-one' | 'thirty-two' | 'thirty-three' | 'thirty-four' | 'thirty-five' | 'thirty-six' | 'thirty-seven' | 'thirty-eight' | 'thirty-nine' | 'forty' | 'forty-one' | 'forty-two' | 'forty-three' | 'forty-four' | 'forty-five' | 'forty-six' | 'forty-seven' | 'forty-eight' | 'forty-nine' | 'fifty' | 'fifty-one' | 'fifty-two' | 'fifty-three' | 'fifty-four' | 'fifty-five' | 'fifty-six' | 'fifty-seven' | 'fifty-eight' | 'fifty-nine' | 'sixty' | 'sixty-one' | 'sixty-two' | 'sixty-three' | 'sixty-four' | 'sixty-five' | 'sixty-six' | 'sixty-seven' | 'sixty-eight' | 'sixty-nine' | 'seventy' | 'seventy-one' | 'seventy-two' | 'seventy-three' | 'seventy-four' | 'seventy-five' | 'seventy-six' | 'seventy-seven' | 'seventy-eight' | 'seventy-nine' | 'eighty' | 'eighty-one' | 'eighty-two' | 'eighty-three' | 'eighty-four' | 'eighty-five' | 'eighty-six' | 'eighty-seven' | 'eighty-eight' | 'eighty-nine' | 'ninety' | 'ninety-one' | 'ninety-two' | 'ninety-three' | 'ninety-four' | 'ninety-five' | 'ninety-six' | 'ninety-seven' | 'ninety-eight' | 'ninety-nine' | 100) ;
        <7> = ('copy that' | 'copy region' ) ;
        <8> = ('cut that' | 'destroy region' ) ;
        <9> = ('paste that' | 'yank' ) ;
        <kill_word> = ('kill' | 'pull-word' ) ;
        <10> = (('kill' | 'pull-word' ) ) ;
        <11> = <kill_word> ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 'ten' | 'eleven' | 'twelve' | 'thirteen' | 'fourteen' | 'fifteen' | 'sixteen' | 'seventeen' | 'eighteen' | 'nineteen' | 'twenty' | 'twenty-one' | 'twenty-two' | 'twenty-three' | 'twenty-four' | 'twenty-five' | 'twenty-six' | 'twenty-seven' | 'twenty-eight' | 'twenty-nine' | 'thirty' | 'thirty-one' | 'thirty-two' | 'thirty-three' | 'thirty-four' | 'thirty-five' | 'thirty-six' | 'thirty-seven' | 'thirty-eight' | 'thirty-nine' | 'forty' | 'forty-one' | 'forty-two' | 'forty-three' | 'forty-four' | 'forty-five' | 'forty-six' | 'forty-seven' | 'forty-eight' | 'forty-nine' | 'fifty' | 'fifty-one' | 'fifty-two' | 'fifty-three' | 'fifty-four' | 'fifty-five' | 'fifty-six' | 'fifty-seven' | 'fifty-eight' | 'fifty-nine' | 'sixty' | 'sixty-one' | 'sixty-two' | 'sixty-three' | 'sixty-four' | 'sixty-five' | 'sixty-six' | 'sixty-seven' | 'sixty-eight' | 'sixty-nine' | 'seventy' | 'seventy-one' | 'seventy-two' | 'seventy-three' | 'seventy-four' | 'seventy-five' | 'seventy-six' | 'seventy-seven' | 'seventy-eight' | 'seventy-nine' | 'eighty' | 'eighty-one' | 'eighty-two' | 'eighty-three' | 'eighty-four' | 'eighty-five' | 'eighty-six' | 'eighty-seven' | 'eighty-eight' | 'eighty-nine' | 'ninety' | 'ninety-one' | 'ninety-two' | 'ninety-three' | 'ninety-four' | 'ninety-five' | 'ninety-six' | 'ninety-seven' | 'ninety-eight' | 'ninety-nine' | 100) ;
        <direction> = ('start' | 'rest' ) ;
        <12> = 'copy start' ;
        <13> = 'copy rest' ;
        <14> = 'highlight' <direction> ;
        <15> = 'destroy' <direction> ;
        <16> = 'toggle line numbers' ;
        <r> = ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 'ten' | 'eleven' | 'twelve' | 'thirteen' | 'fourteen' | 'fifteen' | 'sixteen' | 'seventeen' | 'eighteen' | 'nineteen' | 'twenty' | 'twenty-one' | 'twenty-two' | 'twenty-three' | 'twenty-four' | 'twenty-five' | 'twenty-six' | 'twenty-seven' | 'twenty-eight' | 'twenty-nine' | 'thirty' | 'thirty-one' | 'thirty-two' | 'thirty-three' | 'thirty-four' | 'thirty-five' | 'thirty-six' | 'thirty-seven' | 'thirty-eight' | 'thirty-nine' | 'forty' | 'forty-one' | 'forty-two' | 'forty-three' | 'forty-four' | 'forty-five' | 'forty-six' | 'forty-seven' | 'forty-eight' | 'forty-nine' | 'fifty' | 'fifty-one' | 'fifty-two' | 'fifty-three' | 'fifty-four' | 'fifty-five' | 'fifty-six' | 'fifty-seven' | 'fifty-eight' | 'fifty-nine' | 'sixty' | 'sixty-one' | 'sixty-two' | 'sixty-three' | 'sixty-four' | 'sixty-five' | 'sixty-six' | 'sixty-seven' | 'sixty-eight' | 'sixty-nine' | 'seventy' | 'seventy-one' | 'seventy-two' | 'seventy-three' | 'seventy-four' | 'seventy-five' | 'seventy-six' | 'seventy-seven' | 'seventy-eight' | 'seventy-nine' | 'eighty' | 'eighty-one' | 'eighty-two' | 'eighty-three' | 'eighty-four' | 'eighty-five' | 'eighty-six' | 'eighty-seven' | 'eighty-eight' | 'eighty-nine' | 'ninety' | 'ninety-one' | 'ninety-two' | 'ninety-three' | 'ninety-four' | 'ninety-five' | 'ninety-six' | 'ninety-seven' | 'ninety-eight' | 'ninety-nine') ;
        <17> = ('go' | 'row' | 'line' ) <r> ;
        <leap> = ('leap' | 'retreat' ) ;
        <count> = ('first' | 'second' | 'third' | 'fourth' ) ;
        <18> = (('leap' | 'retreat' ) ) <printable> ;
        <19> = <leap> 'after' <printable> ;
        <20> = (('leap' | 'retreat' ) ) <count> <printable> ;
        <21> = <leap> 'after' <count> <printable> ;
        <22> = 'advance' <dgndictation> ;
        <23> = 'fallback' <dgndictation> ;
        <24> = 'key' <printable> ;
        <25> = 'dictate' <dgndictation> ;
        <change> = ('lower-a-word' | 'upper-a-word' | 'cap-a-word' ) ;
        <26> = (('lower-a-word' | 'upper-a-word' | 'cap-a-word' ) ) ;
        <27> = <change> ('two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 'ten' | 'eleven' | 'twelve' | 'thirteen' | 'fourteen' | 'fifteen' | 'sixteen' | 'seventeen' | 'eighteen' | 'nineteen' | 'twenty') ;
        <28> = 'escape' ;
        <29> = 'undo that' ;
        <40> = 'undo' ;
        <30> = 'redo that' ;
        <41> = 'redo' ;
        <31> = ('file open' | 'find file' ) ;
        <32> = ('file save as' | 'save as' | 'write file' ) ;
        <33> = ('file save' | 'save file' ) ;
        <34> = 'new file' ;
        <35> = 'new instance' ;
        <36> = 'please' ('reload' | 'revert buffer' ) ;
        <37> = 'insert file' ;
        <38> = 'search and replace' ;
        <39> = 'word wrap mode' ;
        <printable> = ('space' | '!' | 'bang' | '"' | 'quote' | '#' | 'pound' | '$' | 'dollar' | '%' | 'percent' | '&' | "'" | 'apostrophe' | 'single' | '(' | 'paren' | ')' | 'close paren' | '*' | 'asterisk' | 'star' | '+' | 'plus' | ',' | '-' | 'minus' | '.' | 'dot' | '/' | 'zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | ':' | ';' | 'semi' | '<' | 'bend' | '=' | 'equal' | 'equals' | '>' | 'close bend' | '?' | 'question' | '@' | 'big Alpha' | 'big Bravo' | 'big Charlie' | 'big Delta' | 'big echo' | 'big foxtrot' | 'big golf' | 'big Hotel' | 'big India' | 'big Juliett' | 'big kilo' | 'big Lima' | 'big Mike' | 'big November' | 'big Oscar' | 'big Papa' | 'big Quebec' | 'big Romeo' | 'big Sierra' | 'big tango' | 'big uniform' | 'big Victor' | 'big whiskey' | 'big x-ray' | 'big Yankee' | 'big Zulu' | '[' | 'bracket' | 'backslash' | ']' | 'close bracket' | '^' | '_' | '`' | 'Alpha' | 'Bravo' | 'Charlie' | 'Delta' | 'echo' | 'foxtrot' | 'golf' | 'Hotel' | 'India' | 'Juliett' | 'kilo' | 'Lima' | 'Mike' | 'November' | 'Oscar' | 'Papa' | 'Quebec' | 'Romeo' | 'Sierra' | 'tango' | 'uniform' | 'Victor' | 'whiskey' | 'x-ray' | 'Yankee' | 'Zulu' | '{' | 'brace' | '|' | 'vertical bar' | 'bar' | '}' | 'close brace' | '~' ) ;
        <any> = <1>|<2>|<3>|<4>|<5>|<6>|<7>|<8>|<9>|<10>|<11>|<12>|<13>|<14>|<15>|<16>|<17>|<18>|<19>|<20>|<21>|<22>|<23>|<24>|<25>|<26>|<27>|<28>|<29>|<40>|<30>|<41>|<31>|<32>|<33>|<34>|<35>|<36>|<37>|<38>|<39>;
        <sequence> exported = <any> [<any> [<any> [<any>]]];
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.ruleSet1 = ['sequence']

    def gotBegin(self,moduleInfo):
        # Return if wrong application
        window = matchWindow(moduleInfo,'win32pad','')
        if not window: return None
        self.firstWord = 0
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        self.deactivateAll()
        title = string.lower(moduleInfo[1])
        if string.find(title,'') >= 0:
            for rule in self.ruleSet1:
                try:
                    self.activate(rule,window)
                except natlink.BadWindow:
                    pass

    def convert_number_word(self, word):
        if   word == 'zero':
            return '0'
        elif word == 'one':
            return '1'
        elif word == 'two':
            return '2'
        elif word == 'three':
            return '3'
        elif word == 'four':
            return '4'
        elif word == 'five':
            return '5'
        elif word == 'six':
            return '6'
        elif word == 'seven':
            return '7'
        elif word == 'eight':
            return '8'
        elif word == 'nine':
            return '9'
        elif word == 'ten':
            return '10'
        elif word == 'eleven':
            return '11'
        elif word == 'twelve':
            return '12'
        elif word == 'thirteen':
            return '13'
        elif word == 'fourteen':
            return '14'
        elif word == 'fifteen':
            return '15'
        elif word == 'sixteen':
            return '16'
        elif word == 'seventeen':
            return '17'
        elif word == 'eighteen':
            return '18'
        elif word == 'nineteen':
            return '19'
        elif word == 'twenty':
            return '20'
        elif word == 'twenty-one':
            return '21'
        elif word == 'twenty-two':
            return '22'
        elif word == 'twenty-three':
            return '23'
        elif word == 'twenty-four':
            return '24'
        elif word == 'twenty-five':
            return '25'
        elif word == 'twenty-six':
            return '26'
        elif word == 'twenty-seven':
            return '27'
        elif word == 'twenty-eight':
            return '28'
        elif word == 'twenty-nine':
            return '29'
        elif word == 'thirty':
            return '30'
        elif word == 'thirty-one':
            return '31'
        elif word == 'thirty-two':
            return '32'
        elif word == 'thirty-three':
            return '33'
        elif word == 'thirty-four':
            return '34'
        elif word == 'thirty-five':
            return '35'
        elif word == 'thirty-six':
            return '36'
        elif word == 'thirty-seven':
            return '37'
        elif word == 'thirty-eight':
            return '38'
        elif word == 'thirty-nine':
            return '39'
        elif word == 'forty':
            return '40'
        elif word == 'forty-one':
            return '41'
        elif word == 'forty-two':
            return '42'
        elif word == 'forty-three':
            return '43'
        elif word == 'forty-four':
            return '44'
        elif word == 'forty-five':
            return '45'
        elif word == 'forty-six':
            return '46'
        elif word == 'forty-seven':
            return '47'
        elif word == 'forty-eight':
            return '48'
        elif word == 'forty-nine':
            return '49'
        elif word == 'fifty':
            return '50'
        elif word == 'fifty-one':
            return '51'
        elif word == 'fifty-two':
            return '52'
        elif word == 'fifty-three':
            return '53'
        elif word == 'fifty-four':
            return '54'
        elif word == 'fifty-five':
            return '55'
        elif word == 'fifty-six':
            return '56'
        elif word == 'fifty-seven':
            return '57'
        elif word == 'fifty-eight':
            return '58'
        elif word == 'fifty-nine':
            return '59'
        elif word == 'sixty':
            return '60'
        elif word == 'sixty-one':
            return '61'
        elif word == 'sixty-two':
            return '62'
        elif word == 'sixty-three':
            return '63'
        elif word == 'sixty-four':
            return '64'
        elif word == 'sixty-five':
            return '65'
        elif word == 'sixty-six':
            return '66'
        elif word == 'sixty-seven':
            return '67'
        elif word == 'sixty-eight':
            return '68'
        elif word == 'sixty-nine':
            return '69'
        elif word == 'seventy':
            return '70'
        elif word == 'seventy-one':
            return '71'
        elif word == 'seventy-two':
            return '72'
        elif word == 'seventy-three':
            return '73'
        elif word == 'seventy-four':
            return '74'
        elif word == 'seventy-five':
            return '75'
        elif word == 'seventy-six':
            return '76'
        elif word == 'seventy-seven':
            return '77'
        elif word == 'seventy-eight':
            return '78'
        elif word == 'seventy-nine':
            return '79'
        elif word == 'eighty':
            return '80'
        elif word == 'eighty-one':
            return '81'
        elif word == 'eighty-two':
            return '82'
        elif word == 'eighty-three':
            return '83'
        elif word == 'eighty-four':
            return '84'
        elif word == 'eighty-five':
            return '85'
        elif word == 'eighty-six':
            return '86'
        elif word == 'eighty-seven':
            return '87'
        elif word == 'eighty-eight':
            return '88'
        elif word == 'eighty-nine':
            return '89'
        elif word == 'ninety':
            return '90'
        elif word == 'ninety-one':
            return '91'
        elif word == 'ninety-two':
            return '92'
        elif word == 'ninety-three':
            return '93'
        elif word == 'ninety-four':
            return '94'
        elif word == 'ninety-five':
            return '95'
        elif word == 'ninety-six':
            return '96'
        elif word == 'ninety-seven':
            return '97'
        elif word == 'ninety-eight':
            return '98'
        elif word == 'ninety-nine':
            return '99'
        else:
            return word

    def get_modifiers(self, list_buffer, functional, word):
        if word == 'shift':
            list_buffer += 'shift+'
        elif word == 'control':
            list_buffer += 'ctrl+'
        elif word == 'control shift':
            list_buffer += 'ctrl+shift+'
        elif word == 'shift control':
            list_buffer += 'ctrl+shift+'
        return list_buffer

    def get_unrepeatable_chord(self, list_buffer, functional, word):
        if word == 'first':
            list_buffer += 'home'
        elif word == 'start-of-line':
            list_buffer += 'home'
        elif word == 'last':
            list_buffer += 'end'
        elif word == 'end-of-line':
            list_buffer += 'end'
        elif word == 'top-of-file':
            list_buffer += 'ctrl+home'
        elif word == 'top-of-buffer':
            list_buffer += 'ctrl+home'
        elif word == 'end-of-file':
            list_buffer += 'ctrl+end'
        elif word == 'end-of-buffer':
            list_buffer += 'ctrl+end'
        return list_buffer

    # ((('first' | 'start-of-line') | ('last' | 'end-of-line') | ('top-of-file' | 'top-of-buffer') | ('end-of-file' | 'end-of-buffer')))
    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'first':
                top_buffer += 'home'
            elif word == 'start-of-line':
                top_buffer += 'home'
            elif word == 'last':
                top_buffer += 'end'
            elif word == 'end-of-line':
                top_buffer += 'end'
            elif word == 'top-of-file':
                top_buffer += 'ctrl+home'
            elif word == 'top-of-buffer':
                top_buffer += 'ctrl+home'
            elif word == 'end-of-file':
                top_buffer += 'ctrl+end'
            elif word == 'end-of-buffer':
                top_buffer += 'ctrl+end'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_1(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 40, '(((\'first\' | \'start-of-line\') | (\'last\' | \'end-of-line\') | (\'top-of-file\' | \'top-of-buffer\') | (\'end-of-file\' | \'end-of-buffer\')))', e)
            self.firstWord = -1

    # (('shift' | 'control' | 'control shift' | 'shift control')) <unrepeatable_chord>
    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'shift':
                top_buffer += 'shift+'
            elif word == 'control':
                top_buffer += 'ctrl+'
            elif word == 'control shift':
                top_buffer += 'ctrl+shift+'
            elif word == 'shift control':
                top_buffer += 'ctrl+shift+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_unrepeatable_chord(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad.vcl', 41, '((\'shift\' | \'control\' | \'control shift\' | \'shift control\')) <unrepeatable_chord>', e)
            self.firstWord = -1

    def get_chord(self, list_buffer, functional, word):
        if word == 'soar':
            list_buffer += 'up'
        elif word == 'down':
            list_buffer += 'down'
        elif word == 'left':
            list_buffer += 'left'
        elif word == 'right':
            list_buffer += 'right'
        elif word == 'back':
            list_buffer += 'backspace'
        elif word == 'erase':
            list_buffer += 'del'
        elif word == 'tab':
            list_buffer += 'tab'
        elif word == 'space':
            list_buffer += 'space'
        elif word == 'enter':
            list_buffer += 'enter'
        elif word == 'page up':
            list_buffer += 'PgUp'
        elif word == 'page down':
            list_buffer += 'PgDn'
        elif word == 'flee':
            list_buffer += 'ctrl+left'
        elif word == 'start-word':
            list_buffer += 'ctrl+right'
        return list_buffer

    # (('soar' | 'down' | 'left' | 'right' | 'back' | 'erase' | 'tab' | 'space' | 'enter' | 'page up' | 'page down' | 'flee' | 'start-word'))
    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'soar':
                top_buffer += 'up'
            elif word == 'down':
                top_buffer += 'down'
            elif word == 'left':
                top_buffer += 'left'
            elif word == 'right':
                top_buffer += 'right'
            elif word == 'back':
                top_buffer += 'backspace'
            elif word == 'erase':
                top_buffer += 'del'
            elif word == 'tab':
                top_buffer += 'tab'
            elif word == 'space':
                top_buffer += 'space'
            elif word == 'enter':
                top_buffer += 'enter'
            elif word == 'page up':
                top_buffer += 'PgUp'
            elif word == 'page down':
                top_buffer += 'PgDn'
            elif word == 'flee':
                top_buffer += 'ctrl+left'
            elif word == 'start-word':
                top_buffer += 'ctrl+right'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_3(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 61, '((\'soar\' | \'down\' | \'left\' | \'right\' | \'back\' | \'erase\' | \'tab\' | \'space\' | \'enter\' | \'page up\' | \'page down\' | \'flee\' | \'start-word\'))', e)
            self.firstWord = -1

    # <chord> 1..100
    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_chord(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad.vcl', 62, '<chord> 1..100', e)
            self.firstWord = -1

    # (('shift' | 'control' | 'control shift' | 'shift control')) <chord>
    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'shift':
                top_buffer += 'shift+'
            elif word == 'control':
                top_buffer += 'ctrl+'
            elif word == 'control shift':
                top_buffer += 'ctrl+shift+'
            elif word == 'shift control':
                top_buffer += 'ctrl+shift+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_chord(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad.vcl', 63, '((\'shift\' | \'control\' | \'control shift\' | \'shift control\')) <chord>', e)
            self.firstWord = -1

    # <modifiers> <chord> 1..100
    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_modifiers(top_buffer, False, word)
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_chord(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('win32pad.vcl', 64, '<modifiers> <chord> 1..100', e)
            self.firstWord = -1

    # ('copy that' | 'copy region')
    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_7(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 71, '(\'copy that\' | \'copy region\')', e)
            self.firstWord = -1

    # ('cut that' | 'destroy region')
    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+x}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_8(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 72, '(\'cut that\' | \'destroy region\')', e)
            self.firstWord = -1

    # ('paste that' | 'yank')
    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_9(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 73, '(\'paste that\' | \'yank\')', e)
            self.firstWord = -1

    def get_kill_word(self, list_buffer, functional, word):
        if word == 'kill':
            list_buffer += 'ctrl+shift+left'
        elif word == 'pull-word':
            list_buffer += 'ctrl+shift+right'
        return list_buffer

    # (('kill' | 'pull-word'))
    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'kill':
                top_buffer += 'ctrl+shift+left'
            elif word == 'pull-word':
                top_buffer += 'ctrl+shift+right'
            top_buffer += '}{ctrl+x}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_10(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 78, '((\'kill\' | \'pull-word\'))', e)
            self.firstWord = -1

    # <kill_word> 1..100
    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_kill_word(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}{ctrl+x}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad.vcl', 79, '<kill_word> 1..100', e)
            self.firstWord = -1

    def get_direction(self, list_buffer, functional, word):
        if word == 'start':
            list_buffer += '{shift+home}'
        elif word == 'rest':
            list_buffer += '{shift+end}{shift+left}'
        return list_buffer

    # 'copy start'
    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{shift+home}'
            top_buffer += '{ctrl+c}'
            top_buffer += '{right}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_12(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 84, '\'copy start\'', e)
            self.firstWord = -1

    # 'copy rest'
    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{shift+end}{shift+left}'
            top_buffer += '{ctrl+c}'
            top_buffer += '{left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_13(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 85, '\'copy rest\'', e)
            self.firstWord = -1

    # 'highlight' <direction>
    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_direction(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad.vcl', 87, '\'highlight\' <direction>', e)
            self.firstWord = -1

    # 'destroy' <direction>
    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_direction(top_buffer, False, word)
            top_buffer += '{ctrl+x}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad.vcl', 88, '\'destroy\' <direction>', e)
            self.firstWord = -1

    # 'toggle line numbers'
    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+l}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_16(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 95, '\'toggle line numbers\'', e)
            self.firstWord = -1

    def get_r(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # ('go' | 'row' | 'line') <r>
    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_save()
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_restore()
            eval_template_arg1 = ''
            eval_template_arg1 += 'max(%i,%i)'
            eval_template_arg2 = ''
            eval_template_arg2 += '1'
            eval_template_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '%i + %i'
            eval_template2_arg2 = ''
            extension3_arg1 = ''
            extension3_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template2_arg2 += str(vocola_ext_variables.variable_get(extension3_arg1))
            eval_template2_arg3 = ''
            eval_template3_arg1 = ''
            eval_template3_arg1 += '(%i-%i+50)%%100 - 50'
            eval_template3_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template3_arg2 = self.get_r(eval_template3_arg2, True, word)
            eval_template3_arg3 = ''
            extension4_arg1 = ''
            extension4_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template3_arg3 += str(vocola_ext_variables.variable_get(extension4_arg1))
            eval_template2_arg3 += eval_template(eval_template3_arg1, eval_template3_arg2, eval_template3_arg3)
            eval_template_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2, eval_template2_arg3)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad.vcl', 102, '(\'go\' | \'row\' | \'line\') <r>', e)
            self.firstWord = -1

    def get_leap(self, list_buffer, functional, word):
        if word == 'leap':
            list_buffer += 'd'
        elif word == 'retreat':
            list_buffer += 'u'
        return list_buffer

    def get_count(self, list_buffer, functional, word):
        if word == 'first':
            list_buffer += '1'
        elif word == 'second':
            list_buffer += '2'
        elif word == 'third':
            list_buffer += '3'
        elif word == 'fourth':
            list_buffer += '4'
        return list_buffer

    # (('leap' | 'retreat')) <printable>
    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{shift+right}'
            top_buffer += '{ctrl+f}'
            top_buffer += '{alt+c}-'
            top_buffer += '{alt+w}-'
            top_buffer += '{alt+'
            word = fullResults[0 + self.firstWord][0]
            if word == 'leap':
                top_buffer += 'd'
            elif word == 'retreat':
                top_buffer += 'u'
            top_buffer += '}'
            top_buffer += '{alt+n}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            limit = ''
            limit += '1'
            for i in range(to_long(limit)):
                top_buffer += '{enter}'
                top_buffer += '{alt+w}{space}'
                top_buffer += '{alt+w}-'
            top_buffer += '{esc}'
            top_buffer += '{left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad.vcl', 126, '((\'leap\' | \'retreat\')) <printable>', e)
            self.firstWord = -1

    # <leap> 'after' <printable>
    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{shift+right}'
            top_buffer += '{ctrl+f}'
            top_buffer += '{alt+c}-'
            top_buffer += '{alt+w}-'
            top_buffer += '{alt+'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_leap(top_buffer, False, word)
            top_buffer += '}'
            top_buffer += '{alt+n}'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            limit = ''
            limit += '1'
            for i in range(to_long(limit)):
                top_buffer += '{enter}'
                top_buffer += '{alt+w}{space}'
                top_buffer += '{alt+w}-'
            top_buffer += '{esc}'
            top_buffer += '{left}'
            top_buffer += '{right}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('win32pad.vcl', 127, '<leap> \'after\' <printable>', e)
            self.firstWord = -1

    # (('leap' | 'retreat')) <count> <printable>
    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{shift+right}'
            top_buffer += '{ctrl+f}'
            top_buffer += '{alt+c}-'
            top_buffer += '{alt+w}-'
            top_buffer += '{alt+'
            word = fullResults[0 + self.firstWord][0]
            if word == 'leap':
                top_buffer += 'd'
            elif word == 'retreat':
                top_buffer += 'u'
            top_buffer += '}'
            top_buffer += '{alt+n}'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            limit = ''
            word = fullResults[1 + self.firstWord][0]
            limit = self.get_count(limit, True, word)
            for i in range(to_long(limit)):
                top_buffer += '{enter}'
                top_buffer += '{alt+w}{space}'
                top_buffer += '{alt+w}-'
            top_buffer += '{esc}'
            top_buffer += '{left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('win32pad.vcl', 128, '((\'leap\' | \'retreat\')) <count> <printable>', e)
            self.firstWord = -1

    # <leap> 'after' <count> <printable>
    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{shift+right}'
            top_buffer += '{ctrl+f}'
            top_buffer += '{alt+c}-'
            top_buffer += '{alt+w}-'
            top_buffer += '{alt+'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_leap(top_buffer, False, word)
            top_buffer += '}'
            top_buffer += '{alt+n}'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            limit = ''
            word = fullResults[2 + self.firstWord][0]
            limit = self.get_count(limit, True, word)
            for i in range(to_long(limit)):
                top_buffer += '{enter}'
                top_buffer += '{alt+w}{space}'
                top_buffer += '{alt+w}-'
            top_buffer += '{esc}'
            top_buffer += '{left}'
            top_buffer += '{right}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('win32pad.vcl', 129, '<leap> \'after\' <count> <printable>', e)
            self.firstWord = -1

    # 'advance' <_anything>
    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{shift+right}'
            top_buffer += '{ctrl+f}'
            top_buffer += '{alt+c}-'
            top_buffer += '{alt+w}-'
            top_buffer += '{alt+'
            top_buffer += 'd'
            top_buffer += '}'
            top_buffer += '{alt+n}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            limit = ''
            limit += '1'
            for i in range(to_long(limit)):
                top_buffer += '{enter}'
                top_buffer += '{alt+w}{space}'
                top_buffer += '{alt+w}-'
            top_buffer += '{esc}'
            top_buffer += '{left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad.vcl', 132, '\'advance\' <_anything>', e)
            self.firstWord = -1

    # 'fallback' <_anything>
    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{shift+right}'
            top_buffer += '{ctrl+f}'
            top_buffer += '{alt+c}-'
            top_buffer += '{alt+w}-'
            top_buffer += '{alt+'
            top_buffer += 'u'
            top_buffer += '}'
            top_buffer += '{alt+n}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            limit = ''
            limit += '1'
            for i in range(to_long(limit)):
                top_buffer += '{enter}'
                top_buffer += '{alt+w}{space}'
                top_buffer += '{alt+w}-'
            top_buffer += '{esc}'
            top_buffer += '{left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad.vcl', 133, '\'fallback\' <_anything>', e)
            self.firstWord = -1

    # 'key' <printable>
    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_printable(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad.vcl', 140, '\'key\' <printable>', e)
            self.firstWord = -1

    # 'dictate' <_anything>
    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad.vcl', 141, '\'dictate\' <_anything>', e)
            self.firstWord = -1

    def get_change(self, list_buffer, functional, word):
        if word == 'lower-a-word':
            list_buffer += 'lower'
        elif word == 'upper-a-word':
            list_buffer += 'upper'
        elif word == 'cap-a-word':
            list_buffer += 'title'
        return list_buffer

    # (('lower-a-word' | 'upper-a-word' | 'cap-a-word'))
    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+shift+right_'
            top_buffer += '1'
            top_buffer += '}'
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '%s.'
            word = fullResults[0 + self.firstWord][0]
            if word == 'lower-a-word':
                eval_template2_arg1 += 'lower'
            elif word == 'upper-a-word':
                eval_template2_arg1 += 'upper'
            elif word == 'cap-a-word':
                eval_template2_arg1 += 'title'
            eval_template2_arg1 += '()'
            eval_template2_arg2 = ''
            import vocola_ext_clipboard
            eval_template2_arg2 += str(vocola_ext_clipboard.clipboard_get())
            extension_arg1 += eval_template(eval_template2_arg1, eval_template2_arg2)
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_set(extension_arg1)
            top_buffer += '{ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_26(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 157, '((\'lower-a-word\' | \'upper-a-word\' | \'cap-a-word\'))', e)
            self.firstWord = -1

    # <change> 2..20
    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+shift+right_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '%s.'
            word = fullResults[0 + self.firstWord][0]
            eval_template2_arg1 = self.get_change(eval_template2_arg1, True, word)
            eval_template2_arg1 += '()'
            eval_template2_arg2 = ''
            import vocola_ext_clipboard
            eval_template2_arg2 += str(vocola_ext_clipboard.clipboard_get())
            extension_arg1 += eval_template(eval_template2_arg1, eval_template2_arg2)
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_set(extension_arg1)
            top_buffer += '{ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad.vcl', 158, '<change> 2..20', e)
            self.firstWord = -1

    # 'escape'
    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_28(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 165, '\'escape\'', e)
            self.firstWord = -1

    # 'undo that'
    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+z}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_29(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 167, '\'undo that\'', e)
            self.firstWord = -1

    # 'undo'
    def gotResults_40(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+z}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_40(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 167, '\'undo\'', e)
            self.firstWord = -1

    # 'redo that'
    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+shift+z}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_30(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 168, '\'redo that\'', e)
            self.firstWord = -1

    # 'redo'
    def gotResults_41(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+shift+z}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_41(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 168, '\'redo\'', e)
            self.firstWord = -1

    # ('file open' | 'find file')
    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+o}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Open'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{tab}{alt+down}{end}{tab}{alt+n}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_31(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 176, '(\'file open\' | \'find file\')', e)
            self.firstWord = -1

    # ('file save as' | 'save as' | 'write file')
    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+shift+s}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_32(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 179, '(\'file save as\' | \'save as\' | \'write file\')', e)
            self.firstWord = -1

    # ('file save' | 'save file')
    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+s}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_33(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 180, '(\'file save\' | \'save file\')', e)
            self.firstWord = -1

    # 'new file'
    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+n}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_34(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 183, '\'new file\'', e)
            self.firstWord = -1

    # 'new instance'
    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+shift+n}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_35(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 184, '\'new instance\'', e)
            self.firstWord = -1

    # 'please' ('reload' | 'revert buffer')
    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+r}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_36(words[2:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 185, '\'please\' (\'reload\' | \'revert buffer\')', e)
            self.firstWord = -1

    # 'insert file'
    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+i}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_37(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 187, '\'insert file\'', e)
            self.firstWord = -1

    # 'search and replace'
    def gotResults_38(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+h}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_38(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 188, '\'search and replace\'', e)
            self.firstWord = -1

    # 'word wrap mode'
    def gotResults_39(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+w}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_39(words[1:], fullResults)
        except Exception, e:
            handle_error('win32pad.vcl', 190, '\'word wrap mode\'', e)
            self.firstWord = -1

    def get_printable(self, list_buffer, functional, word):
        if word == 'space':
            list_buffer += ' '
        elif word == '!':
            list_buffer += '!'
        elif word == 'bang':
            list_buffer += '!'
        elif word == '"':
            list_buffer += '"'
        elif word == 'quote':
            list_buffer += '"'
        elif word == '#':
            list_buffer += '#'
        elif word == 'pound':
            list_buffer += '#'
        elif word == '$':
            list_buffer += '$'
        elif word == 'dollar':
            list_buffer += '$'
        elif word == '%':
            list_buffer += '%'
        elif word == 'percent':
            list_buffer += '%'
        elif word == '&':
            list_buffer += '&'
        elif word == '\'':
            list_buffer += '\''
        elif word == 'apostrophe':
            list_buffer += '\''
        elif word == 'single':
            list_buffer += '\''
        elif word == '(':
            list_buffer += '('
        elif word == 'paren':
            list_buffer += '('
        elif word == ')':
            list_buffer += ')'
        elif word == 'close paren':
            list_buffer += ')'
        elif word == '*':
            list_buffer += '*'
        elif word == 'asterisk':
            list_buffer += '*'
        elif word == 'star':
            list_buffer += '*'
        elif word == '+':
            list_buffer += '+'
        elif word == 'plus':
            list_buffer += '+'
        elif word == ',':
            list_buffer += ','
        elif word == '-':
            list_buffer += '-'
        elif word == 'minus':
            list_buffer += '-'
        elif word == '.':
            list_buffer += '.'
        elif word == 'dot':
            list_buffer += '.'
        elif word == '/':
            list_buffer += '/'
        elif word == 'zero':
            list_buffer += '0'
        elif word == 'one':
            list_buffer += '1'
        elif word == 'two':
            list_buffer += '2'
        elif word == 'three':
            list_buffer += '3'
        elif word == 'four':
            list_buffer += '4'
        elif word == 'five':
            list_buffer += '5'
        elif word == 'six':
            list_buffer += '6'
        elif word == 'seven':
            list_buffer += '7'
        elif word == 'eight':
            list_buffer += '8'
        elif word == 'nine':
            list_buffer += '9'
        elif word == ':':
            list_buffer += ':'
        elif word == ';':
            list_buffer += ';'
        elif word == 'semi':
            list_buffer += ';'
        elif word == '<':
            list_buffer += '<'
        elif word == 'bend':
            list_buffer += '<'
        elif word == '=':
            list_buffer += '='
        elif word == 'equal':
            list_buffer += '='
        elif word == 'equals':
            list_buffer += '='
        elif word == '>':
            list_buffer += '>'
        elif word == 'close bend':
            list_buffer += '>'
        elif word == '?':
            list_buffer += '?'
        elif word == 'question':
            list_buffer += '?'
        elif word == '@':
            list_buffer += '@'
        elif word == 'big Alpha':
            list_buffer += 'A'
        elif word == 'big Bravo':
            list_buffer += 'B'
        elif word == 'big Charlie':
            list_buffer += 'C'
        elif word == 'big Delta':
            list_buffer += 'D'
        elif word == 'big echo':
            list_buffer += 'E'
        elif word == 'big foxtrot':
            list_buffer += 'F'
        elif word == 'big golf':
            list_buffer += 'G'
        elif word == 'big Hotel':
            list_buffer += 'H'
        elif word == 'big India':
            list_buffer += 'I'
        elif word == 'big Juliett':
            list_buffer += 'J'
        elif word == 'big kilo':
            list_buffer += 'K'
        elif word == 'big Lima':
            list_buffer += 'L'
        elif word == 'big Mike':
            list_buffer += 'M'
        elif word == 'big November':
            list_buffer += 'N'
        elif word == 'big Oscar':
            list_buffer += 'O'
        elif word == 'big Papa':
            list_buffer += 'P'
        elif word == 'big Quebec':
            list_buffer += 'Q'
        elif word == 'big Romeo':
            list_buffer += 'R'
        elif word == 'big Sierra':
            list_buffer += 'S'
        elif word == 'big tango':
            list_buffer += 'T'
        elif word == 'big uniform':
            list_buffer += 'U'
        elif word == 'big Victor':
            list_buffer += 'V'
        elif word == 'big whiskey':
            list_buffer += 'W'
        elif word == 'big x-ray':
            list_buffer += 'X'
        elif word == 'big Yankee':
            list_buffer += 'Y'
        elif word == 'big Zulu':
            list_buffer += 'Z'
        elif word == '[':
            list_buffer += '['
        elif word == 'bracket':
            list_buffer += '['
        elif word == 'backslash':
            list_buffer += '\\'
        elif word == ']':
            list_buffer += ']'
        elif word == 'close bracket':
            list_buffer += ']'
        elif word == '^':
            list_buffer += '^'
        elif word == '_':
            list_buffer += '_'
        elif word == '`':
            list_buffer += '`'
        elif word == 'Alpha':
            list_buffer += 'a'
        elif word == 'Bravo':
            list_buffer += 'b'
        elif word == 'Charlie':
            list_buffer += 'c'
        elif word == 'Delta':
            list_buffer += 'd'
        elif word == 'echo':
            list_buffer += 'e'
        elif word == 'foxtrot':
            list_buffer += 'f'
        elif word == 'golf':
            list_buffer += 'g'
        elif word == 'Hotel':
            list_buffer += 'h'
        elif word == 'India':
            list_buffer += 'i'
        elif word == 'Juliett':
            list_buffer += 'j'
        elif word == 'kilo':
            list_buffer += 'k'
        elif word == 'Lima':
            list_buffer += 'l'
        elif word == 'Mike':
            list_buffer += 'm'
        elif word == 'November':
            list_buffer += 'n'
        elif word == 'Oscar':
            list_buffer += 'o'
        elif word == 'Papa':
            list_buffer += 'p'
        elif word == 'Quebec':
            list_buffer += 'q'
        elif word == 'Romeo':
            list_buffer += 'r'
        elif word == 'Sierra':
            list_buffer += 's'
        elif word == 'tango':
            list_buffer += 't'
        elif word == 'uniform':
            list_buffer += 'u'
        elif word == 'Victor':
            list_buffer += 'v'
        elif word == 'whiskey':
            list_buffer += 'w'
        elif word == 'x-ray':
            list_buffer += 'x'
        elif word == 'Yankee':
            list_buffer += 'y'
        elif word == 'Zulu':
            list_buffer += 'z'
        elif word == '{':
            list_buffer += '{{}'
        elif word == 'brace':
            list_buffer += '{{}'
        elif word == '|':
            list_buffer += '|'
        elif word == 'vertical bar':
            list_buffer += '|'
        elif word == 'bar':
            list_buffer += '|'
        elif word == '}':
            list_buffer += '}'
        elif word == 'close brace':
            list_buffer += '}'
        elif word == '~':
            list_buffer += '~'
        return list_buffer

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None
