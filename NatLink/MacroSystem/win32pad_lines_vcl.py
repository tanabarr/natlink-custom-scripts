# NatLink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.5, Wed Nov 23 09:38:58 2016

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """
        <n> = ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 'ten' | 'eleven' | 'twelve' | 'thirteen' | 'fourteen' | 'fifteen' | 'sixteen' | 'seventeen' | 'eighteen' | 'nineteen' | 'twenty' | 'twenty-one' | 'twenty-two' | 'twenty-three' | 'twenty-four' | 'twenty-five' | 'twenty-six' | 'twenty-seven' | 'twenty-eight' | 'twenty-nine' | 'thirty' | 'thirty-one' | 'thirty-two' | 'thirty-three' | 'thirty-four' | 'thirty-five' | 'thirty-six' | 'thirty-seven' | 'thirty-eight' | 'thirty-nine' | 'forty' | 'forty-one' | 'forty-two' | 'forty-three' | 'forty-four' | 'forty-five' | 'forty-six' | 'forty-seven' | 'forty-eight' | 'forty-nine' | 'fifty' | 'fifty-one' | 'fifty-two' | 'fifty-three' | 'fifty-four' | 'fifty-five' | 'fifty-six' | 'fifty-seven' | 'fifty-eight' | 'fifty-nine' | 'sixty' | 'sixty-one' | 'sixty-two' | 'sixty-three' | 'sixty-four' | 'sixty-five' | 'sixty-six' | 'sixty-seven' | 'sixty-eight' | 'sixty-nine' | 'seventy' | 'seventy-one' | 'seventy-two' | 'seventy-three' | 'seventy-four' | 'seventy-five' | 'seventy-six' | 'seventy-seven' | 'seventy-eight' | 'seventy-nine' | 'eighty' | 'eighty-one' | 'eighty-two' | 'eighty-three' | 'eighty-four' | 'eighty-five' | 'eighty-six' | 'eighty-seven' | 'eighty-eight' | 'eighty-nine' | 'ninety' | 'ninety-one' | 'ninety-two' | 'ninety-three' | 'ninety-four' | 'ninety-five' | 'ninety-six' | 'ninety-seven' | 'ninety-eight' | 'ninety-nine') ;
        <1> = 'absolute' ('line' | 'row' ) ;
        <2> = 'absolute' <n> ;
        <3> = 'absolute' <3b> ;
        <3b> = <n> 'hundred' ;
        <4> = 'absolute' <4b> ;
        <4b> = <n> 'hundred' <n> ;
        <5> = 'absolute' <5b> ;
        <5b> = <n> 'thousand' ;
        <6> = 'absolute' <6b> ;
        <6b> = <n> 'thousand' <n> ;
        <7> = 'absolute' <7b> ;
        <7b> = <n> 'thousand' <n> 'hundred' ;
        <8> = 'absolute' <8b> ;
        <8b> = <n> 'thousand' <n> 'hundred' <n> ;
        <r> = ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 'ten' | 'eleven' | 'twelve' | 'thirteen' | 'fourteen' | 'fifteen' | 'sixteen' | 'seventeen' | 'eighteen' | 'nineteen' | 'twenty' | 'twenty-one' | 'twenty-two' | 'twenty-three' | 'twenty-four' | 'twenty-five' | 'twenty-six' | 'twenty-seven' | 'twenty-eight' | 'twenty-nine' | 'thirty' | 'thirty-one' | 'thirty-two' | 'thirty-three' | 'thirty-four' | 'thirty-five' | 'thirty-six' | 'thirty-seven' | 'thirty-eight' | 'thirty-nine' | 'forty' | 'forty-one' | 'forty-two' | 'forty-three' | 'forty-four' | 'forty-five' | 'forty-six' | 'forty-seven' | 'forty-eight' | 'forty-nine' | 'fifty' | 'fifty-one' | 'fifty-two' | 'fifty-three' | 'fifty-four' | 'fifty-five' | 'fifty-six' | 'fifty-seven' | 'fifty-eight' | 'fifty-nine' | 'sixty' | 'sixty-one' | 'sixty-two' | 'sixty-three' | 'sixty-four' | 'sixty-five' | 'sixty-six' | 'sixty-seven' | 'sixty-eight' | 'sixty-nine' | 'seventy' | 'seventy-one' | 'seventy-two' | 'seventy-three' | 'seventy-four' | 'seventy-five' | 'seventy-six' | 'seventy-seven' | 'seventy-eight' | 'seventy-nine' | 'eighty' | 'eighty-one' | 'eighty-two' | 'eighty-three' | 'eighty-four' | 'eighty-five' | 'eighty-six' | 'eighty-seven' | 'eighty-eight' | 'eighty-nine' | 'ninety' | 'ninety-one' | 'ninety-two' | 'ninety-three' | 'ninety-four' | 'ninety-five' | 'ninety-six' | 'ninety-seven' | 'ninety-eight' | 'ninety-nine') ;
        <op> = ('highlight' | 'copy' | 'destroy' | 'yank' ) ;
        <9> = <op> 'line' ;
        <10> = <op> 'line' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 'ten' | 'eleven' | 'twelve' | 'thirteen' | 'fourteen' | 'fifteen' | 'sixteen' | 'seventeen' | 'eighteen' | 'nineteen' | 'twenty' | 'twenty-one' | 'twenty-two' | 'twenty-three' | 'twenty-four' | 'twenty-five' | 'twenty-six' | 'twenty-seven' | 'twenty-eight' | 'twenty-nine' | 'thirty' | 'thirty-one' | 'thirty-two' | 'thirty-three' | 'thirty-four' | 'thirty-five' | 'thirty-six' | 'thirty-seven' | 'thirty-eight' | 'thirty-nine' | 'forty' | 'forty-one' | 'forty-two' | 'forty-three' | 'forty-four' | 'forty-five' | 'forty-six' | 'forty-seven' | 'forty-eight' | 'forty-nine' | 'fifty' | 'fifty-one' | 'fifty-two' | 'fifty-three' | 'fifty-four' | 'fifty-five' | 'fifty-six' | 'fifty-seven' | 'fifty-eight' | 'fifty-nine' | 'sixty' | 'sixty-one' | 'sixty-two' | 'sixty-three' | 'sixty-four' | 'sixty-five' | 'sixty-six' | 'sixty-seven' | 'sixty-eight' | 'sixty-nine' | 'seventy' | 'seventy-one' | 'seventy-two' | 'seventy-three' | 'seventy-four' | 'seventy-five' | 'seventy-six' | 'seventy-seven' | 'seventy-eight' | 'seventy-nine' | 'eighty' | 'eighty-one' | 'eighty-two' | 'eighty-three' | 'eighty-four' | 'eighty-five' | 'eighty-six' | 'eighty-seven' | 'eighty-eight' | 'eighty-nine' | 'ninety' | 'ninety-one' | 'ninety-two' | 'ninety-three' | 'ninety-four' | 'ninety-five' | 'ninety-six' | 'ninety-seven' | 'ninety-eight' | 'ninety-nine') ;
        <11> = <op> 'next' ;
        <12> = <op> 'next' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 'ten' | 'eleven' | 'twelve' | 'thirteen' | 'fourteen' | 'fifteen' | 'sixteen' | 'seventeen' | 'eighteen' | 'nineteen' | 'twenty' | 'twenty-one' | 'twenty-two' | 'twenty-three' | 'twenty-four' | 'twenty-five' | 'twenty-six' | 'twenty-seven' | 'twenty-eight' | 'twenty-nine' | 'thirty' | 'thirty-one' | 'thirty-two' | 'thirty-three' | 'thirty-four' | 'thirty-five' | 'thirty-six' | 'thirty-seven' | 'thirty-eight' | 'thirty-nine' | 'forty' | 'forty-one' | 'forty-two' | 'forty-three' | 'forty-four' | 'forty-five' | 'forty-six' | 'forty-seven' | 'forty-eight' | 'forty-nine' | 'fifty' | 'fifty-one' | 'fifty-two' | 'fifty-three' | 'fifty-four' | 'fifty-five' | 'fifty-six' | 'fifty-seven' | 'fifty-eight' | 'fifty-nine' | 'sixty' | 'sixty-one' | 'sixty-two' | 'sixty-three' | 'sixty-four' | 'sixty-five' | 'sixty-six' | 'sixty-seven' | 'sixty-eight' | 'sixty-nine' | 'seventy' | 'seventy-one' | 'seventy-two' | 'seventy-three' | 'seventy-four' | 'seventy-five' | 'seventy-six' | 'seventy-seven' | 'seventy-eight' | 'seventy-nine' | 'eighty' | 'eighty-one' | 'eighty-two' | 'eighty-three' | 'eighty-four' | 'eighty-five' | 'eighty-six' | 'eighty-seven' | 'eighty-eight' | 'eighty-nine' | 'ninety' | 'ninety-one' | 'ninety-two' | 'ninety-three' | 'ninety-four' | 'ninety-five' | 'ninety-six' | 'ninety-seven' | 'ninety-eight' | 'ninety-nine') ;
        <13> = <op> 'previous' ;
        <14> = <op> 'previous' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 'ten' | 'eleven' | 'twelve' | 'thirteen' | 'fourteen' | 'fifteen' | 'sixteen' | 'seventeen' | 'eighteen' | 'nineteen' | 'twenty' | 'twenty-one' | 'twenty-two' | 'twenty-three' | 'twenty-four' | 'twenty-five' | 'twenty-six' | 'twenty-seven' | 'twenty-eight' | 'twenty-nine' | 'thirty' | 'thirty-one' | 'thirty-two' | 'thirty-three' | 'thirty-four' | 'thirty-five' | 'thirty-six' | 'thirty-seven' | 'thirty-eight' | 'thirty-nine' | 'forty' | 'forty-one' | 'forty-two' | 'forty-three' | 'forty-four' | 'forty-five' | 'forty-six' | 'forty-seven' | 'forty-eight' | 'forty-nine' | 'fifty' | 'fifty-one' | 'fifty-two' | 'fifty-three' | 'fifty-four' | 'fifty-five' | 'fifty-six' | 'fifty-seven' | 'fifty-eight' | 'fifty-nine' | 'sixty' | 'sixty-one' | 'sixty-two' | 'sixty-three' | 'sixty-four' | 'sixty-five' | 'sixty-six' | 'sixty-seven' | 'sixty-eight' | 'sixty-nine' | 'seventy' | 'seventy-one' | 'seventy-two' | 'seventy-three' | 'seventy-four' | 'seventy-five' | 'seventy-six' | 'seventy-seven' | 'seventy-eight' | 'seventy-nine' | 'eighty' | 'eighty-one' | 'eighty-two' | 'eighty-three' | 'eighty-four' | 'eighty-five' | 'eighty-six' | 'eighty-seven' | 'eighty-eight' | 'eighty-nine' | 'ninety' | 'ninety-one' | 'ninety-two' | 'ninety-three' | 'ninety-four' | 'ninety-five' | 'ninety-six' | 'ninety-seven' | 'ninety-eight' | 'ninety-nine') ;
        <15> = <op> 'single' <r> ;
        <16> = <op> <r> 'comma' <r> ;
        <17> = <op> <r> 'backwards' ;
        <18> = <op> <r> 'onwards' ;
        <19> = <op> 'entire buffer' ;
        <20> = 'comment' <20b> ;
        <20b> = <r> 'comma' <r> ;
        <21> = 'indent' <21b> ;
        <21b> = <r> 'comma' <r> 'by' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 'ten' | 'eleven' | 'twelve' | 'thirteen' | 'fourteen' | 'fifteen' | 'sixteen' | 'seventeen' | 'eighteen' | 'nineteen' | 'twenty') ;
        <22> = 'outdent' <22b> ;
        <22b> = <r> 'comma' <r> 'by' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 'ten' | 'eleven' | 'twelve' | 'thirteen' | 'fourteen' | 'fifteen' | 'sixteen' | 'seventeen' | 'eighteen' | 'nineteen' | 'twenty') ;
        <any> = <1>|<2>|<3>|<4>|<5>|<6>|<7>|<8>|<9>|<10>|<11>|<12>|<13>|<14>|<15>|<16>|<17>|<18>|<19>|<20>|<21>|<22>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.ruleSet1 = ['sequence']

    def gotBegin(self,moduleInfo):
        # Return if wrong application
        window = matchWindow(moduleInfo,'win32pad_lines','')
        if not window: window = matchWindow(moduleInfo,'win32pad','')
        if not window: return None
        self.firstWord = 0
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        self.deactivateAll()
        title = string.lower(moduleInfo[1])
        if string.find(title,'') >= 0:
            for rule in self.ruleSet1:
                try:
                    self.activate(rule,window)
                except natlink.BadWindow:
                    pass

    def convert_number_word(self, word):
        if   word == 'zero':
            return '0'
        elif word == 'one':
            return '1'
        elif word == 'two':
            return '2'
        elif word == 'three':
            return '3'
        elif word == 'four':
            return '4'
        elif word == 'five':
            return '5'
        elif word == 'six':
            return '6'
        elif word == 'seven':
            return '7'
        elif word == 'eight':
            return '8'
        elif word == 'nine':
            return '9'
        elif word == 'ten':
            return '10'
        elif word == 'eleven':
            return '11'
        elif word == 'twelve':
            return '12'
        elif word == 'thirteen':
            return '13'
        elif word == 'fourteen':
            return '14'
        elif word == 'fifteen':
            return '15'
        elif word == 'sixteen':
            return '16'
        elif word == 'seventeen':
            return '17'
        elif word == 'eighteen':
            return '18'
        elif word == 'nineteen':
            return '19'
        elif word == 'twenty':
            return '20'
        elif word == 'twenty-one':
            return '21'
        elif word == 'twenty-two':
            return '22'
        elif word == 'twenty-three':
            return '23'
        elif word == 'twenty-four':
            return '24'
        elif word == 'twenty-five':
            return '25'
        elif word == 'twenty-six':
            return '26'
        elif word == 'twenty-seven':
            return '27'
        elif word == 'twenty-eight':
            return '28'
        elif word == 'twenty-nine':
            return '29'
        elif word == 'thirty':
            return '30'
        elif word == 'thirty-one':
            return '31'
        elif word == 'thirty-two':
            return '32'
        elif word == 'thirty-three':
            return '33'
        elif word == 'thirty-four':
            return '34'
        elif word == 'thirty-five':
            return '35'
        elif word == 'thirty-six':
            return '36'
        elif word == 'thirty-seven':
            return '37'
        elif word == 'thirty-eight':
            return '38'
        elif word == 'thirty-nine':
            return '39'
        elif word == 'forty':
            return '40'
        elif word == 'forty-one':
            return '41'
        elif word == 'forty-two':
            return '42'
        elif word == 'forty-three':
            return '43'
        elif word == 'forty-four':
            return '44'
        elif word == 'forty-five':
            return '45'
        elif word == 'forty-six':
            return '46'
        elif word == 'forty-seven':
            return '47'
        elif word == 'forty-eight':
            return '48'
        elif word == 'forty-nine':
            return '49'
        elif word == 'fifty':
            return '50'
        elif word == 'fifty-one':
            return '51'
        elif word == 'fifty-two':
            return '52'
        elif word == 'fifty-three':
            return '53'
        elif word == 'fifty-four':
            return '54'
        elif word == 'fifty-five':
            return '55'
        elif word == 'fifty-six':
            return '56'
        elif word == 'fifty-seven':
            return '57'
        elif word == 'fifty-eight':
            return '58'
        elif word == 'fifty-nine':
            return '59'
        elif word == 'sixty':
            return '60'
        elif word == 'sixty-one':
            return '61'
        elif word == 'sixty-two':
            return '62'
        elif word == 'sixty-three':
            return '63'
        elif word == 'sixty-four':
            return '64'
        elif word == 'sixty-five':
            return '65'
        elif word == 'sixty-six':
            return '66'
        elif word == 'sixty-seven':
            return '67'
        elif word == 'sixty-eight':
            return '68'
        elif word == 'sixty-nine':
            return '69'
        elif word == 'seventy':
            return '70'
        elif word == 'seventy-one':
            return '71'
        elif word == 'seventy-two':
            return '72'
        elif word == 'seventy-three':
            return '73'
        elif word == 'seventy-four':
            return '74'
        elif word == 'seventy-five':
            return '75'
        elif word == 'seventy-six':
            return '76'
        elif word == 'seventy-seven':
            return '77'
        elif word == 'seventy-eight':
            return '78'
        elif word == 'seventy-nine':
            return '79'
        elif word == 'eighty':
            return '80'
        elif word == 'eighty-one':
            return '81'
        elif word == 'eighty-two':
            return '82'
        elif word == 'eighty-three':
            return '83'
        elif word == 'eighty-four':
            return '84'
        elif word == 'eighty-five':
            return '85'
        elif word == 'eighty-six':
            return '86'
        elif word == 'eighty-seven':
            return '87'
        elif word == 'eighty-eight':
            return '88'
        elif word == 'eighty-nine':
            return '89'
        elif word == 'ninety':
            return '90'
        elif word == 'ninety-one':
            return '91'
        elif word == 'ninety-two':
            return '92'
        elif word == 'ninety-three':
            return '93'
        elif word == 'ninety-four':
            return '94'
        elif word == 'ninety-five':
            return '95'
        elif word == 'ninety-six':
            return '96'
        elif word == 'ninety-seven':
            return '97'
        elif word == 'ninety-eight':
            return '98'
        elif word == 'ninety-nine':
            return '99'
        else:
            return word

    def get_n(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'absolute' ('line' | 'row')
    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_1(words[2:], fullResults)
        except Exception, e:
            handle_error('win32pad_lines.vcl', 22, '\'absolute\' (\'line\' | \'row\')', e)
            self.firstWord = -1

    # 'absolute' <n>
    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad_lines.vcl', 24, '\'absolute\' <n>', e)
            self.firstWord = -1

    # 'absolute' <n> 'hundred'
    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg3 = self.get_n(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            eval_template_arg4 += '0'
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('win32pad_lines.vcl', 25, '\'absolute\' <n> \'hundred\'', e)
            self.firstWord = -1

    # 'absolute' <n> 'hundred' <n>
    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg3 = self.get_n(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg4 = self.get_n(eval_template_arg4, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('win32pad_lines.vcl', 26, '\'absolute\' <n> \'hundred\' <n>', e)
            self.firstWord = -1

    # 'absolute' <n> 'thousand'
    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 = self.get_n(eval_template_arg2, True, word)
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            eval_template_arg4 += '0'
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('win32pad_lines.vcl', 28, '\'absolute\' <n> \'thousand\'', e)
            self.firstWord = -1

    # 'absolute' <n> 'thousand' <n>
    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 = self.get_n(eval_template_arg2, True, word)
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg4 = self.get_n(eval_template_arg4, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('win32pad_lines.vcl', 29, '\'absolute\' <n> \'thousand\' <n>', e)
            self.firstWord = -1

    # 'absolute' <n> 'thousand' <n> 'hundred'
    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 = self.get_n(eval_template_arg2, True, word)
            eval_template_arg3 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg3 = self.get_n(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            eval_template_arg4 += '0'
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('win32pad_lines.vcl', 30, '\'absolute\' <n> \'thousand\' <n> \'hundred\'', e)
            self.firstWord = -1

    # 'absolute' <n> 'thousand' <n> 'hundred' <n>
    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 = self.get_n(eval_template_arg2, True, word)
            eval_template_arg3 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg3 = self.get_n(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[5 + self.firstWord][0]
            eval_template_arg4 = self.get_n(eval_template_arg4, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('win32pad_lines.vcl', 31, '\'absolute\' <n> \'thousand\' <n> \'hundred\' <n>', e)
            self.firstWord = -1

    def get_r(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_op(self, list_buffer, functional, word):
        if word == 'highlight':
            list_buffer += ''
        elif word == 'copy':
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '{ctrl+c}{right}'
            list_buffer += '{ctrl+g}'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            import vocola_ext_variables
            list_buffer += str(vocola_ext_variables.variable_get(extension_arg1))
            list_buffer += '{enter}'
        elif word == 'destroy':
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '{ctrl+x}'
        elif word == 'yank':
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            saved_firstWord = self.firstWord
            call_Dragon('Wait', 'i', [dragon_arg1])
            self.firstWord = saved_firstWord
            list_buffer += '{ctrl+c}{right}'
            list_buffer += '{ctrl+g}'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            import vocola_ext_variables
            list_buffer += str(vocola_ext_variables.variable_get(extension_arg1))
            list_buffer += '{enter}'
            list_buffer += '{ctrl+v}'
        return list_buffer

    # <op> 'line'
    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_save()
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_restore()
            top_buffer += '{esc}'
            top_buffer += '{end}{home}'
            limit = ''
            limit += '1'
            for i in range(to_long(limit)):
                top_buffer += '{shift+right}{shift+end}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_op(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad_lines.vcl', 58, '<op> \'line\'', e)
            self.firstWord = -1

    # <op> 'line' 1..99
    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_save()
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_restore()
            top_buffer += '{esc}'
            top_buffer += '{end}{home}'
            limit = ''
            word = fullResults[2 + self.firstWord][0]
            limit += self.convert_number_word(word)
            for i in range(to_long(limit)):
                top_buffer += '{shift+right}{shift+end}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_op(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('win32pad_lines.vcl', 59, '<op> \'line\' 1..99', e)
            self.firstWord = -1

    # <op> 'next'
    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_save()
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_restore()
            top_buffer += '{esc}'
            top_buffer += '{home}{down}'
            top_buffer += '{end}{home}'
            limit = ''
            limit += '1'
            for i in range(to_long(limit)):
                top_buffer += '{shift+right}{shift+end}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_op(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad_lines.vcl', 61, '<op> \'next\'', e)
            self.firstWord = -1

    # <op> 'next' 1..99
    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_save()
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_restore()
            top_buffer += '{esc}'
            top_buffer += '{home}{down}'
            top_buffer += '{end}{home}'
            limit = ''
            word = fullResults[2 + self.firstWord][0]
            limit += self.convert_number_word(word)
            for i in range(to_long(limit)):
                top_buffer += '{shift+right}{shift+end}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_op(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('win32pad_lines.vcl', 62, '<op> \'next\' 1..99', e)
            self.firstWord = -1

    # <op> 'previous'
    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_save()
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_restore()
            top_buffer += '{esc}'
            top_buffer += '{home}{up}'
            top_buffer += '{end}{home}'
            limit = ''
            limit += '1'
            for i in range(to_long(limit)):
                top_buffer += '{shift+right}{shift+end}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_op(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad_lines.vcl', 64, '<op> \'previous\'', e)
            self.firstWord = -1

    # <op> 'previous' 1..99
    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_save()
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_restore()
            top_buffer += '{esc}'
            top_buffer += '{home}{up_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer += '{end}{home}'
            limit = ''
            word = fullResults[2 + self.firstWord][0]
            limit += self.convert_number_word(word)
            for i in range(to_long(limit)):
                top_buffer += '{shift+right}{shift+end}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_op(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('win32pad_lines.vcl', 65, '<op> \'previous\' 1..99', e)
            self.firstWord = -1

    # <op> 'single' <r>
    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_save()
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_restore()
            eval_template_arg1 = ''
            eval_template_arg1 += 'max(%i,%i)'
            eval_template_arg2 = ''
            eval_template_arg2 += '1'
            eval_template_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '%i + %i'
            eval_template2_arg2 = ''
            extension3_arg1 = ''
            extension3_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template2_arg2 += str(vocola_ext_variables.variable_get(extension3_arg1))
            eval_template2_arg3 = ''
            eval_template3_arg1 = ''
            eval_template3_arg1 += '(%i-%i+50)%%100 - 50'
            eval_template3_arg2 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template3_arg2 = self.get_r(eval_template3_arg2, True, word)
            eval_template3_arg3 = ''
            extension4_arg1 = ''
            extension4_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template3_arg3 += str(vocola_ext_variables.variable_get(extension4_arg1))
            eval_template2_arg3 += eval_template(eval_template3_arg1, eval_template3_arg2, eval_template3_arg3)
            eval_template_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2, eval_template2_arg3)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3)
            top_buffer += '{enter}'
            top_buffer += '{end}{home}'
            limit = ''
            limit += '1'
            for i in range(to_long(limit)):
                top_buffer += '{shift+right}{shift+end}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_op(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('win32pad_lines.vcl', 67, '<op> \'single\' <r>', e)
            self.firstWord = -1

    # <op> <r> 'comma' <r>
    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_save()
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_restore()
            eval_template_arg1 = ''
            eval_template_arg1 += 'max(%i,%i)'
            eval_template_arg2 = ''
            eval_template_arg2 += '1'
            eval_template_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '%i + %i'
            eval_template2_arg2 = ''
            extension3_arg1 = ''
            extension3_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template2_arg2 += str(vocola_ext_variables.variable_get(extension3_arg1))
            eval_template2_arg3 = ''
            eval_template3_arg1 = ''
            eval_template3_arg1 += '(%i-%i+50)%%100 - 50'
            eval_template3_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template3_arg2 = self.get_r(eval_template3_arg2, True, word)
            eval_template3_arg3 = ''
            extension4_arg1 = ''
            extension4_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template3_arg3 += str(vocola_ext_variables.variable_get(extension4_arg1))
            eval_template2_arg3 += eval_template(eval_template3_arg1, eval_template3_arg2, eval_template3_arg3)
            eval_template_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2, eval_template2_arg3)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3)
            top_buffer += '{enter}'
            top_buffer += '{end}{home}'
            limit = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '%i - %i'
            eval_template2_arg2 = ''
            eval_template3_arg1 = ''
            eval_template3_arg1 += 'max(%i,%i)'
            eval_template3_arg2 = ''
            eval_template3_arg2 += '1'
            eval_template3_arg3 = ''
            eval_template4_arg1 = ''
            eval_template4_arg1 += '%i + %i'
            eval_template4_arg2 = ''
            extension5_arg1 = ''
            extension5_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template4_arg2 += str(vocola_ext_variables.variable_get(extension5_arg1))
            eval_template4_arg3 = ''
            eval_template5_arg1 = ''
            eval_template5_arg1 += '(%i-%i+50)%%100 - 50'
            eval_template5_arg2 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template5_arg2 = self.get_r(eval_template5_arg2, True, word)
            eval_template5_arg3 = ''
            extension6_arg1 = ''
            extension6_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template5_arg3 += str(vocola_ext_variables.variable_get(extension6_arg1))
            eval_template4_arg3 += eval_template(eval_template5_arg1, eval_template5_arg2, eval_template5_arg3)
            eval_template3_arg3 += eval_template(eval_template4_arg1, eval_template4_arg2, eval_template4_arg3)
            eval_template2_arg2 += eval_template(eval_template3_arg1, eval_template3_arg2, eval_template3_arg3)
            eval_template2_arg3 = ''
            eval_template3_arg1 = ''
            eval_template3_arg1 += 'max(%i,%i)'
            eval_template3_arg2 = ''
            eval_template3_arg2 += '1'
            eval_template3_arg3 = ''
            eval_template4_arg1 = ''
            eval_template4_arg1 += '%i + %i'
            eval_template4_arg2 = ''
            extension5_arg1 = ''
            extension5_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template4_arg2 += str(vocola_ext_variables.variable_get(extension5_arg1))
            eval_template4_arg3 = ''
            eval_template5_arg1 = ''
            eval_template5_arg1 += '(%i-%i+50)%%100 - 50'
            eval_template5_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template5_arg2 = self.get_r(eval_template5_arg2, True, word)
            eval_template5_arg3 = ''
            extension6_arg1 = ''
            extension6_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template5_arg3 += str(vocola_ext_variables.variable_get(extension6_arg1))
            eval_template4_arg3 += eval_template(eval_template5_arg1, eval_template5_arg2, eval_template5_arg3)
            eval_template3_arg3 += eval_template(eval_template4_arg1, eval_template4_arg2, eval_template4_arg3)
            eval_template2_arg3 += eval_template(eval_template3_arg1, eval_template3_arg2, eval_template3_arg3)
            limit += eval_template(eval_template2_arg1, eval_template2_arg2, eval_template2_arg3)
            for i in range(to_long(limit)):
                top_buffer += '{shift+right}{shift+end}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_op(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('win32pad_lines.vcl', 69, '<op> <r> \'comma\' <r>', e)
            self.firstWord = -1

    # <op> <r> 'backwards'
    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_save()
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_restore()
            eval_template_arg1 = ''
            eval_template_arg1 += 'max(%i,%i)'
            eval_template_arg2 = ''
            eval_template_arg2 += '1'
            eval_template_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '%i + %i'
            eval_template2_arg2 = ''
            extension3_arg1 = ''
            extension3_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template2_arg2 += str(vocola_ext_variables.variable_get(extension3_arg1))
            eval_template2_arg3 = ''
            eval_template3_arg1 = ''
            eval_template3_arg1 += '(%i-%i+50)%%100 - 50'
            eval_template3_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template3_arg2 = self.get_r(eval_template3_arg2, True, word)
            eval_template3_arg3 = ''
            extension4_arg1 = ''
            extension4_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template3_arg3 += str(vocola_ext_variables.variable_get(extension4_arg1))
            eval_template2_arg3 += eval_template(eval_template3_arg1, eval_template3_arg2, eval_template3_arg3)
            eval_template_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2, eval_template2_arg3)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3)
            top_buffer += '{enter}'
            top_buffer += '{shift+ctrl+home}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_op(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('win32pad_lines.vcl', 71, '<op> <r> \'backwards\'', e)
            self.firstWord = -1

    # <op> <r> 'onwards'
    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_save()
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_restore()
            eval_template_arg1 = ''
            eval_template_arg1 += 'max(%i,%i)'
            eval_template_arg2 = ''
            eval_template_arg2 += '1'
            eval_template_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '%i + %i'
            eval_template2_arg2 = ''
            extension3_arg1 = ''
            extension3_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template2_arg2 += str(vocola_ext_variables.variable_get(extension3_arg1))
            eval_template2_arg3 = ''
            eval_template3_arg1 = ''
            eval_template3_arg1 += '(%i-%i+50)%%100 - 50'
            eval_template3_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template3_arg2 = self.get_r(eval_template3_arg2, True, word)
            eval_template3_arg3 = ''
            extension4_arg1 = ''
            extension4_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template3_arg3 += str(vocola_ext_variables.variable_get(extension4_arg1))
            eval_template2_arg3 += eval_template(eval_template3_arg1, eval_template3_arg2, eval_template3_arg3)
            eval_template_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2, eval_template2_arg3)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3)
            top_buffer += '{enter}'
            top_buffer += '{shift+ctrl+end}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_op(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('win32pad_lines.vcl', 72, '<op> <r> \'onwards\'', e)
            self.firstWord = -1

    # <op> 'entire buffer'
    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_save()
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_restore()
            top_buffer += '{esc}'
            top_buffer += '{ctrl+home}'
            top_buffer += '{shift+ctrl+end}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_op(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('win32pad_lines.vcl', 74, '<op> \'entire buffer\'', e)
            self.firstWord = -1

    # 'comment' <r> 'comma' <r>
    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_save()
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_restore()
            eval_template_arg1 = ''
            eval_template_arg1 += 'max(%i,%i)'
            eval_template_arg2 = ''
            eval_template_arg2 += '1'
            eval_template_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '%i + %i'
            eval_template2_arg2 = ''
            extension3_arg1 = ''
            extension3_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template2_arg2 += str(vocola_ext_variables.variable_get(extension3_arg1))
            eval_template2_arg3 = ''
            eval_template3_arg1 = ''
            eval_template3_arg1 += '(%i-%i+50)%%100 - 50'
            eval_template3_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template3_arg2 = self.get_r(eval_template3_arg2, True, word)
            eval_template3_arg3 = ''
            extension4_arg1 = ''
            extension4_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template3_arg3 += str(vocola_ext_variables.variable_get(extension4_arg1))
            eval_template2_arg3 += eval_template(eval_template3_arg1, eval_template3_arg2, eval_template3_arg3)
            eval_template_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2, eval_template2_arg3)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3)
            top_buffer += '{enter}'
            limit = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '%i - %i'
            eval_template2_arg2 = ''
            eval_template3_arg1 = ''
            eval_template3_arg1 += 'max(%i,%i)'
            eval_template3_arg2 = ''
            eval_template3_arg2 += '1'
            eval_template3_arg3 = ''
            eval_template4_arg1 = ''
            eval_template4_arg1 += '%i + %i'
            eval_template4_arg2 = ''
            extension5_arg1 = ''
            extension5_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template4_arg2 += str(vocola_ext_variables.variable_get(extension5_arg1))
            eval_template4_arg3 = ''
            eval_template5_arg1 = ''
            eval_template5_arg1 += '(%i-%i+50)%%100 - 50'
            eval_template5_arg2 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template5_arg2 = self.get_r(eval_template5_arg2, True, word)
            eval_template5_arg3 = ''
            extension6_arg1 = ''
            extension6_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template5_arg3 += str(vocola_ext_variables.variable_get(extension6_arg1))
            eval_template4_arg3 += eval_template(eval_template5_arg1, eval_template5_arg2, eval_template5_arg3)
            eval_template3_arg3 += eval_template(eval_template4_arg1, eval_template4_arg2, eval_template4_arg3)
            eval_template2_arg2 += eval_template(eval_template3_arg1, eval_template3_arg2, eval_template3_arg3)
            eval_template2_arg3 = ''
            eval_template3_arg1 = ''
            eval_template3_arg1 += 'max(%i,%i)'
            eval_template3_arg2 = ''
            eval_template3_arg2 += '1'
            eval_template3_arg3 = ''
            eval_template4_arg1 = ''
            eval_template4_arg1 += '%i + %i'
            eval_template4_arg2 = ''
            extension5_arg1 = ''
            extension5_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template4_arg2 += str(vocola_ext_variables.variable_get(extension5_arg1))
            eval_template4_arg3 = ''
            eval_template5_arg1 = ''
            eval_template5_arg1 += '(%i-%i+50)%%100 - 50'
            eval_template5_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template5_arg2 = self.get_r(eval_template5_arg2, True, word)
            eval_template5_arg3 = ''
            extension6_arg1 = ''
            extension6_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template5_arg3 += str(vocola_ext_variables.variable_get(extension6_arg1))
            eval_template4_arg3 += eval_template(eval_template5_arg1, eval_template5_arg2, eval_template5_arg3)
            eval_template3_arg3 += eval_template(eval_template4_arg1, eval_template4_arg2, eval_template4_arg3)
            eval_template2_arg3 += eval_template(eval_template3_arg1, eval_template3_arg2, eval_template3_arg3)
            limit += eval_template(eval_template2_arg1, eval_template2_arg2, eval_template2_arg3)
            for i in range(to_long(limit)):
                top_buffer += '{home}'
                top_buffer += '#'
                top_buffer += '{down}'
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            import vocola_ext_variables
            top_buffer += str(vocola_ext_variables.variable_get(extension_arg1))
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('win32pad_lines.vcl', 81, '\'comment\' <r> \'comma\' <r>', e)
            self.firstWord = -1

    # 'indent' <r> 'comma' <r> 'by' 1..20
    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_save()
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_restore()
            eval_template_arg1 = ''
            eval_template_arg1 += 'max(%i,%i)'
            eval_template_arg2 = ''
            eval_template_arg2 += '1'
            eval_template_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '%i + %i'
            eval_template2_arg2 = ''
            extension3_arg1 = ''
            extension3_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template2_arg2 += str(vocola_ext_variables.variable_get(extension3_arg1))
            eval_template2_arg3 = ''
            eval_template3_arg1 = ''
            eval_template3_arg1 += '(%i-%i+50)%%100 - 50'
            eval_template3_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template3_arg2 = self.get_r(eval_template3_arg2, True, word)
            eval_template3_arg3 = ''
            extension4_arg1 = ''
            extension4_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template3_arg3 += str(vocola_ext_variables.variable_get(extension4_arg1))
            eval_template2_arg3 += eval_template(eval_template3_arg1, eval_template3_arg2, eval_template3_arg3)
            eval_template_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2, eval_template2_arg3)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3)
            top_buffer += '{enter}'
            limit = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '%i - %i'
            eval_template2_arg2 = ''
            eval_template3_arg1 = ''
            eval_template3_arg1 += 'max(%i,%i)'
            eval_template3_arg2 = ''
            eval_template3_arg2 += '1'
            eval_template3_arg3 = ''
            eval_template4_arg1 = ''
            eval_template4_arg1 += '%i + %i'
            eval_template4_arg2 = ''
            extension5_arg1 = ''
            extension5_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template4_arg2 += str(vocola_ext_variables.variable_get(extension5_arg1))
            eval_template4_arg3 = ''
            eval_template5_arg1 = ''
            eval_template5_arg1 += '(%i-%i+50)%%100 - 50'
            eval_template5_arg2 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template5_arg2 = self.get_r(eval_template5_arg2, True, word)
            eval_template5_arg3 = ''
            extension6_arg1 = ''
            extension6_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template5_arg3 += str(vocola_ext_variables.variable_get(extension6_arg1))
            eval_template4_arg3 += eval_template(eval_template5_arg1, eval_template5_arg2, eval_template5_arg3)
            eval_template3_arg3 += eval_template(eval_template4_arg1, eval_template4_arg2, eval_template4_arg3)
            eval_template2_arg2 += eval_template(eval_template3_arg1, eval_template3_arg2, eval_template3_arg3)
            eval_template2_arg3 = ''
            eval_template3_arg1 = ''
            eval_template3_arg1 += 'max(%i,%i)'
            eval_template3_arg2 = ''
            eval_template3_arg2 += '1'
            eval_template3_arg3 = ''
            eval_template4_arg1 = ''
            eval_template4_arg1 += '%i + %i'
            eval_template4_arg2 = ''
            extension5_arg1 = ''
            extension5_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template4_arg2 += str(vocola_ext_variables.variable_get(extension5_arg1))
            eval_template4_arg3 = ''
            eval_template5_arg1 = ''
            eval_template5_arg1 += '(%i-%i+50)%%100 - 50'
            eval_template5_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template5_arg2 = self.get_r(eval_template5_arg2, True, word)
            eval_template5_arg3 = ''
            extension6_arg1 = ''
            extension6_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template5_arg3 += str(vocola_ext_variables.variable_get(extension6_arg1))
            eval_template4_arg3 += eval_template(eval_template5_arg1, eval_template5_arg2, eval_template5_arg3)
            eval_template3_arg3 += eval_template(eval_template4_arg1, eval_template4_arg2, eval_template4_arg3)
            eval_template2_arg3 += eval_template(eval_template3_arg1, eval_template3_arg2, eval_template3_arg3)
            limit += eval_template(eval_template2_arg1, eval_template2_arg2, eval_template2_arg3)
            for i in range(to_long(limit)):
                top_buffer += '{home}'
                top_buffer += '{space_'
                word = fullResults[5 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
                top_buffer += '}'
                top_buffer += '{down}'
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            import vocola_ext_variables
            top_buffer += str(vocola_ext_variables.variable_get(extension_arg1))
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('win32pad_lines.vcl', 82, '\'indent\' <r> \'comma\' <r> \'by\' 1..20', e)
            self.firstWord = -1

    # 'outdent' <r> 'comma' <r> 'by' 1..20
    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_save()
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            extension_arg2 = ''
            import vocola_ext_clipboard
            extension_arg2 += str(vocola_ext_clipboard.clipboard_get())
            import vocola_ext_variables
            vocola_ext_variables.variable_set(extension_arg1, extension_arg2)
            top_buffer = do_flush(False, top_buffer);
            import vocola_ext_clipboard
            vocola_ext_clipboard.clipboard_restore()
            eval_template_arg1 = ''
            eval_template_arg1 += 'max(%i,%i)'
            eval_template_arg2 = ''
            eval_template_arg2 += '1'
            eval_template_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '%i + %i'
            eval_template2_arg2 = ''
            extension3_arg1 = ''
            extension3_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template2_arg2 += str(vocola_ext_variables.variable_get(extension3_arg1))
            eval_template2_arg3 = ''
            eval_template3_arg1 = ''
            eval_template3_arg1 += '(%i-%i+50)%%100 - 50'
            eval_template3_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template3_arg2 = self.get_r(eval_template3_arg2, True, word)
            eval_template3_arg3 = ''
            extension4_arg1 = ''
            extension4_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template3_arg3 += str(vocola_ext_variables.variable_get(extension4_arg1))
            eval_template2_arg3 += eval_template(eval_template3_arg1, eval_template3_arg2, eval_template3_arg3)
            eval_template_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2, eval_template2_arg3)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3)
            top_buffer += '{enter}'
            limit = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '%i - %i'
            eval_template2_arg2 = ''
            eval_template3_arg1 = ''
            eval_template3_arg1 += 'max(%i,%i)'
            eval_template3_arg2 = ''
            eval_template3_arg2 += '1'
            eval_template3_arg3 = ''
            eval_template4_arg1 = ''
            eval_template4_arg1 += '%i + %i'
            eval_template4_arg2 = ''
            extension5_arg1 = ''
            extension5_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template4_arg2 += str(vocola_ext_variables.variable_get(extension5_arg1))
            eval_template4_arg3 = ''
            eval_template5_arg1 = ''
            eval_template5_arg1 += '(%i-%i+50)%%100 - 50'
            eval_template5_arg2 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template5_arg2 = self.get_r(eval_template5_arg2, True, word)
            eval_template5_arg3 = ''
            extension6_arg1 = ''
            extension6_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template5_arg3 += str(vocola_ext_variables.variable_get(extension6_arg1))
            eval_template4_arg3 += eval_template(eval_template5_arg1, eval_template5_arg2, eval_template5_arg3)
            eval_template3_arg3 += eval_template(eval_template4_arg1, eval_template4_arg2, eval_template4_arg3)
            eval_template2_arg2 += eval_template(eval_template3_arg1, eval_template3_arg2, eval_template3_arg3)
            eval_template2_arg3 = ''
            eval_template3_arg1 = ''
            eval_template3_arg1 += 'max(%i,%i)'
            eval_template3_arg2 = ''
            eval_template3_arg2 += '1'
            eval_template3_arg3 = ''
            eval_template4_arg1 = ''
            eval_template4_arg1 += '%i + %i'
            eval_template4_arg2 = ''
            extension5_arg1 = ''
            extension5_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template4_arg2 += str(vocola_ext_variables.variable_get(extension5_arg1))
            eval_template4_arg3 = ''
            eval_template5_arg1 = ''
            eval_template5_arg1 += '(%i-%i+50)%%100 - 50'
            eval_template5_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template5_arg2 = self.get_r(eval_template5_arg2, True, word)
            eval_template5_arg3 = ''
            extension6_arg1 = ''
            extension6_arg1 += ':current-line'
            import vocola_ext_variables
            eval_template5_arg3 += str(vocola_ext_variables.variable_get(extension6_arg1))
            eval_template4_arg3 += eval_template(eval_template5_arg1, eval_template5_arg2, eval_template5_arg3)
            eval_template3_arg3 += eval_template(eval_template4_arg1, eval_template4_arg2, eval_template4_arg3)
            eval_template2_arg3 += eval_template(eval_template3_arg1, eval_template3_arg2, eval_template3_arg3)
            limit += eval_template(eval_template2_arg1, eval_template2_arg2, eval_template2_arg3)
            for i in range(to_long(limit)):
                top_buffer += '{home}'
                top_buffer += '{del_'
                word = fullResults[5 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
                top_buffer += '}'
                top_buffer += '{down}'
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Go To'
            saved_firstWord = self.firstWord
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1])
            self.firstWord = saved_firstWord
            extension_arg1 = ''
            extension_arg1 += ':current-line'
            import vocola_ext_variables
            top_buffer += str(vocola_ext_variables.variable_get(extension_arg1))
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('win32pad_lines.vcl', 83, '\'outdent\' <r> \'comma\' <r> \'by\' 1..20', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None
