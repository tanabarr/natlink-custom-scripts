
### Switch applications, windows, and panels

Switch Window                        = SendSystemKeys( {Alt+Tab} );
Copy and Switch                      = {Ctrl+a}{Ctrl+c} SendSystemKeys( {Alt+Tab} );
Copy to (NatSpeak|Emacs|Composition) = {Ctrl+a}{Ctrl+c} HeardWord(switch,to,$1);

### Application window navigation

launchBar() := SendSystemKeys({win+t});
#launchBar() := Keys.SendInput({win+t});

launch bar = launchBar();

# reset focus to the messages from Natlink window, seems to fix issues where
# handle is not recognised, it is nonetheless a hack!
focusNatlink() := launchBar() {enter} {alt+space} Wait(50) n;
minWindow() := Wait(100) {alt+space} Wait(100) n Wait(100);

<exe_apps> := (
          crome=chrome.exe
          |outlook=outlook.exe
          |putty=putty.exe
          |pad=win32pad.exe
          |virtualbox=virtualbox.exe
          |video=vlc.exe
          |editor=gvim.exe
          |Spotify=Spotify.exe
          |charm=pycharm.exe
          |skype=Skype.exe
          |firefox=firefox.exe
          |explorer=explorer.exe
);

# switch to window, prefix with focusing messages from that link window means we avoid situation where Windows
# not brought into focus (something to do with stale/unchanged window objects?)
go to <exe_apps> = focusNatlink() Window.Go(app>$1);
#app go <exe_apps> = launchBar() Wait(0) {enter} Wait(0) Window.Go(app>$1);
#app go <exe_apps> = Window.Go_(app>$1) If(Window.Success(), "", launchBar() Wait(0) {enter} Wait(0) Window.Go(app>$1));

# bounce to spotify, perform various actions and return to caller window

spotify [window] favourite = Variable.Set(:old, Window.ID())
    focusNatlink()
    Window.Go(app>Spotify.exe) 
    HeardWord(mouse, window, seven, seven, three, nine, click)
    minWindow() Window.Go(ID> Variable.Get(:old));

spotify [window] (space={space} | skip={ctrl+right}) = Variable.Set(:old, Window.ID())
    Window.Go(app>Spotify.exe) Wait(200) $1 minWindow() 
    Window.Go(ID> Variable.Get(:old));

spotify search <_anything> = focusNatlink() Window.Go(app>Spotify.exe) 
    {ctrl+l} {ctrl+a} Wait(200) $1;

# bounce to browser

chrome page (down=dn|up) = Variable.Set(:old, Window.ID()) focusNatlink() 
    Window.Go(app>chrome.exe) Wait(200) {pg$1} focusNatlink()
    Window.Go(ID> Variable.Get(:old));

## pin programs to taskbar in fixed order, hardcoded mapping to try to improve reliability, collapsed tasks can be selected after
#<apps> := (crome=0
#          |outlook=1
#          |folders=2
#          |putty=3
#          |pad=4
#          |virtualbox=5
#          |editor=6
#          |Spotify=7
#          |charm=8
#          |skype=9
#);

#Launcher go <apps> = launchBar() Wait(10) Repeat($1, {Down} Wait(10)) {enter}; 
##Launch <apps> = launchBar() Wait(100) Repeat( Eval($1-1), {Down} Wait(100)) {enter}; 
#Launch close <apps> = launchBar() Wait(100) Repeat( Eval($1-1), {Down}) {enter} Wait(100) {alt+f4};

# macro to select taskbar with index from top or bottom, launch and launch close split into separate commands for readability, handle top and bottom instead of index one due to miss recognitions with "launch one"
# positional launch commands for tasks to use for non-indexed applications
<2to20> := 2..20;
Launch <2to20> [(from bottom)] = launchBar() Wait(100) When($2, Repeat($1, {Up} Wait(100)) , Repeat( Eval($1-1), {Down} Wait(50))) {enter}; 
Launch close <2to20> [(from bottom)] [1..6 times] = launchBar() Wait(100) When($2, Repeat($1, {Up} Wait(100)) , Repeat( Eval($1-1), {Down} Wait(50))) When($3, Repeat($3, {alt+f4}), {enter}{alt+f4}); 
Launch (bottom={up} | top="") = launchBar() Wait(100) $1 Wait(100) {enter};
Launch close (bottom={up} | top="") = launchBar() Wait(100) $1 Wait(100) {enter} Wait(100) {alt+f4};

## 
## Designatable windows: (Mark Lilibridge)
## 

<area> := (blue | black | purple | brown | crimson | # gray is confused with red
West | East | North | South );

AreaTitle(color) := Variable.Get($color _area_title, "$color window not set yet");
#    If(EQ($color, black),
#        IfHome("^xterm whiskey$","^xterm foxtrot$"),
#            If(EQ($color, blue), "^startup xterm$",
#                 "$color window not set yet")));

SetArea(color) := Variable.Set ($color _area_title, ID> Window.ID());
ResetArea(color) := Variable.Unset($color _area_title);

GoArea(color) := Window.Go(AreaTitle($color));
#GoArea(color) := Window.SwitchTo(AreaTitle($color));

## 
## Designatable windows:
## 

set <area> area = SetArea($1);
reset <area> area = ResetArea($1);

<area> area = focusNatlink() GoArea($1);
#<area> area = GoArea($1);
#<area> area [[<dump>] <op>] = GoArea($1) $3 $2;
#
#<area> save = Save() GoArea($1);
#<area> [save] [<dump>] <op> = Save() GoArea($1) $3 $2;
