#include "machines.vch";
include "git.vch";
include "systemctl.vch";
include "pdb.vch";
include "package_management.vch";
include "service_control.vch";

#PLACE(before, after) := $before $after {left_ Len($after) }
#SHELL(pathname) := Replace($pathname, " ", "\ ");

##
## miscellaneous Shell commands
##
<common_actions> := (
    source="source "|
    find process="ps ax"|
    find process file="ps ef"|
    find files="find / -name ''{left}"|
    find files here="find ./ -name ''{left}"|
    removed by code="find ./ -name '*.pyc'| xargs rm"|
    make archive="tar -cf "|
    extract archive="tar -xf "|
    track archive="tar -xf "|
    read archive="tar -tf "|
    change ownership="chown -R tanabarr:tanabarr "|
    change permissions="chmod -R a+x "|
    make executable="chmod -R a+x "|
    move files="mv "|
    remove file="rm "|
    network stats="netstat -tunlp{enter}"|
    network interfaces="ip addr{enter}"|
    make link="ln -sn "|
    grep="grep ''{left}"|
    recursive grep="grep -R ''{left}"|
    read file="less "|
    tail file="tail -f "|
    list command history="history{enter}"|
    execute command="./"|
    home root="~/"|
    edit="vim "|
    list="ls -h{enter}"|
    list directory="ls -h "|
    long list="ls -lah{enter}"|
    long list directory="ls -lah "|
    make directory="mkdir "|
    show disk space="df -h .{enter}"|
    echo command="echo "
);
[(as root="sudo ")] <common_actions> = "$1$2";

switch [to] (superuser={enter}|user=) = "sudo su - $1";
keyac shell (superuser="su")=$1;

#    (recursive="-r"|file="") copy = "cp $1 ";
#    <scp> := ( secure copy = "scp " | secure recursive copy = "scp -r "
#    | recursive secure copy = "scp -r "
#    | secure clone = "scp -p -r ");

history                 = {Ctrl+r};
search history                 = "!";
list history		= history{enter};
break                        = {Ctrl+c};
break end of file                        = {Ctrl+d};
escape process         = {esc}{ctrl+z};
(foreground="fg" | background="bg") process =
    $1{enter};
double dash                  = "--";
Bash Tag File Update         =
    "ctags -R --c++-kinds=+p --fields=+iaS --extra=+q ."{Enter};
confirm force (close="{esc}:q!"|remove="rm -r")  = $1;
back directory 1..9 = Repeat($1, ../) {Enter}; 
enter list                = "{enter}ls{enter}";
change absolute directory = "{shift}cd -P .{enter}";
present working directory = "pwd";  
search text = "| grep ";
close shell = "exit{enter}";

(version="--version"|
	short="-"|short yes="-y"|
	long="--"|
	help="--help"|
	force="--force"|
	continue="--continue"|
	yes="-y") option = " $1";

# TODO: seems ridiculous to do it like this, find a better way
(vim=vimdiff|
	normal=diff|
	normal brief="diff -q") diff = "$1 \{,\}{Left_2}{Del}{Left_3}{Del}{Right}";  

### currently unused
#cygwin password = "^5%";
#
#(sub|SVM=svn) 
#   (checkout|
#	diff|
#	commit|
#	update|
#	remove|
#	checkout bug=co -b|
#	log=log_grep|
#	start bug=start_bug|
#	status) = "$1 $2 ";

start environment 1..5 = "source \$ENV$1/bin/activate{enter}";
stop environment = "deactivate{enter}"; 
export (test|development=dev) settings = "export DJANGO_SETTINGS_MODULE=settings";
get it fetch = "git fetch ssh://tanabarr@review.whamcloud.com:29418/chroma refs/changes/44/19344/10 && git checkout FETCH_HEAD";

Django (shell|
	database shell=dbshell|
	sink=syncdb|
	sink input="syncdb < input"|
	run="runserver 127.0.0.1:9090"|
	dump=dumpdata) = "python mymanage.py $1{enter}";

fix enter key = stty" "sane{enter};

#common directory locations
initialisation scripts = "/etc/init.d/";
et cetera = "/etc/";
system config = "/etc/sysconfig";
my home [(one=tan|two=tom)] = When($1, "~$1/", "~tan/");
log root = "/var/log/";
use a lip [(pie=python)] = "/usr/lib/$1";
(manager|
    manager core="manager/chroma_core"|
    manager tests="manager/tests"|
    manager framework="manager/tests/framework"|
	dependencies|
	common="manager/../../iml-common"|
	bundles|
	agent|
	agent device="agent/chroma_agent/device_plugins"|
	agent action="agent/chroma_agent/action_plugins"|
	agent tests="agent/tests"|
#	external=externals|
	simulator=sim) = "~/projects/chroma/chroma-$1/";

#programming primitives
(pie="[5,6,7,8]:" {enter} {tab}|bash="5 6 7 8; do ; done" {left_6}) for loop = "for i in "$1;
select chrome data = "select * from chroma_core_";
chrome plug on next = "chroma-agent device_plugin --plugin linux";

##
## command history
##

#repeat command [1..999] = When($1, "!$1{enter}", "!!{enter}");
GotocmdnumMod(cmdnum) := Wait(200) "!$cmdnum"{enter};
Gotocmdnum4Mod(thousands, hundreds, tens, ones) :=
    GotocmdnumMod(Eval($thousands*1000 + $hundreds*100 + $tens*10 + $ones));
#repeat command 0..9                      = GotocmdnumMod($1);
repeat command 0..9 0..9               = Gotocmdnum4Mod(0, 0, $1, $2);
repeat command 0..9 0..9 0..9        = Gotocmdnum4Mod(0, $1, $2, $3);
repeat command 0..9 0..9 0..9 0..9 = Gotocmdnum4Mod($1,$2, $3, $4);

replay 1..9 commands starting 1..9 back = Repeat($1, {up_$2} {enter} Wait(500));

##
## RH specific commands
##

Journal control = "journalctl ";
firewall command = "firewall-cmd ";
service control = "chkconfig ";
service control new = "systemctl ";

##
## Directory information/listing commands
##

#<list> := ( list = ""
#| list some of = " | head"
#| list a lot of = " | head -n 50"
#| local list = {ctrl+a}l{ctrl+e} # for use with sftp
#);
#
#<desc> := (long = -l | full = -A | recent = -t | recursive = -R | human = -h);

#<list> [<desc> [<desc> [<desc>]]] directory =
#ls When($2," $2") When($3," $3") When($4," $4") $1{enter};
#<list> <desc> directory = ls $2 $1{enter};
#<list> directory = ls $1{enter};
#change [to] directory = "{shift}cd ";
go to = "cd ";
switch directory = "{shift}cd -{enter}";
back directory = "{shift}cd ..{enter}";
#shell back directory = "cd " "../" {enter}; 
(shell=""|go={enter}) back directory [1..9] = When($1, "cd ") When($2, Repeat($2, "../"), "../") $1; 

<usage> := (usage="-h" | usage kilobytes="" | usage megabytes="-m");

show disk <usage> = "du $1 -s -- .{enter}";
#""`ls --color=none -A`"" .{enter}"; #  Empty();

W get = wget;
cool = curl;
postgres sequel = postgresql;
engine X = nginx;

##
## database query macros
##
select query = "select * from chroma_core_";
update query = "update chroma_core_";

##
## Macros for tcpdump
##
packet [to] dump = "tcpdump ";

##
## Macros for (s)ftp/ssh:
##
## Note: machines.vch currently not used 12-03-16

# make ssh connection to given cluster, machine pair:
#secure login [to] <machine> = "ssh -X $1{enter}";
remote login cluster [1..9 [1..9]] machine [2..9] = "ssh root@lotus-$1" When($3, $2) "vm" When($3, $3, $2) {enter}; 
remote login cluster [1..9 [1..9]] machine one [2..9] = "ssh root@lotus-$1" When($3, $2) "vm1" When($3, $3, $2) {enter}; 
#When($3, If( Eval('$3 != 1'), $2 ) ) );
remote login local cluster [2..9] = "ssh root@lotus-32vm$1" {enter};
remote login = "ssh ";


#S F T P <machine> = "sftp $1{enter}";

# see local show ... directory above (= lls ...)

multiple get = "mget ";
local change directory = "lcd ";

local working directory = lpwd{enter};


##
## Macros for scp:
##

# add -p to preserve times, permissions:
#<scp> := ( secure copy = "scp " | secure recursive copy = "scp -r "
#| recursive secure copy = "scp -r "
#| secure clone = "scp -p -r ");
#<scp> [(from=""|to="{left_15}") (cluster="root@lotus-32vm")] = "$1$3" $2;

#CopyFrom(scp, origin) := PLACE("$scp " SHELL($origin), " .");
#CopyTo (scp, target) := PLACE("$scp ", " " SHELL($target));

#<scp> from <machine> [/ <UNIX> [/ <COM>]] =
#CopyFrom($1,"$2:" When($3,$3/) When($4,$4/));
#<scp> to <machine> [/ <UNIX> [/ <COM>]] =
#CopyTo ($1,"$2:" WHEN3($3,$3/,~/) When($4,$4/));

# smartcard related aliases

#public key (15|11|12) = "pkcs$1-";
public key (15|11|12) [(init|tool)] = "pkcs$1-$2";


##
## macros for zsh
##

skip on = {ctrl+f};

##
## macros for zfs
##

(pool="zpool"|she said="zfs") 
  (history|status|list=list{enter}|destroy|create)
  [(go={enter})] = "$1 $2 $3";
pool [(import|export)] [(go={enter})] = "zpool $1 $2";

##
## macros for pacemaker
##

pace (
    monitor="mon -1{enter}"|
    resource="resource "|
    resource resource="resource --resource "
) = "crm_$1";
    
probe = "modprobe ";
check return = "echo $?{enter}";

##
## macros for accessing the manager API
##

remove target = "http -v PUT https://localhost:8000/api/target/16/ state=removed --verify=no --session=iml";
list volumes = "http -v GET https://localhost:8000/api/volume/ --verify=no --session=iml";

# fSharpi

Sharp (
    load="#load \"\";;"{left_3}|
    double=";;"{enter}
) = $1;
